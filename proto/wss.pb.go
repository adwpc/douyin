// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wss.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WssResponse struct {
	Seqid                uint64            `protobuf:"varint,1,opt,name=seqid,proto3" json:"seqid,omitempty"`
	Logid                uint64            `protobuf:"varint,2,opt,name=logid,proto3" json:"logid,omitempty"`
	Service              uint64            `protobuf:"varint,3,opt,name=service,proto3" json:"service,omitempty"`
	Method               uint64            `protobuf:"varint,4,opt,name=method,proto3" json:"method,omitempty"`
	Headers              map[string]string `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PayloadEncoding      string            `protobuf:"bytes,6,opt,name=payloadEncoding,proto3" json:"payloadEncoding,omitempty"`
	PayloadType          string            `protobuf:"bytes,7,opt,name=payloadType,proto3" json:"payloadType,omitempty"`
	Payload              []byte            `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WssResponse) Reset()         { *m = WssResponse{} }
func (m *WssResponse) String() string { return proto.CompactTextString(m) }
func (*WssResponse) ProtoMessage()    {}
func (*WssResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e5a0821ea49fbd, []int{0}
}
func (m *WssResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WssResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WssResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WssResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WssResponse.Merge(m, src)
}
func (m *WssResponse) XXX_Size() int {
	return m.Size()
}
func (m *WssResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WssResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WssResponse proto.InternalMessageInfo

func (m *WssResponse) GetSeqid() uint64 {
	if m != nil {
		return m.Seqid
	}
	return 0
}

func (m *WssResponse) GetLogid() uint64 {
	if m != nil {
		return m.Logid
	}
	return 0
}

func (m *WssResponse) GetService() uint64 {
	if m != nil {
		return m.Service
	}
	return 0
}

func (m *WssResponse) GetMethod() uint64 {
	if m != nil {
		return m.Method
	}
	return 0
}

func (m *WssResponse) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *WssResponse) GetPayloadEncoding() string {
	if m != nil {
		return m.PayloadEncoding
	}
	return ""
}

func (m *WssResponse) GetPayloadType() string {
	if m != nil {
		return m.PayloadType
	}
	return ""
}

func (m *WssResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*WssResponse)(nil), "WssResponse")
	proto.RegisterMapType((map[string]string)(nil), "WssResponse.HeadersEntry")
}

func init() { proto.RegisterFile("wss.proto", fileDescriptor_61e5a0821ea49fbd) }

var fileDescriptor_61e5a0821ea49fbd = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4b, 0x84, 0x40,
	0x14, 0x80, 0x19, 0xdd, 0xd5, 0x7c, 0x0a, 0xc5, 0x10, 0x31, 0x75, 0x90, 0xa1, 0xd3, 0x9c, 0x3c,
	0xb4, 0x97, 0xd8, 0x63, 0xb0, 0xd0, 0x79, 0x08, 0x3a, 0xdb, 0xce, 0x63, 0x57, 0x32, 0xc7, 0x7c,
	0xb6, 0xe1, 0xdf, 0xeb, 0xd4, 0xb1, 0x9f, 0x10, 0xfe, 0x92, 0x70, 0x54, 0x90, 0x6e, 0xf3, 0x7d,
	0xef, 0xc1, 0x1b, 0x3e, 0x88, 0x3e, 0x89, 0xb2, 0xba, 0xb1, 0xad, 0xbd, 0xfd, 0xf2, 0x20, 0x7e,
	0x26, 0xd2, 0x48, 0xb5, 0xad, 0x08, 0xf9, 0x25, 0xac, 0x09, 0xdf, 0x0b, 0x23, 0x98, 0x64, 0x6a,
	0xa5, 0x47, 0x18, 0x6c, 0x69, 0x0f, 0x85, 0x11, 0xde, 0x68, 0x1d, 0x70, 0x01, 0x21, 0x61, 0x73,
	0x2a, 0xf6, 0x28, 0x7c, 0xe7, 0x67, 0xe4, 0x57, 0x10, 0xbc, 0x61, 0x7b, 0xb4, 0x46, 0xac, 0xdc,
	0x60, 0x22, 0xbe, 0x81, 0xf0, 0x88, 0xb9, 0xc1, 0x86, 0xc4, 0x5a, 0xfa, 0x2a, 0xbe, 0xbb, 0xce,
	0x16, 0xc7, 0xb3, 0xc7, 0x71, 0xb6, 0xab, 0xda, 0xa6, 0xd3, 0xf3, 0x26, 0x57, 0x70, 0x5e, 0xe7,
	0x5d, 0x69, 0x73, 0xb3, 0xab, 0xf6, 0xd6, 0x14, 0xd5, 0x41, 0x04, 0x92, 0xa9, 0x48, 0xff, 0xd7,
	0x5c, 0x42, 0x3c, 0xa9, 0xa7, 0xae, 0x46, 0x11, 0xba, 0xad, 0xa5, 0x1a, 0xbe, 0x3c, 0xa1, 0x38,
	0x93, 0x4c, 0x25, 0x7a, 0xc6, 0x9b, 0x2d, 0x24, 0xcb, 0xf3, 0xfc, 0x02, 0xfc, 0x57, 0xec, 0x5c,
	0x86, 0x48, 0x0f, 0xcf, 0x21, 0xc2, 0x29, 0x2f, 0x3f, 0xd0, 0x45, 0x88, 0xf4, 0x08, 0x5b, 0xef,
	0x9e, 0x3d, 0x24, 0xdf, 0x7d, 0xca, 0x7e, 0xfa, 0x94, 0xfd, 0xf6, 0x29, 0x7b, 0x09, 0x5c, 0xd9,
	0xcd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xd6, 0x20, 0x16, 0x66, 0x01, 0x00, 0x00,
}

func (m *WssResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WssResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WssResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintWss(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PayloadType) > 0 {
		i -= len(m.PayloadType)
		copy(dAtA[i:], m.PayloadType)
		i = encodeVarintWss(dAtA, i, uint64(len(m.PayloadType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PayloadEncoding) > 0 {
		i -= len(m.PayloadEncoding)
		copy(dAtA[i:], m.PayloadEncoding)
		i = encodeVarintWss(dAtA, i, uint64(len(m.PayloadEncoding)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			v := m.Headers[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintWss(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWss(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWss(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Method != 0 {
		i = encodeVarintWss(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x20
	}
	if m.Service != 0 {
		i = encodeVarintWss(dAtA, i, uint64(m.Service))
		i--
		dAtA[i] = 0x18
	}
	if m.Logid != 0 {
		i = encodeVarintWss(dAtA, i, uint64(m.Logid))
		i--
		dAtA[i] = 0x10
	}
	if m.Seqid != 0 {
		i = encodeVarintWss(dAtA, i, uint64(m.Seqid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWss(dAtA []byte, offset int, v uint64) int {
	offset -= sovWss(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WssResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqid != 0 {
		n += 1 + sovWss(uint64(m.Seqid))
	}
	if m.Logid != 0 {
		n += 1 + sovWss(uint64(m.Logid))
	}
	if m.Service != 0 {
		n += 1 + sovWss(uint64(m.Service))
	}
	if m.Method != 0 {
		n += 1 + sovWss(uint64(m.Method))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWss(uint64(len(k))) + 1 + len(v) + sovWss(uint64(len(v)))
			n += mapEntrySize + 1 + sovWss(uint64(mapEntrySize))
		}
	}
	l = len(m.PayloadEncoding)
	if l > 0 {
		n += 1 + l + sovWss(uint64(l))
	}
	l = len(m.PayloadType)
	if l > 0 {
		n += 1 + l + sovWss(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovWss(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWss(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWss(x uint64) (n int) {
	return sovWss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WssResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WssResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WssResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqid", wireType)
			}
			m.Seqid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seqid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logid", wireType)
			}
			m.Logid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Logid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			m.Service = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Service |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWss
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWss
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWss
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWss
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWss
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWss(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWss
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadEncoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWss
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWss
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWss
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWss
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWss        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWss          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWss = fmt.Errorf("proto: unexpected end of group")
)
