// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Response struct {
	Messages             []*Message        `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Cursor               string            `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	FetchInterval        int64             `protobuf:"varint,3,opt,name=fetchInterval,proto3" json:"fetchInterval,omitempty"`
	Now                  int64             `protobuf:"varint,4,opt,name=now,proto3" json:"now,omitempty"`
	InternalExt          string            `protobuf:"bytes,5,opt,name=internalExt,proto3" json:"internalExt,omitempty"`
	FetchType            int32             `protobuf:"varint,6,opt,name=fetchType,proto3" json:"fetchType,omitempty"`
	RouteParams          map[string]string `protobuf:"bytes,7,rep,name=routeParams,proto3" json:"routeParams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HeartbeatDuration    int64             `protobuf:"varint,8,opt,name=heartbeatDuration,proto3" json:"heartbeatDuration,omitempty"`
	NeedAck              bool              `protobuf:"varint,9,opt,name=needAck,proto3" json:"needAck,omitempty"`
	PushServer           string            `protobuf:"bytes,10,opt,name=pushServer,proto3" json:"pushServer,omitempty"`
	LiveCursor           string            `protobuf:"bytes,11,opt,name=liveCursor,proto3" json:"liveCursor,omitempty"`
	HistoryNoMore        bool              `protobuf:"varint,12,opt,name=historyNoMore,proto3" json:"historyNoMore,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Response) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *Response) GetFetchInterval() int64 {
	if m != nil {
		return m.FetchInterval
	}
	return 0
}

func (m *Response) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *Response) GetInternalExt() string {
	if m != nil {
		return m.InternalExt
	}
	return ""
}

func (m *Response) GetFetchType() int32 {
	if m != nil {
		return m.FetchType
	}
	return 0
}

func (m *Response) GetRouteParams() map[string]string {
	if m != nil {
		return m.RouteParams
	}
	return nil
}

func (m *Response) GetHeartbeatDuration() int64 {
	if m != nil {
		return m.HeartbeatDuration
	}
	return 0
}

func (m *Response) GetNeedAck() bool {
	if m != nil {
		return m.NeedAck
	}
	return false
}

func (m *Response) GetPushServer() string {
	if m != nil {
		return m.PushServer
	}
	return ""
}

func (m *Response) GetLiveCursor() string {
	if m != nil {
		return m.LiveCursor
	}
	return ""
}

func (m *Response) GetHistoryNoMore() bool {
	if m != nil {
		return m.HistoryNoMore
	}
	return false
}

type Message struct {
	Method               string   `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	MsgId                int64    `protobuf:"varint,3,opt,name=msgId,proto3" json:"msgId,omitempty"`
	MsgType              int32    `protobuf:"varint,4,opt,name=msgType,proto3" json:"msgType,omitempty"`
	Offset               int64    `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *Message) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *Message) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type RoomUserSeqMessage struct {
	Common               *Common                           `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Ranks                []*RoomUserSeqMessage_Contributor `protobuf:"bytes,2,rep,name=ranks,proto3" json:"ranks,omitempty"`
	Total                int64                             `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	PopStr               string                            `protobuf:"bytes,4,opt,name=popStr,proto3" json:"popStr,omitempty"`
	Seats                []*RoomUserSeqMessage_Contributor `protobuf:"bytes,5,rep,name=seats,proto3" json:"seats,omitempty"`
	Popularity           int64                             `protobuf:"varint,6,opt,name=popularity,proto3" json:"popularity,omitempty"`
	TotalUser            int64                             `protobuf:"varint,7,opt,name=totalUser,proto3" json:"totalUser,omitempty"`
	TotalUserStr         string                            `protobuf:"bytes,8,opt,name=totalUserStr,proto3" json:"totalUserStr,omitempty"`
	TotalStr             string                            `protobuf:"bytes,9,opt,name=totalStr,proto3" json:"totalStr,omitempty"`
	OnlineUserForAnchor  string                            `protobuf:"bytes,10,opt,name=onlineUserForAnchor,proto3" json:"onlineUserForAnchor,omitempty"`
	TotalPvForAnchor     string                            `protobuf:"bytes,11,opt,name=totalPvForAnchor,proto3" json:"totalPvForAnchor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *RoomUserSeqMessage) Reset()         { *m = RoomUserSeqMessage{} }
func (m *RoomUserSeqMessage) String() string { return proto.CompactTextString(m) }
func (*RoomUserSeqMessage) ProtoMessage()    {}
func (*RoomUserSeqMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}
func (m *RoomUserSeqMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomUserSeqMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomUserSeqMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomUserSeqMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomUserSeqMessage.Merge(m, src)
}
func (m *RoomUserSeqMessage) XXX_Size() int {
	return m.Size()
}
func (m *RoomUserSeqMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomUserSeqMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RoomUserSeqMessage proto.InternalMessageInfo

func (m *RoomUserSeqMessage) GetCommon() *Common {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *RoomUserSeqMessage) GetRanks() []*RoomUserSeqMessage_Contributor {
	if m != nil {
		return m.Ranks
	}
	return nil
}

func (m *RoomUserSeqMessage) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *RoomUserSeqMessage) GetPopStr() string {
	if m != nil {
		return m.PopStr
	}
	return ""
}

func (m *RoomUserSeqMessage) GetSeats() []*RoomUserSeqMessage_Contributor {
	if m != nil {
		return m.Seats
	}
	return nil
}

func (m *RoomUserSeqMessage) GetPopularity() int64 {
	if m != nil {
		return m.Popularity
	}
	return 0
}

func (m *RoomUserSeqMessage) GetTotalUser() int64 {
	if m != nil {
		return m.TotalUser
	}
	return 0
}

func (m *RoomUserSeqMessage) GetTotalUserStr() string {
	if m != nil {
		return m.TotalUserStr
	}
	return ""
}

func (m *RoomUserSeqMessage) GetTotalStr() string {
	if m != nil {
		return m.TotalStr
	}
	return ""
}

func (m *RoomUserSeqMessage) GetOnlineUserForAnchor() string {
	if m != nil {
		return m.OnlineUserForAnchor
	}
	return ""
}

func (m *RoomUserSeqMessage) GetTotalPvForAnchor() string {
	if m != nil {
		return m.TotalPvForAnchor
	}
	return ""
}

type RoomUserSeqMessage_Contributor struct {
	Score                int64    `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	User                 *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Rank                 int64    `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	Delta                int64    `protobuf:"varint,4,opt,name=delta,proto3" json:"delta,omitempty"`
	IsHidden             bool     `protobuf:"varint,5,opt,name=isHidden,proto3" json:"isHidden,omitempty"`
	ScoreDescription     string   `protobuf:"bytes,6,opt,name=scoreDescription,proto3" json:"scoreDescription,omitempty"`
	ExactlyScore         string   `protobuf:"bytes,7,opt,name=exactlyScore,proto3" json:"exactlyScore,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomUserSeqMessage_Contributor) Reset()         { *m = RoomUserSeqMessage_Contributor{} }
func (m *RoomUserSeqMessage_Contributor) String() string { return proto.CompactTextString(m) }
func (*RoomUserSeqMessage_Contributor) ProtoMessage()    {}
func (*RoomUserSeqMessage_Contributor) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2, 0}
}
func (m *RoomUserSeqMessage_Contributor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomUserSeqMessage_Contributor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomUserSeqMessage_Contributor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomUserSeqMessage_Contributor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomUserSeqMessage_Contributor.Merge(m, src)
}
func (m *RoomUserSeqMessage_Contributor) XXX_Size() int {
	return m.Size()
}
func (m *RoomUserSeqMessage_Contributor) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomUserSeqMessage_Contributor.DiscardUnknown(m)
}

var xxx_messageInfo_RoomUserSeqMessage_Contributor proto.InternalMessageInfo

func (m *RoomUserSeqMessage_Contributor) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RoomUserSeqMessage_Contributor) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RoomUserSeqMessage_Contributor) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RoomUserSeqMessage_Contributor) GetDelta() int64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *RoomUserSeqMessage_Contributor) GetIsHidden() bool {
	if m != nil {
		return m.IsHidden
	}
	return false
}

func (m *RoomUserSeqMessage_Contributor) GetScoreDescription() string {
	if m != nil {
		return m.ScoreDescription
	}
	return ""
}

func (m *RoomUserSeqMessage_Contributor) GetExactlyScore() string {
	if m != nil {
		return m.ExactlyScore
	}
	return ""
}

type GiftMessage struct {
	Common               *Common                 `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	GiftId               int64                   `protobuf:"varint,2,opt,name=giftId,proto3" json:"giftId,omitempty"`
	FanTicketCount       int64                   `protobuf:"varint,3,opt,name=fanTicketCount,proto3" json:"fanTicketCount,omitempty"`
	GroupCount           int64                   `protobuf:"varint,4,opt,name=groupCount,proto3" json:"groupCount,omitempty"`
	RepeatCount          int64                   `protobuf:"varint,5,opt,name=repeatCount,proto3" json:"repeatCount,omitempty"`
	ComboCount           int64                   `protobuf:"varint,6,opt,name=comboCount,proto3" json:"comboCount,omitempty"`
	User                 *User                   `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	ToUser               *User                   `protobuf:"bytes,8,opt,name=toUser,proto3" json:"toUser,omitempty"`
	RepeatEnd            int32                   `protobuf:"varint,9,opt,name=repeatEnd,proto3" json:"repeatEnd,omitempty"`
	TextEffect           *GiftMessage_TextEffect `protobuf:"bytes,10,opt,name=textEffect,proto3" json:"textEffect,omitempty"`
	GroupId              int64                   `protobuf:"varint,11,opt,name=groupId,proto3" json:"groupId,omitempty"`
	IncomeTaskgifts      int64                   `protobuf:"varint,12,opt,name=incomeTaskgifts,proto3" json:"incomeTaskgifts,omitempty"`
	RoomFanTicketCount   int64                   `protobuf:"varint,13,opt,name=roomFanTicketCount,proto3" json:"roomFanTicketCount,omitempty"`
	Priority             *GiftIMPriority         `protobuf:"bytes,14,opt,name=priority,proto3" json:"priority,omitempty"`
	Gift                 *GiftStruct             `protobuf:"bytes,15,opt,name=gift,proto3" json:"gift,omitempty"`
	LogId                string                  `protobuf:"bytes,16,opt,name=logId,proto3" json:"logId,omitempty"`
	SendType             int64                   `protobuf:"varint,17,opt,name=sendType,proto3" json:"sendType,omitempty"`
	PublicAreaCommon     *PublicAreaCommon       `protobuf:"bytes,18,opt,name=publicAreaCommon,proto3" json:"publicAreaCommon,omitempty"`
	TrayDisplayText      *Text                   `protobuf:"bytes,19,opt,name=trayDisplayText,proto3" json:"trayDisplayText,omitempty"`
	BannedDisplayEffects int64                   `protobuf:"varint,20,opt,name=bannedDisplayEffects,proto3" json:"bannedDisplayEffects,omitempty"`
	TrayInfo             *GiftTrayInfo           `protobuf:"bytes,21,opt,name=trayInfo,proto3" json:"trayInfo,omitempty"`
	AssetEffectMixInfo   *AssetEffectMixInfo     `protobuf:"bytes,24,opt,name=assetEffectMixInfo,proto3" json:"assetEffectMixInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GiftMessage) Reset()         { *m = GiftMessage{} }
func (m *GiftMessage) String() string { return proto.CompactTextString(m) }
func (*GiftMessage) ProtoMessage()    {}
func (*GiftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3}
}
func (m *GiftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftMessage.Merge(m, src)
}
func (m *GiftMessage) XXX_Size() int {
	return m.Size()
}
func (m *GiftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GiftMessage proto.InternalMessageInfo

func (m *GiftMessage) GetCommon() *Common {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *GiftMessage) GetGiftId() int64 {
	if m != nil {
		return m.GiftId
	}
	return 0
}

func (m *GiftMessage) GetFanTicketCount() int64 {
	if m != nil {
		return m.FanTicketCount
	}
	return 0
}

func (m *GiftMessage) GetGroupCount() int64 {
	if m != nil {
		return m.GroupCount
	}
	return 0
}

func (m *GiftMessage) GetRepeatCount() int64 {
	if m != nil {
		return m.RepeatCount
	}
	return 0
}

func (m *GiftMessage) GetComboCount() int64 {
	if m != nil {
		return m.ComboCount
	}
	return 0
}

func (m *GiftMessage) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GiftMessage) GetToUser() *User {
	if m != nil {
		return m.ToUser
	}
	return nil
}

func (m *GiftMessage) GetRepeatEnd() int32 {
	if m != nil {
		return m.RepeatEnd
	}
	return 0
}

func (m *GiftMessage) GetTextEffect() *GiftMessage_TextEffect {
	if m != nil {
		return m.TextEffect
	}
	return nil
}

func (m *GiftMessage) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GiftMessage) GetIncomeTaskgifts() int64 {
	if m != nil {
		return m.IncomeTaskgifts
	}
	return 0
}

func (m *GiftMessage) GetRoomFanTicketCount() int64 {
	if m != nil {
		return m.RoomFanTicketCount
	}
	return 0
}

func (m *GiftMessage) GetPriority() *GiftIMPriority {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *GiftMessage) GetGift() *GiftStruct {
	if m != nil {
		return m.Gift
	}
	return nil
}

func (m *GiftMessage) GetLogId() string {
	if m != nil {
		return m.LogId
	}
	return ""
}

func (m *GiftMessage) GetSendType() int64 {
	if m != nil {
		return m.SendType
	}
	return 0
}

func (m *GiftMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if m != nil {
		return m.PublicAreaCommon
	}
	return nil
}

func (m *GiftMessage) GetTrayDisplayText() *Text {
	if m != nil {
		return m.TrayDisplayText
	}
	return nil
}

func (m *GiftMessage) GetBannedDisplayEffects() int64 {
	if m != nil {
		return m.BannedDisplayEffects
	}
	return 0
}

func (m *GiftMessage) GetTrayInfo() *GiftTrayInfo {
	if m != nil {
		return m.TrayInfo
	}
	return nil
}

func (m *GiftMessage) GetAssetEffectMixInfo() *AssetEffectMixInfo {
	if m != nil {
		return m.AssetEffectMixInfo
	}
	return nil
}

type GiftMessage_TextEffect struct {
	Portrait             *GiftMessage_TextEffect_Detail `protobuf:"bytes,1,opt,name=portrait,proto3" json:"portrait,omitempty"`
	Landscape            *GiftMessage_TextEffect_Detail `protobuf:"bytes,2,opt,name=landscape,proto3" json:"landscape,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GiftMessage_TextEffect) Reset()         { *m = GiftMessage_TextEffect{} }
func (m *GiftMessage_TextEffect) String() string { return proto.CompactTextString(m) }
func (*GiftMessage_TextEffect) ProtoMessage()    {}
func (*GiftMessage_TextEffect) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3, 0}
}
func (m *GiftMessage_TextEffect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftMessage_TextEffect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftMessage_TextEffect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftMessage_TextEffect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftMessage_TextEffect.Merge(m, src)
}
func (m *GiftMessage_TextEffect) XXX_Size() int {
	return m.Size()
}
func (m *GiftMessage_TextEffect) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftMessage_TextEffect.DiscardUnknown(m)
}

var xxx_messageInfo_GiftMessage_TextEffect proto.InternalMessageInfo

func (m *GiftMessage_TextEffect) GetPortrait() *GiftMessage_TextEffect_Detail {
	if m != nil {
		return m.Portrait
	}
	return nil
}

func (m *GiftMessage_TextEffect) GetLandscape() *GiftMessage_TextEffect_Detail {
	if m != nil {
		return m.Landscape
	}
	return nil
}

type GiftMessage_TextEffect_Detail struct {
	Text                 *Text    `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	TextFontSize         int32    `protobuf:"varint,2,opt,name=textFontSize,proto3" json:"textFontSize,omitempty"`
	Background           *Image   `protobuf:"bytes,3,opt,name=background,proto3" json:"background,omitempty"`
	Start                int32    `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	Duration             int32    `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	X                    int32    `protobuf:"varint,6,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32    `protobuf:"varint,7,opt,name=y,proto3" json:"y,omitempty"`
	Width                int32    `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	Height               int32    `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	ShadowDx             int32    `protobuf:"varint,10,opt,name=shadowDx,proto3" json:"shadowDx,omitempty"`
	ShadowDy             int32    `protobuf:"varint,11,opt,name=shadowDy,proto3" json:"shadowDy,omitempty"`
	ShadowRadius         int32    `protobuf:"varint,12,opt,name=shadowRadius,proto3" json:"shadowRadius,omitempty"`
	ShadowColor          string   `protobuf:"bytes,13,opt,name=shadowColor,proto3" json:"shadowColor,omitempty"`
	StrokeColor          string   `protobuf:"bytes,14,opt,name=strokeColor,proto3" json:"strokeColor,omitempty"`
	StrokeWidth          int32    `protobuf:"varint,15,opt,name=strokeWidth,proto3" json:"strokeWidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftMessage_TextEffect_Detail) Reset()         { *m = GiftMessage_TextEffect_Detail{} }
func (m *GiftMessage_TextEffect_Detail) String() string { return proto.CompactTextString(m) }
func (*GiftMessage_TextEffect_Detail) ProtoMessage()    {}
func (*GiftMessage_TextEffect_Detail) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3, 0, 0}
}
func (m *GiftMessage_TextEffect_Detail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftMessage_TextEffect_Detail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftMessage_TextEffect_Detail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftMessage_TextEffect_Detail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftMessage_TextEffect_Detail.Merge(m, src)
}
func (m *GiftMessage_TextEffect_Detail) XXX_Size() int {
	return m.Size()
}
func (m *GiftMessage_TextEffect_Detail) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftMessage_TextEffect_Detail.DiscardUnknown(m)
}

var xxx_messageInfo_GiftMessage_TextEffect_Detail proto.InternalMessageInfo

func (m *GiftMessage_TextEffect_Detail) GetText() *Text {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *GiftMessage_TextEffect_Detail) GetTextFontSize() int32 {
	if m != nil {
		return m.TextFontSize
	}
	return 0
}

func (m *GiftMessage_TextEffect_Detail) GetBackground() *Image {
	if m != nil {
		return m.Background
	}
	return nil
}

func (m *GiftMessage_TextEffect_Detail) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *GiftMessage_TextEffect_Detail) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *GiftMessage_TextEffect_Detail) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *GiftMessage_TextEffect_Detail) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *GiftMessage_TextEffect_Detail) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *GiftMessage_TextEffect_Detail) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GiftMessage_TextEffect_Detail) GetShadowDx() int32 {
	if m != nil {
		return m.ShadowDx
	}
	return 0
}

func (m *GiftMessage_TextEffect_Detail) GetShadowDy() int32 {
	if m != nil {
		return m.ShadowDy
	}
	return 0
}

func (m *GiftMessage_TextEffect_Detail) GetShadowRadius() int32 {
	if m != nil {
		return m.ShadowRadius
	}
	return 0
}

func (m *GiftMessage_TextEffect_Detail) GetShadowColor() string {
	if m != nil {
		return m.ShadowColor
	}
	return ""
}

func (m *GiftMessage_TextEffect_Detail) GetStrokeColor() string {
	if m != nil {
		return m.StrokeColor
	}
	return ""
}

func (m *GiftMessage_TextEffect_Detail) GetStrokeWidth() int32 {
	if m != nil {
		return m.StrokeWidth
	}
	return 0
}

type LikeMessage struct {
	Common               *Common  `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Total                int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Color                int64    `protobuf:"varint,4,opt,name=color,proto3" json:"color,omitempty"`
	User                 *User    `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Icon                 string   `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeMessage) Reset()         { *m = LikeMessage{} }
func (m *LikeMessage) String() string { return proto.CompactTextString(m) }
func (*LikeMessage) ProtoMessage()    {}
func (*LikeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{4}
}
func (m *LikeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeMessage.Merge(m, src)
}
func (m *LikeMessage) XXX_Size() int {
	return m.Size()
}
func (m *LikeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LikeMessage proto.InternalMessageInfo

func (m *LikeMessage) GetCommon() *Common {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *LikeMessage) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *LikeMessage) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *LikeMessage) GetColor() int64 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *LikeMessage) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *LikeMessage) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type ChatMessage struct {
	Common               *Common           `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User                 *User             `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Content              string            `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	VisibleToSender      bool              `protobuf:"varint,4,opt,name=visibleToSender,proto3" json:"visibleToSender,omitempty"`
	BackgroundImage      *Image            `protobuf:"bytes,5,opt,name=backgroundImage,proto3" json:"backgroundImage,omitempty"`
	FullScreenTextColor  string            `protobuf:"bytes,6,opt,name=fullScreenTextColor,proto3" json:"fullScreenTextColor,omitempty"`
	BackgroundImageV2    *Image            `protobuf:"bytes,7,opt,name=backgroundImageV2,proto3" json:"backgroundImageV2,omitempty"`
	PublicAreaCommon     *PublicAreaCommon `protobuf:"bytes,9,opt,name=publicAreaCommon,proto3" json:"publicAreaCommon,omitempty"`
	GiftImage            *Image            `protobuf:"bytes,10,opt,name=giftImage,proto3" json:"giftImage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{5}
}
func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return m.Size()
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetCommon() *Common {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *ChatMessage) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ChatMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ChatMessage) GetVisibleToSender() bool {
	if m != nil {
		return m.VisibleToSender
	}
	return false
}

func (m *ChatMessage) GetBackgroundImage() *Image {
	if m != nil {
		return m.BackgroundImage
	}
	return nil
}

func (m *ChatMessage) GetFullScreenTextColor() string {
	if m != nil {
		return m.FullScreenTextColor
	}
	return ""
}

func (m *ChatMessage) GetBackgroundImageV2() *Image {
	if m != nil {
		return m.BackgroundImageV2
	}
	return nil
}

func (m *ChatMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if m != nil {
		return m.PublicAreaCommon
	}
	return nil
}

func (m *ChatMessage) GetGiftImage() *Image {
	if m != nil {
		return m.GiftImage
	}
	return nil
}

type SocialMessage struct {
	Common               *Common           `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User                 *User             `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	ShareType            int64             `protobuf:"varint,3,opt,name=shareType,proto3" json:"shareType,omitempty"`
	Action               int64             `protobuf:"varint,4,opt,name=action,proto3" json:"action,omitempty"`
	ShareTarget          string            `protobuf:"bytes,5,opt,name=shareTarget,proto3" json:"shareTarget,omitempty"`
	FollowCount          int64             `protobuf:"varint,6,opt,name=followCount,proto3" json:"followCount,omitempty"`
	PublicAreaCommon     *PublicAreaCommon `protobuf:"bytes,7,opt,name=publicAreaCommon,proto3" json:"publicAreaCommon,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SocialMessage) Reset()         { *m = SocialMessage{} }
func (m *SocialMessage) String() string { return proto.CompactTextString(m) }
func (*SocialMessage) ProtoMessage()    {}
func (*SocialMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{6}
}
func (m *SocialMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocialMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocialMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocialMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocialMessage.Merge(m, src)
}
func (m *SocialMessage) XXX_Size() int {
	return m.Size()
}
func (m *SocialMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SocialMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SocialMessage proto.InternalMessageInfo

func (m *SocialMessage) GetCommon() *Common {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *SocialMessage) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *SocialMessage) GetShareType() int64 {
	if m != nil {
		return m.ShareType
	}
	return 0
}

func (m *SocialMessage) GetAction() int64 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *SocialMessage) GetShareTarget() string {
	if m != nil {
		return m.ShareTarget
	}
	return ""
}

func (m *SocialMessage) GetFollowCount() int64 {
	if m != nil {
		return m.FollowCount
	}
	return 0
}

func (m *SocialMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if m != nil {
		return m.PublicAreaCommon
	}
	return nil
}

type MemberMessage struct {
	Common               *Common                     `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User                 *User                       `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	MemberCount          int64                       `protobuf:"varint,3,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	Operator             *User                       `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	IsSetToAdmin         bool                        `protobuf:"varint,5,opt,name=isSetToAdmin,proto3" json:"isSetToAdmin,omitempty"`
	IsTopUser            bool                        `protobuf:"varint,6,opt,name=isTopUser,proto3" json:"isTopUser,omitempty"`
	RankScore            int64                       `protobuf:"varint,7,opt,name=rankScore,proto3" json:"rankScore,omitempty"`
	TopUserNo            int64                       `protobuf:"varint,8,opt,name=topUserNo,proto3" json:"topUserNo,omitempty"`
	EnterType            int64                       `protobuf:"varint,9,opt,name=enterType,proto3" json:"enterType,omitempty"`
	Action               int64                       `protobuf:"varint,10,opt,name=action,proto3" json:"action,omitempty"`
	ActionDescription    string                      `protobuf:"bytes,11,opt,name=actionDescription,proto3" json:"actionDescription,omitempty"`
	UserId               int64                       `protobuf:"varint,12,opt,name=userId,proto3" json:"userId,omitempty"`
	EffectConfig         *MemberMessage_EffectConfig `protobuf:"bytes,13,opt,name=effectConfig,proto3" json:"effectConfig,omitempty"`
	PopStr               string                      `protobuf:"bytes,14,opt,name=popStr,proto3" json:"popStr,omitempty"`
	EnterEffectConfig    *MemberMessage_EffectConfig `protobuf:"bytes,15,opt,name=enterEffectConfig,proto3" json:"enterEffectConfig,omitempty"`
	BackgroundImage      *Image                      `protobuf:"bytes,16,opt,name=backgroundImage,proto3" json:"backgroundImage,omitempty"`
	BackgroundImageV2    *Image                      `protobuf:"bytes,17,opt,name=backgroundImageV2,proto3" json:"backgroundImageV2,omitempty"`
	AnchorDisplayText    *Text                       `protobuf:"bytes,18,opt,name=anchorDisplayText,proto3" json:"anchorDisplayText,omitempty"`
	PublicAreaCommon     *PublicAreaCommon           `protobuf:"bytes,19,opt,name=publicAreaCommon,proto3" json:"publicAreaCommon,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MemberMessage) Reset()         { *m = MemberMessage{} }
func (m *MemberMessage) String() string { return proto.CompactTextString(m) }
func (*MemberMessage) ProtoMessage()    {}
func (*MemberMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{7}
}
func (m *MemberMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberMessage.Merge(m, src)
}
func (m *MemberMessage) XXX_Size() int {
	return m.Size()
}
func (m *MemberMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MemberMessage proto.InternalMessageInfo

func (m *MemberMessage) GetCommon() *Common {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *MemberMessage) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *MemberMessage) GetMemberCount() int64 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *MemberMessage) GetOperator() *User {
	if m != nil {
		return m.Operator
	}
	return nil
}

func (m *MemberMessage) GetIsSetToAdmin() bool {
	if m != nil {
		return m.IsSetToAdmin
	}
	return false
}

func (m *MemberMessage) GetIsTopUser() bool {
	if m != nil {
		return m.IsTopUser
	}
	return false
}

func (m *MemberMessage) GetRankScore() int64 {
	if m != nil {
		return m.RankScore
	}
	return 0
}

func (m *MemberMessage) GetTopUserNo() int64 {
	if m != nil {
		return m.TopUserNo
	}
	return 0
}

func (m *MemberMessage) GetEnterType() int64 {
	if m != nil {
		return m.EnterType
	}
	return 0
}

func (m *MemberMessage) GetAction() int64 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *MemberMessage) GetActionDescription() string {
	if m != nil {
		return m.ActionDescription
	}
	return ""
}

func (m *MemberMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MemberMessage) GetEffectConfig() *MemberMessage_EffectConfig {
	if m != nil {
		return m.EffectConfig
	}
	return nil
}

func (m *MemberMessage) GetPopStr() string {
	if m != nil {
		return m.PopStr
	}
	return ""
}

func (m *MemberMessage) GetEnterEffectConfig() *MemberMessage_EffectConfig {
	if m != nil {
		return m.EnterEffectConfig
	}
	return nil
}

func (m *MemberMessage) GetBackgroundImage() *Image {
	if m != nil {
		return m.BackgroundImage
	}
	return nil
}

func (m *MemberMessage) GetBackgroundImageV2() *Image {
	if m != nil {
		return m.BackgroundImageV2
	}
	return nil
}

func (m *MemberMessage) GetAnchorDisplayText() *Text {
	if m != nil {
		return m.AnchorDisplayText
	}
	return nil
}

func (m *MemberMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if m != nil {
		return m.PublicAreaCommon
	}
	return nil
}

type MemberMessage_EffectConfig struct {
	Type                 int64    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Icon                 *Image   `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	AvatarPos            int64    `protobuf:"varint,3,opt,name=avatarPos,proto3" json:"avatarPos,omitempty"`
	Text                 *Text    `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	TextIcon             *Image   `protobuf:"bytes,5,opt,name=textIcon,proto3" json:"textIcon,omitempty"`
	StayTime             int32    `protobuf:"varint,6,opt,name=stayTime,proto3" json:"stayTime,omitempty"`
	AnimAssetId          int64    `protobuf:"varint,7,opt,name=animAssetId,proto3" json:"animAssetId,omitempty"`
	Badge                *Image   `protobuf:"bytes,8,opt,name=badge,proto3" json:"badge,omitempty"`
	FlexSettingArray     []int64  `protobuf:"varint,9,rep,packed,name=flexSettingArray,proto3" json:"flexSettingArray,omitempty"`
	TextIconOverlay      *Image   `protobuf:"bytes,10,opt,name=textIconOverlay,proto3" json:"textIconOverlay,omitempty"`
	AnimatedBadge        *Image   `protobuf:"bytes,11,opt,name=animatedBadge,proto3" json:"animatedBadge,omitempty"`
	HasSweepLight        bool     `protobuf:"varint,12,opt,name=hasSweepLight,proto3" json:"hasSweepLight,omitempty"`
	TextFlexSettingArray []int64  `protobuf:"varint,13,rep,packed,name=textFlexSettingArray,proto3" json:"textFlexSettingArray,omitempty"`
	CenterAnimAssetId    int64    `protobuf:"varint,14,opt,name=centerAnimAssetId,proto3" json:"centerAnimAssetId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemberMessage_EffectConfig) Reset()         { *m = MemberMessage_EffectConfig{} }
func (m *MemberMessage_EffectConfig) String() string { return proto.CompactTextString(m) }
func (*MemberMessage_EffectConfig) ProtoMessage()    {}
func (*MemberMessage_EffectConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{7, 0}
}
func (m *MemberMessage_EffectConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberMessage_EffectConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberMessage_EffectConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberMessage_EffectConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberMessage_EffectConfig.Merge(m, src)
}
func (m *MemberMessage_EffectConfig) XXX_Size() int {
	return m.Size()
}
func (m *MemberMessage_EffectConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberMessage_EffectConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MemberMessage_EffectConfig proto.InternalMessageInfo

func (m *MemberMessage_EffectConfig) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MemberMessage_EffectConfig) GetIcon() *Image {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (m *MemberMessage_EffectConfig) GetAvatarPos() int64 {
	if m != nil {
		return m.AvatarPos
	}
	return 0
}

func (m *MemberMessage_EffectConfig) GetText() *Text {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *MemberMessage_EffectConfig) GetTextIcon() *Image {
	if m != nil {
		return m.TextIcon
	}
	return nil
}

func (m *MemberMessage_EffectConfig) GetStayTime() int32 {
	if m != nil {
		return m.StayTime
	}
	return 0
}

func (m *MemberMessage_EffectConfig) GetAnimAssetId() int64 {
	if m != nil {
		return m.AnimAssetId
	}
	return 0
}

func (m *MemberMessage_EffectConfig) GetBadge() *Image {
	if m != nil {
		return m.Badge
	}
	return nil
}

func (m *MemberMessage_EffectConfig) GetFlexSettingArray() []int64 {
	if m != nil {
		return m.FlexSettingArray
	}
	return nil
}

func (m *MemberMessage_EffectConfig) GetTextIconOverlay() *Image {
	if m != nil {
		return m.TextIconOverlay
	}
	return nil
}

func (m *MemberMessage_EffectConfig) GetAnimatedBadge() *Image {
	if m != nil {
		return m.AnimatedBadge
	}
	return nil
}

func (m *MemberMessage_EffectConfig) GetHasSweepLight() bool {
	if m != nil {
		return m.HasSweepLight
	}
	return false
}

func (m *MemberMessage_EffectConfig) GetTextFlexSettingArray() []int64 {
	if m != nil {
		return m.TextFlexSettingArray
	}
	return nil
}

func (m *MemberMessage_EffectConfig) GetCenterAnimAssetId() int64 {
	if m != nil {
		return m.CenterAnimAssetId
	}
	return 0
}

type ControlMessage struct {
	Common               *Common  `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlMessage) Reset()         { *m = ControlMessage{} }
func (m *ControlMessage) String() string { return proto.CompactTextString(m) }
func (*ControlMessage) ProtoMessage()    {}
func (*ControlMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{8}
}
func (m *ControlMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage.Merge(m, src)
}
func (m *ControlMessage) XXX_Size() int {
	return m.Size()
}
func (m *ControlMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage proto.InternalMessageInfo

func (m *ControlMessage) GetCommon() *Common {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *ControlMessage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type FansclubMessage struct {
	CommonInfo *Common `protobuf:"bytes,1,opt,name=commonInfo,proto3" json:"commonInfo,omitempty"`
	// 升级是1，加入是2
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	User                 *User    `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FansclubMessage) Reset()         { *m = FansclubMessage{} }
func (m *FansclubMessage) String() string { return proto.CompactTextString(m) }
func (*FansclubMessage) ProtoMessage()    {}
func (*FansclubMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{9}
}
func (m *FansclubMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FansclubMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FansclubMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FansclubMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FansclubMessage.Merge(m, src)
}
func (m *FansclubMessage) XXX_Size() int {
	return m.Size()
}
func (m *FansclubMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FansclubMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FansclubMessage proto.InternalMessageInfo

func (m *FansclubMessage) GetCommonInfo() *Common {
	if m != nil {
		return m.CommonInfo
	}
	return nil
}

func (m *FansclubMessage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *FansclubMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *FansclubMessage) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type Common struct {
	Method               string   `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	MsgId                int64    `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`
	RoomId               int64    `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
	CreateTime           int64    `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Monitor              int32    `protobuf:"varint,5,opt,name=monitor,proto3" json:"monitor,omitempty"`
	IsShowMsg            bool     `protobuf:"varint,6,opt,name=isShowMsg,proto3" json:"isShowMsg,omitempty"`
	Describe             string   `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
	DisplayText          *Text    `protobuf:"bytes,8,opt,name=displayText,proto3" json:"displayText,omitempty"`
	FoldType             int64    `protobuf:"varint,9,opt,name=foldType,proto3" json:"foldType,omitempty"`
	AnchorFoldType       int64    `protobuf:"varint,10,opt,name=anchorFoldType,proto3" json:"anchorFoldType,omitempty"`
	PriorityScore        int64    `protobuf:"varint,11,opt,name=priorityScore,proto3" json:"priorityScore,omitempty"`
	LogId                string   `protobuf:"bytes,12,opt,name=logId,proto3" json:"logId,omitempty"`
	MsgProcessFilterK    string   `protobuf:"bytes,13,opt,name=msgProcessFilterK,proto3" json:"msgProcessFilterK,omitempty"`
	MsgProcessFilterV    string   `protobuf:"bytes,14,opt,name=msgProcessFilterV,proto3" json:"msgProcessFilterV,omitempty"`
	User                 *User    `protobuf:"bytes,15,opt,name=user,proto3" json:"user,omitempty"`
	Room                 *Room    `protobuf:"bytes,16,opt,name=room,proto3" json:"room,omitempty"`
	AnchorFoldTypeV2     int64    `protobuf:"varint,17,opt,name=anchorFoldTypeV2,proto3" json:"anchorFoldTypeV2,omitempty"`
	ProcessAtSeiTimeMs   int64    `protobuf:"varint,18,opt,name=processAtSeiTimeMs,proto3" json:"processAtSeiTimeMs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Common) Reset()         { *m = Common{} }
func (m *Common) String() string { return proto.CompactTextString(m) }
func (*Common) ProtoMessage()    {}
func (*Common) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{10}
}
func (m *Common) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Common) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Common.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Common) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Common.Merge(m, src)
}
func (m *Common) XXX_Size() int {
	return m.Size()
}
func (m *Common) XXX_DiscardUnknown() {
	xxx_messageInfo_Common.DiscardUnknown(m)
}

var xxx_messageInfo_Common proto.InternalMessageInfo

func (m *Common) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Common) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *Common) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *Common) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Common) GetMonitor() int32 {
	if m != nil {
		return m.Monitor
	}
	return 0
}

func (m *Common) GetIsShowMsg() bool {
	if m != nil {
		return m.IsShowMsg
	}
	return false
}

func (m *Common) GetDescribe() string {
	if m != nil {
		return m.Describe
	}
	return ""
}

func (m *Common) GetDisplayText() *Text {
	if m != nil {
		return m.DisplayText
	}
	return nil
}

func (m *Common) GetFoldType() int64 {
	if m != nil {
		return m.FoldType
	}
	return 0
}

func (m *Common) GetAnchorFoldType() int64 {
	if m != nil {
		return m.AnchorFoldType
	}
	return 0
}

func (m *Common) GetPriorityScore() int64 {
	if m != nil {
		return m.PriorityScore
	}
	return 0
}

func (m *Common) GetLogId() string {
	if m != nil {
		return m.LogId
	}
	return ""
}

func (m *Common) GetMsgProcessFilterK() string {
	if m != nil {
		return m.MsgProcessFilterK
	}
	return ""
}

func (m *Common) GetMsgProcessFilterV() string {
	if m != nil {
		return m.MsgProcessFilterV
	}
	return ""
}

func (m *Common) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Common) GetRoom() *Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (m *Common) GetAnchorFoldTypeV2() int64 {
	if m != nil {
		return m.AnchorFoldTypeV2
	}
	return 0
}

func (m *Common) GetProcessAtSeiTimeMs() int64 {
	if m != nil {
		return m.ProcessAtSeiTimeMs
	}
	return 0
}

type Text struct {
	Key                  string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DefaultPattern       string       `protobuf:"bytes,2,opt,name=defaultPattern,proto3" json:"defaultPattern,omitempty"`
	DefaultFormat        *TextFormat  `protobuf:"bytes,3,opt,name=defaultFormat,proto3" json:"defaultFormat,omitempty"`
	Pieces               []*TextPiece `protobuf:"bytes,4,rep,name=pieces,proto3" json:"pieces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Text) Reset()         { *m = Text{} }
func (m *Text) String() string { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()    {}
func (*Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{11}
}
func (m *Text) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Text.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Text.Merge(m, src)
}
func (m *Text) XXX_Size() int {
	return m.Size()
}
func (m *Text) XXX_DiscardUnknown() {
	xxx_messageInfo_Text.DiscardUnknown(m)
}

var xxx_messageInfo_Text proto.InternalMessageInfo

func (m *Text) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Text) GetDefaultPattern() string {
	if m != nil {
		return m.DefaultPattern
	}
	return ""
}

func (m *Text) GetDefaultFormat() *TextFormat {
	if m != nil {
		return m.DefaultFormat
	}
	return nil
}

func (m *Text) GetPieces() []*TextPiece {
	if m != nil {
		return m.Pieces
	}
	return nil
}

type Room struct {
	Id                    int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IdStr                 string           `protobuf:"bytes,2,opt,name=idStr,proto3" json:"idStr,omitempty"`
	Status                int64            `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	OwnerUserId           int64            `protobuf:"varint,4,opt,name=ownerUserId,proto3" json:"ownerUserId,omitempty"`
	Title                 string           `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	UserCount             int64            `protobuf:"varint,6,opt,name=userCount,proto3" json:"userCount,omitempty"`
	CreateTime            int64            `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	LinkmicLayout         int64            `protobuf:"varint,8,opt,name=linkmicLayout,proto3" json:"linkmicLayout,omitempty"`
	FinishTime            int64            `protobuf:"varint,9,opt,name=finishTime,proto3" json:"finishTime,omitempty"`
	Extra                 *RoomExtra       `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`
	DynamicCoverUri       string           `protobuf:"bytes,11,opt,name=dynamicCoverUri,proto3" json:"dynamicCoverUri,omitempty"`
	DynamicCoverDict      map[int64]string `protobuf:"bytes,12,rep,name=dynamicCoverDict,proto3" json:"dynamicCoverDict,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastPingTime          int64            `protobuf:"varint,13,opt,name=lastPingTime,proto3" json:"lastPingTime,omitempty"`
	LiveId                int64            `protobuf:"varint,14,opt,name=liveId,proto3" json:"liveId,omitempty"`
	StreamProvider        int64            `protobuf:"varint,15,opt,name=streamProvider,proto3" json:"streamProvider,omitempty"`
	OsType                int64            `protobuf:"varint,16,opt,name=osType,proto3" json:"osType,omitempty"`
	ClientVersion         int64            `protobuf:"varint,17,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	WithLinkmic           bool             `protobuf:"varint,18,opt,name=withLinkmic,proto3" json:"withLinkmic,omitempty"`
	EnableRoomPerspective bool             `protobuf:"varint,19,opt,name=enableRoomPerspective,proto3" json:"enableRoomPerspective,omitempty"`
	Cover                 *Image           `protobuf:"bytes,20,opt,name=cover,proto3" json:"cover,omitempty"`
	DynamicCover          *Image           `protobuf:"bytes,21,opt,name=dynamicCover,proto3" json:"dynamicCover,omitempty"`
	DynamicCoverLow       *Image           `protobuf:"bytes,22,opt,name=dynamicCoverLow,proto3" json:"dynamicCoverLow,omitempty"`
	ShareUrl              string           `protobuf:"bytes,23,opt,name=shareUrl,proto3" json:"shareUrl,omitempty"`
	AnchorShareText       string           `protobuf:"bytes,24,opt,name=anchorShareText,proto3" json:"anchorShareText,omitempty"`
	UserShareText         string           `protobuf:"bytes,25,opt,name=userShareText,proto3" json:"userShareText,omitempty"`
	StreamId              int64            `protobuf:"varint,26,opt,name=streamId,proto3" json:"streamId,omitempty"`
	StreamIdStr           string           `protobuf:"bytes,27,opt,name=streamIdStr,proto3" json:"streamIdStr,omitempty"`
	StreamUrl             *StreamUrl       `protobuf:"bytes,28,opt,name=streamUrl,proto3" json:"streamUrl,omitempty"`
	MosaicStatus          int64            `protobuf:"varint,29,opt,name=mosaicStatus,proto3" json:"mosaicStatus,omitempty"`
	MosaicTip             string           `protobuf:"bytes,30,opt,name=mosaicTip,proto3" json:"mosaicTip,omitempty"`
	CellStyle             int64            `protobuf:"varint,31,opt,name=cellStyle,proto3" json:"cellStyle,omitempty"`
	LinkMic               *LinkMic         `protobuf:"bytes,32,opt,name=linkMic,proto3" json:"linkMic,omitempty"`
	LuckymoneyNum         int64            `protobuf:"varint,33,opt,name=luckymoneyNum,proto3" json:"luckymoneyNum,omitempty"`
	DecoList              []*Decoration    `protobuf:"bytes,34,rep,name=decoList,proto3" json:"decoList,omitempty"`
	TopFans               []*TopFan        `protobuf:"bytes,35,rep,name=topFans,proto3" json:"topFans,omitempty"`
	Stats                 *RoomStats       `protobuf:"bytes,36,opt,name=stats,proto3" json:"stats,omitempty"`
	SunDailyIconContent   string           `protobuf:"bytes,37,opt,name=sunDailyIconContent,proto3" json:"sunDailyIconContent,omitempty"`
	Distance              string           `protobuf:"bytes,38,opt,name=distance,proto3" json:"distance,omitempty"`
	DistanceCity          string           `protobuf:"bytes,39,opt,name=distanceCity,proto3" json:"distanceCity,omitempty"`
	Location              string           `protobuf:"bytes,40,opt,name=location,proto3" json:"location,omitempty"`
	RealDistance          string           `protobuf:"bytes,41,opt,name=realDistance,proto3" json:"realDistance,omitempty"`
	FeedRoomLabel         *Image           `protobuf:"bytes,42,opt,name=feedRoomLabel,proto3" json:"feedRoomLabel,omitempty"`
	CommonLabelList       string           `protobuf:"bytes,43,opt,name=commonLabelList,proto3" json:"commonLabelList,omitempty"`
	LivingRoomAttrs       *RoomUserAttr    `protobuf:"bytes,44,opt,name=livingRoomAttrs,proto3" json:"livingRoomAttrs,omitempty"`
	AdminUserIds          []int64          `protobuf:"varint,45,rep,packed,name=adminUserIds,proto3" json:"adminUserIds,omitempty"`
	Owner                 *User            `protobuf:"bytes,46,opt,name=owner,proto3" json:"owner,omitempty"`
	PrivateInfo           string           `protobuf:"bytes,47,opt,name=privateInfo,proto3" json:"privateInfo,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *Room) Reset()         { *m = Room{} }
func (m *Room) String() string { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()    {}
func (*Room) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{12}
}
func (m *Room) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Room) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Room.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Room) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Room.Merge(m, src)
}
func (m *Room) XXX_Size() int {
	return m.Size()
}
func (m *Room) XXX_DiscardUnknown() {
	xxx_messageInfo_Room.DiscardUnknown(m)
}

var xxx_messageInfo_Room proto.InternalMessageInfo

func (m *Room) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Room) GetIdStr() string {
	if m != nil {
		return m.IdStr
	}
	return ""
}

func (m *Room) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Room) GetOwnerUserId() int64 {
	if m != nil {
		return m.OwnerUserId
	}
	return 0
}

func (m *Room) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Room) GetUserCount() int64 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func (m *Room) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Room) GetLinkmicLayout() int64 {
	if m != nil {
		return m.LinkmicLayout
	}
	return 0
}

func (m *Room) GetFinishTime() int64 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *Room) GetExtra() *RoomExtra {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *Room) GetDynamicCoverUri() string {
	if m != nil {
		return m.DynamicCoverUri
	}
	return ""
}

func (m *Room) GetDynamicCoverDict() map[int64]string {
	if m != nil {
		return m.DynamicCoverDict
	}
	return nil
}

func (m *Room) GetLastPingTime() int64 {
	if m != nil {
		return m.LastPingTime
	}
	return 0
}

func (m *Room) GetLiveId() int64 {
	if m != nil {
		return m.LiveId
	}
	return 0
}

func (m *Room) GetStreamProvider() int64 {
	if m != nil {
		return m.StreamProvider
	}
	return 0
}

func (m *Room) GetOsType() int64 {
	if m != nil {
		return m.OsType
	}
	return 0
}

func (m *Room) GetClientVersion() int64 {
	if m != nil {
		return m.ClientVersion
	}
	return 0
}

func (m *Room) GetWithLinkmic() bool {
	if m != nil {
		return m.WithLinkmic
	}
	return false
}

func (m *Room) GetEnableRoomPerspective() bool {
	if m != nil {
		return m.EnableRoomPerspective
	}
	return false
}

func (m *Room) GetCover() *Image {
	if m != nil {
		return m.Cover
	}
	return nil
}

func (m *Room) GetDynamicCover() *Image {
	if m != nil {
		return m.DynamicCover
	}
	return nil
}

func (m *Room) GetDynamicCoverLow() *Image {
	if m != nil {
		return m.DynamicCoverLow
	}
	return nil
}

func (m *Room) GetShareUrl() string {
	if m != nil {
		return m.ShareUrl
	}
	return ""
}

func (m *Room) GetAnchorShareText() string {
	if m != nil {
		return m.AnchorShareText
	}
	return ""
}

func (m *Room) GetUserShareText() string {
	if m != nil {
		return m.UserShareText
	}
	return ""
}

func (m *Room) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *Room) GetStreamIdStr() string {
	if m != nil {
		return m.StreamIdStr
	}
	return ""
}

func (m *Room) GetStreamUrl() *StreamUrl {
	if m != nil {
		return m.StreamUrl
	}
	return nil
}

func (m *Room) GetMosaicStatus() int64 {
	if m != nil {
		return m.MosaicStatus
	}
	return 0
}

func (m *Room) GetMosaicTip() string {
	if m != nil {
		return m.MosaicTip
	}
	return ""
}

func (m *Room) GetCellStyle() int64 {
	if m != nil {
		return m.CellStyle
	}
	return 0
}

func (m *Room) GetLinkMic() *LinkMic {
	if m != nil {
		return m.LinkMic
	}
	return nil
}

func (m *Room) GetLuckymoneyNum() int64 {
	if m != nil {
		return m.LuckymoneyNum
	}
	return 0
}

func (m *Room) GetDecoList() []*Decoration {
	if m != nil {
		return m.DecoList
	}
	return nil
}

func (m *Room) GetTopFans() []*TopFan {
	if m != nil {
		return m.TopFans
	}
	return nil
}

func (m *Room) GetStats() *RoomStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Room) GetSunDailyIconContent() string {
	if m != nil {
		return m.SunDailyIconContent
	}
	return ""
}

func (m *Room) GetDistance() string {
	if m != nil {
		return m.Distance
	}
	return ""
}

func (m *Room) GetDistanceCity() string {
	if m != nil {
		return m.DistanceCity
	}
	return ""
}

func (m *Room) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Room) GetRealDistance() string {
	if m != nil {
		return m.RealDistance
	}
	return ""
}

func (m *Room) GetFeedRoomLabel() *Image {
	if m != nil {
		return m.FeedRoomLabel
	}
	return nil
}

func (m *Room) GetCommonLabelList() string {
	if m != nil {
		return m.CommonLabelList
	}
	return ""
}

func (m *Room) GetLivingRoomAttrs() *RoomUserAttr {
	if m != nil {
		return m.LivingRoomAttrs
	}
	return nil
}

func (m *Room) GetAdminUserIds() []int64 {
	if m != nil {
		return m.AdminUserIds
	}
	return nil
}

func (m *Room) GetOwner() *User {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Room) GetPrivateInfo() string {
	if m != nil {
		return m.PrivateInfo
	}
	return ""
}

type RoomExtra struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomExtra) Reset()         { *m = RoomExtra{} }
func (m *RoomExtra) String() string { return proto.CompactTextString(m) }
func (*RoomExtra) ProtoMessage()    {}
func (*RoomExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{13}
}
func (m *RoomExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomExtra.Merge(m, src)
}
func (m *RoomExtra) XXX_Size() int {
	return m.Size()
}
func (m *RoomExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomExtra.DiscardUnknown(m)
}

var xxx_messageInfo_RoomExtra proto.InternalMessageInfo

type RoomStats struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomStats) Reset()         { *m = RoomStats{} }
func (m *RoomStats) String() string { return proto.CompactTextString(m) }
func (*RoomStats) ProtoMessage()    {}
func (*RoomStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{14}
}
func (m *RoomStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomStats.Merge(m, src)
}
func (m *RoomStats) XXX_Size() int {
	return m.Size()
}
func (m *RoomStats) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomStats.DiscardUnknown(m)
}

var xxx_messageInfo_RoomStats proto.InternalMessageInfo

type RoomUserAttr struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomUserAttr) Reset()         { *m = RoomUserAttr{} }
func (m *RoomUserAttr) String() string { return proto.CompactTextString(m) }
func (*RoomUserAttr) ProtoMessage()    {}
func (*RoomUserAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{15}
}
func (m *RoomUserAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomUserAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomUserAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomUserAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomUserAttr.Merge(m, src)
}
func (m *RoomUserAttr) XXX_Size() int {
	return m.Size()
}
func (m *RoomUserAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomUserAttr.DiscardUnknown(m)
}

var xxx_messageInfo_RoomUserAttr proto.InternalMessageInfo

type StreamUrl struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamUrl) Reset()         { *m = StreamUrl{} }
func (m *StreamUrl) String() string { return proto.CompactTextString(m) }
func (*StreamUrl) ProtoMessage()    {}
func (*StreamUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{16}
}
func (m *StreamUrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamUrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamUrl.Merge(m, src)
}
func (m *StreamUrl) XXX_Size() int {
	return m.Size()
}
func (m *StreamUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamUrl.DiscardUnknown(m)
}

var xxx_messageInfo_StreamUrl proto.InternalMessageInfo

type LinkMic struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LinkMic) Reset()         { *m = LinkMic{} }
func (m *LinkMic) String() string { return proto.CompactTextString(m) }
func (*LinkMic) ProtoMessage()    {}
func (*LinkMic) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{17}
}
func (m *LinkMic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkMic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkMic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkMic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkMic.Merge(m, src)
}
func (m *LinkMic) XXX_Size() int {
	return m.Size()
}
func (m *LinkMic) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkMic.DiscardUnknown(m)
}

var xxx_messageInfo_LinkMic proto.InternalMessageInfo

type Decoration struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Decoration) Reset()         { *m = Decoration{} }
func (m *Decoration) String() string { return proto.CompactTextString(m) }
func (*Decoration) ProtoMessage()    {}
func (*Decoration) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{18}
}
func (m *Decoration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Decoration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Decoration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Decoration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decoration.Merge(m, src)
}
func (m *Decoration) XXX_Size() int {
	return m.Size()
}
func (m *Decoration) XXX_DiscardUnknown() {
	xxx_messageInfo_Decoration.DiscardUnknown(m)
}

var xxx_messageInfo_Decoration proto.InternalMessageInfo

type TopFan struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopFan) Reset()         { *m = TopFan{} }
func (m *TopFan) String() string { return proto.CompactTextString(m) }
func (*TopFan) ProtoMessage()    {}
func (*TopFan) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{19}
}
func (m *TopFan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopFan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopFan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopFan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopFan.Merge(m, src)
}
func (m *TopFan) XXX_Size() int {
	return m.Size()
}
func (m *TopFan) XXX_DiscardUnknown() {
	xxx_messageInfo_TopFan.DiscardUnknown(m)
}

var xxx_messageInfo_TopFan proto.InternalMessageInfo

type User struct {
	Id                   int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortId              int64            `protobuf:"varint,2,opt,name=shortId,proto3" json:"shortId,omitempty"`
	Nickname             string           `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Gender               int32            `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Signature            string           `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Level                int32            `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	Birthday             int64            `protobuf:"varint,7,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Telephone            string           `protobuf:"bytes,8,opt,name=telephone,proto3" json:"telephone,omitempty"`
	AvatarThumb          *Image           `protobuf:"bytes,9,opt,name=avatarThumb,proto3" json:"avatarThumb,omitempty"`
	AvatarMedium         *Image           `protobuf:"bytes,10,opt,name=avatarMedium,proto3" json:"avatarMedium,omitempty"`
	AvatarLarge          *Image           `protobuf:"bytes,11,opt,name=avatarLarge,proto3" json:"avatarLarge,omitempty"`
	Verified             bool             `protobuf:"varint,12,opt,name=verified,proto3" json:"verified,omitempty"`
	Experience           int32            `protobuf:"varint,13,opt,name=experience,proto3" json:"experience,omitempty"`
	City                 string           `protobuf:"bytes,14,opt,name=city,proto3" json:"city,omitempty"`
	Status               int32            `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime           int64            `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ModifyTime           int64            `protobuf:"varint,17,opt,name=modifyTime,proto3" json:"modifyTime,omitempty"`
	Secret               int32            `protobuf:"varint,18,opt,name=secret,proto3" json:"secret,omitempty"`
	ShareQrcodeUri       string           `protobuf:"bytes,19,opt,name=shareQrcodeUri,proto3" json:"shareQrcodeUri,omitempty"`
	IncomeSharePercent   int32            `protobuf:"varint,20,opt,name=incomeSharePercent,proto3" json:"incomeSharePercent,omitempty"`
	BadgeImageList       *Image           `protobuf:"bytes,21,opt,name=badgeImageList,proto3" json:"badgeImageList,omitempty"`
	FollowInfo           *User_FollowInfo `protobuf:"bytes,22,opt,name=followInfo,proto3" json:"followInfo,omitempty"`
	PayGrade             *User_PayGrade   `protobuf:"bytes,23,opt,name=payGrade,proto3" json:"payGrade,omitempty"`
	FansClub             *User_FansClub   `protobuf:"bytes,24,opt,name=fansClub,proto3" json:"fansClub,omitempty"`
	Border               *User_Border     `protobuf:"bytes,25,opt,name=border,proto3" json:"border,omitempty"`
	SpecialId            string           `protobuf:"bytes,26,opt,name=specialId,proto3" json:"specialId,omitempty"`
	AvatarBorder         *Image           `protobuf:"bytes,27,opt,name=avatarBorder,proto3" json:"avatarBorder,omitempty"`
	Medal                *Image           `protobuf:"bytes,28,opt,name=medal,proto3" json:"medal,omitempty"`
	RealTimeIcons        []*Image         `protobuf:"bytes,29,rep,name=realTimeIcons,proto3" json:"realTimeIcons,omitempty"`
	NewRealTimeIcons     []*Image         `protobuf:"bytes,30,rep,name=newRealTimeIcons,proto3" json:"newRealTimeIcons,omitempty"`
	TopVipNo             int64            `protobuf:"varint,31,opt,name=topVipNo,proto3" json:"topVipNo,omitempty"`
	UserAttr             *User_UserAttr   `protobuf:"bytes,32,opt,name=userAttr,proto3" json:"userAttr,omitempty"`
	OwnRoom              *User_OwnRoom    `protobuf:"bytes,33,opt,name=ownRoom,proto3" json:"ownRoom,omitempty"`
	PayScore             int64            `protobuf:"varint,34,opt,name=payScore,proto3" json:"payScore,omitempty"`
	TicketCount          int64            `protobuf:"varint,35,opt,name=ticketCount,proto3" json:"ticketCount,omitempty"`
	AnchorInfo           *User_AnchorInfo `protobuf:"bytes,36,opt,name=anchorInfo,proto3" json:"anchorInfo,omitempty"`
	LinkMicStats         int32            `protobuf:"varint,37,opt,name=linkMicStats,proto3" json:"linkMicStats,omitempty"`
	DisplayId            string           `protobuf:"bytes,38,opt,name=displayId,proto3" json:"displayId,omitempty"`
	SecUid               string           `protobuf:"bytes,46,opt,name=sec_uid,json=secUid,proto3" json:"sec_uid,omitempty"`
	UserRole             int32            `protobuf:"varint,47,opt,name=user_role,json=userRole,proto3" json:"user_role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetShortId() int64 {
	if m != nil {
		return m.ShortId
	}
	return 0
}

func (m *User) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *User) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *User) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *User) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User) GetBirthday() int64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *User) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *User) GetAvatarThumb() *Image {
	if m != nil {
		return m.AvatarThumb
	}
	return nil
}

func (m *User) GetAvatarMedium() *Image {
	if m != nil {
		return m.AvatarMedium
	}
	return nil
}

func (m *User) GetAvatarLarge() *Image {
	if m != nil {
		return m.AvatarLarge
	}
	return nil
}

func (m *User) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *User) GetExperience() int32 {
	if m != nil {
		return m.Experience
	}
	return 0
}

func (m *User) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *User) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *User) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *User) GetModifyTime() int64 {
	if m != nil {
		return m.ModifyTime
	}
	return 0
}

func (m *User) GetSecret() int32 {
	if m != nil {
		return m.Secret
	}
	return 0
}

func (m *User) GetShareQrcodeUri() string {
	if m != nil {
		return m.ShareQrcodeUri
	}
	return ""
}

func (m *User) GetIncomeSharePercent() int32 {
	if m != nil {
		return m.IncomeSharePercent
	}
	return 0
}

func (m *User) GetBadgeImageList() *Image {
	if m != nil {
		return m.BadgeImageList
	}
	return nil
}

func (m *User) GetFollowInfo() *User_FollowInfo {
	if m != nil {
		return m.FollowInfo
	}
	return nil
}

func (m *User) GetPayGrade() *User_PayGrade {
	if m != nil {
		return m.PayGrade
	}
	return nil
}

func (m *User) GetFansClub() *User_FansClub {
	if m != nil {
		return m.FansClub
	}
	return nil
}

func (m *User) GetBorder() *User_Border {
	if m != nil {
		return m.Border
	}
	return nil
}

func (m *User) GetSpecialId() string {
	if m != nil {
		return m.SpecialId
	}
	return ""
}

func (m *User) GetAvatarBorder() *Image {
	if m != nil {
		return m.AvatarBorder
	}
	return nil
}

func (m *User) GetMedal() *Image {
	if m != nil {
		return m.Medal
	}
	return nil
}

func (m *User) GetRealTimeIcons() []*Image {
	if m != nil {
		return m.RealTimeIcons
	}
	return nil
}

func (m *User) GetNewRealTimeIcons() []*Image {
	if m != nil {
		return m.NewRealTimeIcons
	}
	return nil
}

func (m *User) GetTopVipNo() int64 {
	if m != nil {
		return m.TopVipNo
	}
	return 0
}

func (m *User) GetUserAttr() *User_UserAttr {
	if m != nil {
		return m.UserAttr
	}
	return nil
}

func (m *User) GetOwnRoom() *User_OwnRoom {
	if m != nil {
		return m.OwnRoom
	}
	return nil
}

func (m *User) GetPayScore() int64 {
	if m != nil {
		return m.PayScore
	}
	return 0
}

func (m *User) GetTicketCount() int64 {
	if m != nil {
		return m.TicketCount
	}
	return 0
}

func (m *User) GetAnchorInfo() *User_AnchorInfo {
	if m != nil {
		return m.AnchorInfo
	}
	return nil
}

func (m *User) GetLinkMicStats() int32 {
	if m != nil {
		return m.LinkMicStats
	}
	return 0
}

func (m *User) GetDisplayId() string {
	if m != nil {
		return m.DisplayId
	}
	return ""
}

func (m *User) GetSecUid() string {
	if m != nil {
		return m.SecUid
	}
	return ""
}

func (m *User) GetUserRole() int32 {
	if m != nil {
		return m.UserRole
	}
	return 0
}

type User_UserAttr struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User_UserAttr) Reset()         { *m = User_UserAttr{} }
func (m *User_UserAttr) String() string { return proto.CompactTextString(m) }
func (*User_UserAttr) ProtoMessage()    {}
func (*User_UserAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20, 0}
}
func (m *User_UserAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UserAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UserAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UserAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UserAttr.Merge(m, src)
}
func (m *User_UserAttr) XXX_Size() int {
	return m.Size()
}
func (m *User_UserAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UserAttr.DiscardUnknown(m)
}

var xxx_messageInfo_User_UserAttr proto.InternalMessageInfo

type User_OwnRoom struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User_OwnRoom) Reset()         { *m = User_OwnRoom{} }
func (m *User_OwnRoom) String() string { return proto.CompactTextString(m) }
func (*User_OwnRoom) ProtoMessage()    {}
func (*User_OwnRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20, 1}
}
func (m *User_OwnRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_OwnRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_OwnRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_OwnRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_OwnRoom.Merge(m, src)
}
func (m *User_OwnRoom) XXX_Size() int {
	return m.Size()
}
func (m *User_OwnRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_User_OwnRoom.DiscardUnknown(m)
}

var xxx_messageInfo_User_OwnRoom proto.InternalMessageInfo

type User_AnchorInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User_AnchorInfo) Reset()         { *m = User_AnchorInfo{} }
func (m *User_AnchorInfo) String() string { return proto.CompactTextString(m) }
func (*User_AnchorInfo) ProtoMessage()    {}
func (*User_AnchorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20, 2}
}
func (m *User_AnchorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AnchorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AnchorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AnchorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AnchorInfo.Merge(m, src)
}
func (m *User_AnchorInfo) XXX_Size() int {
	return m.Size()
}
func (m *User_AnchorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AnchorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_User_AnchorInfo proto.InternalMessageInfo

type User_FollowInfo struct {
	FollowingCount       int64    `protobuf:"varint,1,opt,name=followingCount,proto3" json:"followingCount,omitempty"`
	FollowerCount        int64    `protobuf:"varint,2,opt,name=followerCount,proto3" json:"followerCount,omitempty"`
	FollowStatus         int64    `protobuf:"varint,3,opt,name=followStatus,proto3" json:"followStatus,omitempty"`
	PushStatus           int64    `protobuf:"varint,4,opt,name=pushStatus,proto3" json:"pushStatus,omitempty"`
	RemarkName           string   `protobuf:"bytes,5,opt,name=remarkName,proto3" json:"remarkName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User_FollowInfo) Reset()         { *m = User_FollowInfo{} }
func (m *User_FollowInfo) String() string { return proto.CompactTextString(m) }
func (*User_FollowInfo) ProtoMessage()    {}
func (*User_FollowInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20, 3}
}
func (m *User_FollowInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_FollowInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_FollowInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_FollowInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_FollowInfo.Merge(m, src)
}
func (m *User_FollowInfo) XXX_Size() int {
	return m.Size()
}
func (m *User_FollowInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_User_FollowInfo.DiscardUnknown(m)
}

var xxx_messageInfo_User_FollowInfo proto.InternalMessageInfo

func (m *User_FollowInfo) GetFollowingCount() int64 {
	if m != nil {
		return m.FollowingCount
	}
	return 0
}

func (m *User_FollowInfo) GetFollowerCount() int64 {
	if m != nil {
		return m.FollowerCount
	}
	return 0
}

func (m *User_FollowInfo) GetFollowStatus() int64 {
	if m != nil {
		return m.FollowStatus
	}
	return 0
}

func (m *User_FollowInfo) GetPushStatus() int64 {
	if m != nil {
		return m.PushStatus
	}
	return 0
}

func (m *User_FollowInfo) GetRemarkName() string {
	if m != nil {
		return m.RemarkName
	}
	return ""
}

type User_FansClub struct {
	Data                 *User_FansClub_FansClubData           `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	PreferData           map[int32]*User_FansClub_FansClubData `protobuf:"bytes,2,rep,name=preferData,proto3" json:"preferData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *User_FansClub) Reset()         { *m = User_FansClub{} }
func (m *User_FansClub) String() string { return proto.CompactTextString(m) }
func (*User_FansClub) ProtoMessage()    {}
func (*User_FansClub) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20, 4}
}
func (m *User_FansClub) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_FansClub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_FansClub.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_FansClub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_FansClub.Merge(m, src)
}
func (m *User_FansClub) XXX_Size() int {
	return m.Size()
}
func (m *User_FansClub) XXX_DiscardUnknown() {
	xxx_messageInfo_User_FansClub.DiscardUnknown(m)
}

var xxx_messageInfo_User_FansClub proto.InternalMessageInfo

func (m *User_FansClub) GetData() *User_FansClub_FansClubData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *User_FansClub) GetPreferData() map[int32]*User_FansClub_FansClubData {
	if m != nil {
		return m.PreferData
	}
	return nil
}

type User_FansClub_FansClubData struct {
	ClubName             string                                `protobuf:"bytes,1,opt,name=clubName,proto3" json:"clubName,omitempty"`
	Level                int32                                 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	UserFansClubStatus   int32                                 `protobuf:"varint,3,opt,name=userFansClubStatus,proto3" json:"userFansClubStatus,omitempty"`
	Badge                *User_FansClub_FansClubData_UserBadge `protobuf:"bytes,4,opt,name=badge,proto3" json:"badge,omitempty"`
	AvailableGiftIds     []int64                               `protobuf:"varint,5,rep,packed,name=availableGiftIds,proto3" json:"availableGiftIds,omitempty"`
	AnchorId             int64                                 `protobuf:"varint,6,opt,name=anchorId,proto3" json:"anchorId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *User_FansClub_FansClubData) Reset()         { *m = User_FansClub_FansClubData{} }
func (m *User_FansClub_FansClubData) String() string { return proto.CompactTextString(m) }
func (*User_FansClub_FansClubData) ProtoMessage()    {}
func (*User_FansClub_FansClubData) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20, 4, 1}
}
func (m *User_FansClub_FansClubData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_FansClub_FansClubData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_FansClub_FansClubData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_FansClub_FansClubData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_FansClub_FansClubData.Merge(m, src)
}
func (m *User_FansClub_FansClubData) XXX_Size() int {
	return m.Size()
}
func (m *User_FansClub_FansClubData) XXX_DiscardUnknown() {
	xxx_messageInfo_User_FansClub_FansClubData.DiscardUnknown(m)
}

var xxx_messageInfo_User_FansClub_FansClubData proto.InternalMessageInfo

func (m *User_FansClub_FansClubData) GetClubName() string {
	if m != nil {
		return m.ClubName
	}
	return ""
}

func (m *User_FansClub_FansClubData) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User_FansClub_FansClubData) GetUserFansClubStatus() int32 {
	if m != nil {
		return m.UserFansClubStatus
	}
	return 0
}

func (m *User_FansClub_FansClubData) GetBadge() *User_FansClub_FansClubData_UserBadge {
	if m != nil {
		return m.Badge
	}
	return nil
}

func (m *User_FansClub_FansClubData) GetAvailableGiftIds() []int64 {
	if m != nil {
		return m.AvailableGiftIds
	}
	return nil
}

func (m *User_FansClub_FansClubData) GetAnchorId() int64 {
	if m != nil {
		return m.AnchorId
	}
	return 0
}

type User_FansClub_FansClubData_UserBadge struct {
	Icons                map[int32]*Image `protobuf:"bytes,1,rep,name=icons,proto3" json:"icons,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Title                string           `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *User_FansClub_FansClubData_UserBadge) Reset()         { *m = User_FansClub_FansClubData_UserBadge{} }
func (m *User_FansClub_FansClubData_UserBadge) String() string { return proto.CompactTextString(m) }
func (*User_FansClub_FansClubData_UserBadge) ProtoMessage()    {}
func (*User_FansClub_FansClubData_UserBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20, 4, 1, 0}
}
func (m *User_FansClub_FansClubData_UserBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_FansClub_FansClubData_UserBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_FansClub_FansClubData_UserBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_FansClub_FansClubData_UserBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_FansClub_FansClubData_UserBadge.Merge(m, src)
}
func (m *User_FansClub_FansClubData_UserBadge) XXX_Size() int {
	return m.Size()
}
func (m *User_FansClub_FansClubData_UserBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_User_FansClub_FansClubData_UserBadge.DiscardUnknown(m)
}

var xxx_messageInfo_User_FansClub_FansClubData_UserBadge proto.InternalMessageInfo

func (m *User_FansClub_FansClubData_UserBadge) GetIcons() map[int32]*Image {
	if m != nil {
		return m.Icons
	}
	return nil
}

func (m *User_FansClub_FansClubData_UserBadge) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type User_Border struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User_Border) Reset()         { *m = User_Border{} }
func (m *User_Border) String() string { return proto.CompactTextString(m) }
func (*User_Border) ProtoMessage()    {}
func (*User_Border) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20, 5}
}
func (m *User_Border) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_Border) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_Border.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_Border) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_Border.Merge(m, src)
}
func (m *User_Border) XXX_Size() int {
	return m.Size()
}
func (m *User_Border) XXX_DiscardUnknown() {
	xxx_messageInfo_User_Border.DiscardUnknown(m)
}

var xxx_messageInfo_User_Border proto.InternalMessageInfo

type User_GradeBuffInfo struct {
	BuffLevel            int64           `protobuf:"varint,1,opt,name=buffLevel,proto3" json:"buffLevel,omitempty"`
	Status               int32           `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	EndTime              int64           `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	StatsInfo            map[int64]int64 `protobuf:"bytes,4,rep,name=statsInfo,proto3" json:"statsInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BuffBadge            *Image          `protobuf:"bytes,5,opt,name=buffBadge,proto3" json:"buffBadge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *User_GradeBuffInfo) Reset()         { *m = User_GradeBuffInfo{} }
func (m *User_GradeBuffInfo) String() string { return proto.CompactTextString(m) }
func (*User_GradeBuffInfo) ProtoMessage()    {}
func (*User_GradeBuffInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20, 6}
}
func (m *User_GradeBuffInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GradeBuffInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GradeBuffInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GradeBuffInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GradeBuffInfo.Merge(m, src)
}
func (m *User_GradeBuffInfo) XXX_Size() int {
	return m.Size()
}
func (m *User_GradeBuffInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GradeBuffInfo.DiscardUnknown(m)
}

var xxx_messageInfo_User_GradeBuffInfo proto.InternalMessageInfo

func (m *User_GradeBuffInfo) GetBuffLevel() int64 {
	if m != nil {
		return m.BuffLevel
	}
	return 0
}

func (m *User_GradeBuffInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *User_GradeBuffInfo) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *User_GradeBuffInfo) GetStatsInfo() map[int64]int64 {
	if m != nil {
		return m.StatsInfo
	}
	return nil
}

func (m *User_GradeBuffInfo) GetBuffBadge() *Image {
	if m != nil {
		return m.BuffBadge
	}
	return nil
}

type User_PayGrade struct {
	TotalDiamondCount    int64                      `protobuf:"varint,1,opt,name=totalDiamondCount,proto3" json:"totalDiamondCount,omitempty"`
	DiamondIcon          *Image                     `protobuf:"bytes,2,opt,name=diamondIcon,proto3" json:"diamondIcon,omitempty"`
	Name                 string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon                 *Image                     `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	NextName             string                     `protobuf:"bytes,5,opt,name=nextName,proto3" json:"nextName,omitempty"`
	Level                int64                      `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	NextIcon             *Image                     `protobuf:"bytes,7,opt,name=nextIcon,proto3" json:"nextIcon,omitempty"`
	NextDiamond          int64                      `protobuf:"varint,8,opt,name=nextDiamond,proto3" json:"nextDiamond,omitempty"`
	NowDiamond           int64                      `protobuf:"varint,9,opt,name=nowDiamond,proto3" json:"nowDiamond,omitempty"`
	ThisGradeMinDiamond  int64                      `protobuf:"varint,10,opt,name=thisGradeMinDiamond,proto3" json:"thisGradeMinDiamond,omitempty"`
	ThisGradeMaxDiamond  int64                      `protobuf:"varint,11,opt,name=thisGradeMaxDiamond,proto3" json:"thisGradeMaxDiamond,omitempty"`
	PayDiamondBak        int64                      `protobuf:"varint,12,opt,name=payDiamondBak,proto3" json:"payDiamondBak,omitempty"`
	GradeDescribe        string                     `protobuf:"bytes,13,opt,name=gradeDescribe,proto3" json:"gradeDescribe,omitempty"`
	GradeIconList        []*User_PayGrade_GradeIcon `protobuf:"bytes,14,rep,name=gradeIconList,proto3" json:"gradeIconList,omitempty"`
	ScreenChatType       int64                      `protobuf:"varint,15,opt,name=screenChatType,proto3" json:"screenChatType,omitempty"`
	ImIcon               *Image                     `protobuf:"bytes,16,opt,name=imIcon,proto3" json:"imIcon,omitempty"`
	ImIconWithLevel      *Image                     `protobuf:"bytes,17,opt,name=imIconWithLevel,proto3" json:"imIconWithLevel,omitempty"`
	LiveIcon             *Image                     `protobuf:"bytes,18,opt,name=liveIcon,proto3" json:"liveIcon,omitempty"`
	NewImIconWithLevel   *Image                     `protobuf:"bytes,19,opt,name=newImIconWithLevel,proto3" json:"newImIconWithLevel,omitempty"`
	NewLiveIcon          *Image                     `protobuf:"bytes,20,opt,name=newLiveIcon,proto3" json:"newLiveIcon,omitempty"`
	UpgradeNeedConsume   int64                      `protobuf:"varint,21,opt,name=upgradeNeedConsume,proto3" json:"upgradeNeedConsume,omitempty"`
	NextPrivileges       string                     `protobuf:"bytes,22,opt,name=nextPrivileges,proto3" json:"nextPrivileges,omitempty"`
	Background           *Image                     `protobuf:"bytes,23,opt,name=background,proto3" json:"background,omitempty"`
	BackgroundBack       *Image                     `protobuf:"bytes,24,opt,name=backgroundBack,proto3" json:"backgroundBack,omitempty"`
	Score                int64                      `protobuf:"varint,25,opt,name=score,proto3" json:"score,omitempty"`
	BuffInfo             *User_GradeBuffInfo        `protobuf:"bytes,26,opt,name=buffInfo,proto3" json:"buffInfo,omitempty"`
	GradeBanner          string                     `protobuf:"bytes,1001,opt,name=gradeBanner,proto3" json:"gradeBanner,omitempty"`
	ProfileDialogBg      *Image                     `protobuf:"bytes,1002,opt,name=profileDialogBg,proto3" json:"profileDialogBg,omitempty"`
	ProfileDialogBgBack  *Image                     `protobuf:"bytes,1003,opt,name=profileDialogBgBack,proto3" json:"profileDialogBgBack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *User_PayGrade) Reset()         { *m = User_PayGrade{} }
func (m *User_PayGrade) String() string { return proto.CompactTextString(m) }
func (*User_PayGrade) ProtoMessage()    {}
func (*User_PayGrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20, 7}
}
func (m *User_PayGrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_PayGrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_PayGrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_PayGrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_PayGrade.Merge(m, src)
}
func (m *User_PayGrade) XXX_Size() int {
	return m.Size()
}
func (m *User_PayGrade) XXX_DiscardUnknown() {
	xxx_messageInfo_User_PayGrade.DiscardUnknown(m)
}

var xxx_messageInfo_User_PayGrade proto.InternalMessageInfo

func (m *User_PayGrade) GetTotalDiamondCount() int64 {
	if m != nil {
		return m.TotalDiamondCount
	}
	return 0
}

func (m *User_PayGrade) GetDiamondIcon() *Image {
	if m != nil {
		return m.DiamondIcon
	}
	return nil
}

func (m *User_PayGrade) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User_PayGrade) GetIcon() *Image {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (m *User_PayGrade) GetNextName() string {
	if m != nil {
		return m.NextName
	}
	return ""
}

func (m *User_PayGrade) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User_PayGrade) GetNextIcon() *Image {
	if m != nil {
		return m.NextIcon
	}
	return nil
}

func (m *User_PayGrade) GetNextDiamond() int64 {
	if m != nil {
		return m.NextDiamond
	}
	return 0
}

func (m *User_PayGrade) GetNowDiamond() int64 {
	if m != nil {
		return m.NowDiamond
	}
	return 0
}

func (m *User_PayGrade) GetThisGradeMinDiamond() int64 {
	if m != nil {
		return m.ThisGradeMinDiamond
	}
	return 0
}

func (m *User_PayGrade) GetThisGradeMaxDiamond() int64 {
	if m != nil {
		return m.ThisGradeMaxDiamond
	}
	return 0
}

func (m *User_PayGrade) GetPayDiamondBak() int64 {
	if m != nil {
		return m.PayDiamondBak
	}
	return 0
}

func (m *User_PayGrade) GetGradeDescribe() string {
	if m != nil {
		return m.GradeDescribe
	}
	return ""
}

func (m *User_PayGrade) GetGradeIconList() []*User_PayGrade_GradeIcon {
	if m != nil {
		return m.GradeIconList
	}
	return nil
}

func (m *User_PayGrade) GetScreenChatType() int64 {
	if m != nil {
		return m.ScreenChatType
	}
	return 0
}

func (m *User_PayGrade) GetImIcon() *Image {
	if m != nil {
		return m.ImIcon
	}
	return nil
}

func (m *User_PayGrade) GetImIconWithLevel() *Image {
	if m != nil {
		return m.ImIconWithLevel
	}
	return nil
}

func (m *User_PayGrade) GetLiveIcon() *Image {
	if m != nil {
		return m.LiveIcon
	}
	return nil
}

func (m *User_PayGrade) GetNewImIconWithLevel() *Image {
	if m != nil {
		return m.NewImIconWithLevel
	}
	return nil
}

func (m *User_PayGrade) GetNewLiveIcon() *Image {
	if m != nil {
		return m.NewLiveIcon
	}
	return nil
}

func (m *User_PayGrade) GetUpgradeNeedConsume() int64 {
	if m != nil {
		return m.UpgradeNeedConsume
	}
	return 0
}

func (m *User_PayGrade) GetNextPrivileges() string {
	if m != nil {
		return m.NextPrivileges
	}
	return ""
}

func (m *User_PayGrade) GetBackground() *Image {
	if m != nil {
		return m.Background
	}
	return nil
}

func (m *User_PayGrade) GetBackgroundBack() *Image {
	if m != nil {
		return m.BackgroundBack
	}
	return nil
}

func (m *User_PayGrade) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *User_PayGrade) GetBuffInfo() *User_GradeBuffInfo {
	if m != nil {
		return m.BuffInfo
	}
	return nil
}

func (m *User_PayGrade) GetGradeBanner() string {
	if m != nil {
		return m.GradeBanner
	}
	return ""
}

func (m *User_PayGrade) GetProfileDialogBg() *Image {
	if m != nil {
		return m.ProfileDialogBg
	}
	return nil
}

func (m *User_PayGrade) GetProfileDialogBgBack() *Image {
	if m != nil {
		return m.ProfileDialogBgBack
	}
	return nil
}

type User_PayGrade_GradeIcon struct {
	Icon                 *Image   `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	IconDiamond          int64    `protobuf:"varint,2,opt,name=iconDiamond,proto3" json:"iconDiamond,omitempty"`
	Level                int64    `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	LevelStr             string   `protobuf:"bytes,4,opt,name=levelStr,proto3" json:"levelStr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User_PayGrade_GradeIcon) Reset()         { *m = User_PayGrade_GradeIcon{} }
func (m *User_PayGrade_GradeIcon) String() string { return proto.CompactTextString(m) }
func (*User_PayGrade_GradeIcon) ProtoMessage()    {}
func (*User_PayGrade_GradeIcon) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{20, 7, 0}
}
func (m *User_PayGrade_GradeIcon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_PayGrade_GradeIcon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_PayGrade_GradeIcon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_PayGrade_GradeIcon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_PayGrade_GradeIcon.Merge(m, src)
}
func (m *User_PayGrade_GradeIcon) XXX_Size() int {
	return m.Size()
}
func (m *User_PayGrade_GradeIcon) XXX_DiscardUnknown() {
	xxx_messageInfo_User_PayGrade_GradeIcon.DiscardUnknown(m)
}

var xxx_messageInfo_User_PayGrade_GradeIcon proto.InternalMessageInfo

func (m *User_PayGrade_GradeIcon) GetIcon() *Image {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (m *User_PayGrade_GradeIcon) GetIconDiamond() int64 {
	if m != nil {
		return m.IconDiamond
	}
	return 0
}

func (m *User_PayGrade_GradeIcon) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User_PayGrade_GradeIcon) GetLevelStr() string {
	if m != nil {
		return m.LevelStr
	}
	return ""
}

type TextFormat struct {
	Color                string   `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Bold                 bool     `protobuf:"varint,2,opt,name=bold,proto3" json:"bold,omitempty"`
	Italic               bool     `protobuf:"varint,3,opt,name=italic,proto3" json:"italic,omitempty"`
	Weight               int32    `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	ItalicAngle          int32    `protobuf:"varint,5,opt,name=italicAngle,proto3" json:"italicAngle,omitempty"`
	FontSize             int32    `protobuf:"varint,6,opt,name=fontSize,proto3" json:"fontSize,omitempty"`
	UserHeightLightColor bool     `protobuf:"varint,7,opt,name=userHeightLightColor,proto3" json:"userHeightLightColor,omitempty"`
	UseRemoteClor        bool     `protobuf:"varint,8,opt,name=useRemoteClor,proto3" json:"useRemoteClor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextFormat) Reset()         { *m = TextFormat{} }
func (m *TextFormat) String() string { return proto.CompactTextString(m) }
func (*TextFormat) ProtoMessage()    {}
func (*TextFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{21}
}
func (m *TextFormat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextFormat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextFormat.Merge(m, src)
}
func (m *TextFormat) XXX_Size() int {
	return m.Size()
}
func (m *TextFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_TextFormat.DiscardUnknown(m)
}

var xxx_messageInfo_TextFormat proto.InternalMessageInfo

func (m *TextFormat) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *TextFormat) GetBold() bool {
	if m != nil {
		return m.Bold
	}
	return false
}

func (m *TextFormat) GetItalic() bool {
	if m != nil {
		return m.Italic
	}
	return false
}

func (m *TextFormat) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *TextFormat) GetItalicAngle() int32 {
	if m != nil {
		return m.ItalicAngle
	}
	return 0
}

func (m *TextFormat) GetFontSize() int32 {
	if m != nil {
		return m.FontSize
	}
	return 0
}

func (m *TextFormat) GetUserHeightLightColor() bool {
	if m != nil {
		return m.UserHeightLightColor
	}
	return false
}

func (m *TextFormat) GetUseRemoteClor() bool {
	if m != nil {
		return m.UseRemoteClor
	}
	return false
}

type TextPiece struct {
	Type                 int32          `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Format               *TextFormat    `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	StringValue          string         `protobuf:"bytes,11,opt,name=stringValue,proto3" json:"stringValue,omitempty"`
	UserValue            *TextPieceUser `protobuf:"bytes,21,opt,name=userValue,proto3" json:"userValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TextPiece) Reset()         { *m = TextPiece{} }
func (m *TextPiece) String() string { return proto.CompactTextString(m) }
func (*TextPiece) ProtoMessage()    {}
func (*TextPiece) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{22}
}
func (m *TextPiece) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextPiece) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextPiece.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextPiece) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextPiece.Merge(m, src)
}
func (m *TextPiece) XXX_Size() int {
	return m.Size()
}
func (m *TextPiece) XXX_DiscardUnknown() {
	xxx_messageInfo_TextPiece.DiscardUnknown(m)
}

var xxx_messageInfo_TextPiece proto.InternalMessageInfo

func (m *TextPiece) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TextPiece) GetFormat() *TextFormat {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *TextPiece) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *TextPiece) GetUserValue() *TextPieceUser {
	if m != nil {
		return m.UserValue
	}
	return nil
}

type Image struct {
	UrlList              []string       `protobuf:"bytes,1,rep,name=urlList,proto3" json:"urlList,omitempty"`
	Uri                  string         `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Height               int64          `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Width                int64          `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	AvgColor             string         `protobuf:"bytes,5,opt,name=avgColor,proto3" json:"avgColor,omitempty"`
	ImageType            int32          `protobuf:"varint,6,opt,name=imageType,proto3" json:"imageType,omitempty"`
	OpenWebUrl           string         `protobuf:"bytes,7,opt,name=openWebUrl,proto3" json:"openWebUrl,omitempty"`
	Content              *Image_Content `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	IsAnimated           bool           `protobuf:"varint,9,opt,name=isAnimated,proto3" json:"isAnimated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{23}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return m.Size()
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetUrlList() []string {
	if m != nil {
		return m.UrlList
	}
	return nil
}

func (m *Image) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Image) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Image) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Image) GetAvgColor() string {
	if m != nil {
		return m.AvgColor
	}
	return ""
}

func (m *Image) GetImageType() int32 {
	if m != nil {
		return m.ImageType
	}
	return 0
}

func (m *Image) GetOpenWebUrl() string {
	if m != nil {
		return m.OpenWebUrl
	}
	return ""
}

func (m *Image) GetContent() *Image_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Image) GetIsAnimated() bool {
	if m != nil {
		return m.IsAnimated
	}
	return false
}

type Image_Content struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FontColor            string   `protobuf:"bytes,2,opt,name=fontColor,proto3" json:"fontColor,omitempty"`
	Level                int64    `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	AlternativeText      string   `protobuf:"bytes,4,opt,name=alternativeText,proto3" json:"alternativeText,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image_Content) Reset()         { *m = Image_Content{} }
func (m *Image_Content) String() string { return proto.CompactTextString(m) }
func (*Image_Content) ProtoMessage()    {}
func (*Image_Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{23, 0}
}
func (m *Image_Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Image_Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Image_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Image_Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image_Content.Merge(m, src)
}
func (m *Image_Content) XXX_Size() int {
	return m.Size()
}
func (m *Image_Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Image_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Image_Content proto.InternalMessageInfo

func (m *Image_Content) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Image_Content) GetFontColor() string {
	if m != nil {
		return m.FontColor
	}
	return ""
}

func (m *Image_Content) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Image_Content) GetAlternativeText() string {
	if m != nil {
		return m.AlternativeText
	}
	return ""
}

type TextPieceUser struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	WithColon            bool     `protobuf:"varint,2,opt,name=withColon,proto3" json:"withColon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextPieceUser) Reset()         { *m = TextPieceUser{} }
func (m *TextPieceUser) String() string { return proto.CompactTextString(m) }
func (*TextPieceUser) ProtoMessage()    {}
func (*TextPieceUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{24}
}
func (m *TextPieceUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextPieceUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextPieceUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextPieceUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextPieceUser.Merge(m, src)
}
func (m *TextPieceUser) XXX_Size() int {
	return m.Size()
}
func (m *TextPieceUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TextPieceUser.DiscardUnknown(m)
}

var xxx_messageInfo_TextPieceUser proto.InternalMessageInfo

func (m *TextPieceUser) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TextPieceUser) GetWithColon() bool {
	if m != nil {
		return m.WithColon
	}
	return false
}

type PublicAreaCommon struct {
	UserLabel             *Image   `protobuf:"bytes,1,opt,name=userLabel,proto3" json:"userLabel,omitempty"`
	UserConsumeInRoom     int64    `protobuf:"varint,2,opt,name=userConsumeInRoom,proto3" json:"userConsumeInRoom,omitempty"`
	UserSendGiftCntInRoom int64    `protobuf:"varint,3,opt,name=userSendGiftCntInRoom,proto3" json:"userSendGiftCntInRoom,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PublicAreaCommon) Reset()         { *m = PublicAreaCommon{} }
func (m *PublicAreaCommon) String() string { return proto.CompactTextString(m) }
func (*PublicAreaCommon) ProtoMessage()    {}
func (*PublicAreaCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{25}
}
func (m *PublicAreaCommon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicAreaCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicAreaCommon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicAreaCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicAreaCommon.Merge(m, src)
}
func (m *PublicAreaCommon) XXX_Size() int {
	return m.Size()
}
func (m *PublicAreaCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicAreaCommon.DiscardUnknown(m)
}

var xxx_messageInfo_PublicAreaCommon proto.InternalMessageInfo

func (m *PublicAreaCommon) GetUserLabel() *Image {
	if m != nil {
		return m.UserLabel
	}
	return nil
}

func (m *PublicAreaCommon) GetUserConsumeInRoom() int64 {
	if m != nil {
		return m.UserConsumeInRoom
	}
	return 0
}

func (m *PublicAreaCommon) GetUserSendGiftCntInRoom() int64 {
	if m != nil {
		return m.UserSendGiftCntInRoom
	}
	return 0
}

type GiftIMPriority struct {
	QueueSizes           []int64  `protobuf:"varint,1,rep,packed,name=queueSizes,proto3" json:"queueSizes,omitempty"`
	SelfQueuePriority    int64    `protobuf:"varint,2,opt,name=selfQueuePriority,proto3" json:"selfQueuePriority,omitempty"`
	Priority             int64    `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftIMPriority) Reset()         { *m = GiftIMPriority{} }
func (m *GiftIMPriority) String() string { return proto.CompactTextString(m) }
func (*GiftIMPriority) ProtoMessage()    {}
func (*GiftIMPriority) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{26}
}
func (m *GiftIMPriority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftIMPriority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftIMPriority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftIMPriority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftIMPriority.Merge(m, src)
}
func (m *GiftIMPriority) XXX_Size() int {
	return m.Size()
}
func (m *GiftIMPriority) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftIMPriority.DiscardUnknown(m)
}

var xxx_messageInfo_GiftIMPriority proto.InternalMessageInfo

func (m *GiftIMPriority) GetQueueSizes() []int64 {
	if m != nil {
		return m.QueueSizes
	}
	return nil
}

func (m *GiftIMPriority) GetSelfQueuePriority() int64 {
	if m != nil {
		return m.SelfQueuePriority
	}
	return 0
}

func (m *GiftIMPriority) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type GiftTrayInfo struct {
	TrayDisplayText      *Text    `protobuf:"bytes,1,opt,name=trayDisplayText,proto3" json:"trayDisplayText,omitempty"`
	TrayBaseImg          *Image   `protobuf:"bytes,2,opt,name=trayBaseImg,proto3" json:"trayBaseImg,omitempty"`
	TrayHeadImg          *Image   `protobuf:"bytes,3,opt,name=trayHeadImg,proto3" json:"trayHeadImg,omitempty"`
	TrayRightImg         *Image   `protobuf:"bytes,4,opt,name=trayRightImg,proto3" json:"trayRightImg,omitempty"`
	TrayLevel            int64    `protobuf:"varint,5,opt,name=trayLevel,proto3" json:"trayLevel,omitempty"`
	TrayDynamicImg       *Image   `protobuf:"bytes,6,opt,name=trayDynamicImg,proto3" json:"trayDynamicImg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftTrayInfo) Reset()         { *m = GiftTrayInfo{} }
func (m *GiftTrayInfo) String() string { return proto.CompactTextString(m) }
func (*GiftTrayInfo) ProtoMessage()    {}
func (*GiftTrayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{27}
}
func (m *GiftTrayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftTrayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftTrayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftTrayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftTrayInfo.Merge(m, src)
}
func (m *GiftTrayInfo) XXX_Size() int {
	return m.Size()
}
func (m *GiftTrayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftTrayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GiftTrayInfo proto.InternalMessageInfo

func (m *GiftTrayInfo) GetTrayDisplayText() *Text {
	if m != nil {
		return m.TrayDisplayText
	}
	return nil
}

func (m *GiftTrayInfo) GetTrayBaseImg() *Image {
	if m != nil {
		return m.TrayBaseImg
	}
	return nil
}

func (m *GiftTrayInfo) GetTrayHeadImg() *Image {
	if m != nil {
		return m.TrayHeadImg
	}
	return nil
}

func (m *GiftTrayInfo) GetTrayRightImg() *Image {
	if m != nil {
		return m.TrayRightImg
	}
	return nil
}

func (m *GiftTrayInfo) GetTrayLevel() int64 {
	if m != nil {
		return m.TrayLevel
	}
	return 0
}

func (m *GiftTrayInfo) GetTrayDynamicImg() *Image {
	if m != nil {
		return m.TrayDynamicImg
	}
	return nil
}

type GiftStruct struct {
	Image                 *Image                             `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Describe              string                             `protobuf:"bytes,2,opt,name=describe,proto3" json:"describe,omitempty"`
	Notify                bool                               `protobuf:"varint,3,opt,name=notify,proto3" json:"notify,omitempty"`
	Duration              int64                              `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Id                    int64                              `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FansclubInfo          *GiftStruct_GiftStructFansClubInfo `protobuf:"bytes,6,opt,name=fansclubInfo,proto3" json:"fansclubInfo,omitempty"`
	ForLinkmic            bool                               `protobuf:"varint,7,opt,name=forLinkmic,proto3" json:"forLinkmic,omitempty"`
	Doodle                bool                               `protobuf:"varint,8,opt,name=doodle,proto3" json:"doodle,omitempty"`
	ForFansclub           bool                               `protobuf:"varint,9,opt,name=forFansclub,proto3" json:"forFansclub,omitempty"`
	Combo                 bool                               `protobuf:"varint,10,opt,name=combo,proto3" json:"combo,omitempty"`
	Type                  int32                              `protobuf:"varint,11,opt,name=type,proto3" json:"type,omitempty"`
	DiamondCount          int32                              `protobuf:"varint,12,opt,name=diamondCount,proto3" json:"diamondCount,omitempty"`
	IsDisplayedOnPanel    int32                              `protobuf:"varint,13,opt,name=isDisplayedOnPanel,proto3" json:"isDisplayedOnPanel,omitempty"`
	PrimaryEffectId       int64                              `protobuf:"varint,14,opt,name=primaryEffectId,proto3" json:"primaryEffectId,omitempty"`
	GiftLabelIcon         *Image                             `protobuf:"bytes,15,opt,name=giftLabelIcon,proto3" json:"giftLabelIcon,omitempty"`
	Name                  string                             `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	Region                string                             `protobuf:"bytes,17,opt,name=region,proto3" json:"region,omitempty"`
	Manual                string                             `protobuf:"bytes,18,opt,name=manual,proto3" json:"manual,omitempty"`
	ForCustom             bool                               `protobuf:"varint,19,opt,name=forCustom,proto3" json:"forCustom,omitempty"`
	SpecialEffects        map[string]int64                   `protobuf:"bytes,20,rep,name=specialEffects,proto3" json:"specialEffects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Icon                  *Image                             `protobuf:"bytes,21,opt,name=icon,proto3" json:"icon,omitempty"`
	ActionType            int32                              `protobuf:"varint,22,opt,name=actionType,proto3" json:"actionType,omitempty"`
	WatermelonSeeds       int32                              `protobuf:"varint,23,opt,name=watermelonSeeds,proto3" json:"watermelonSeeds,omitempty"`
	GoldEffect            string                             `protobuf:"bytes,24,opt,name=goldEffect,proto3" json:"goldEffect,omitempty"`
	Subs                  []*LuckyMoneyGiftMeta              `protobuf:"bytes,25,rep,name=subs,proto3" json:"subs,omitempty"`
	GoldenBeans           int64                              `protobuf:"varint,26,opt,name=goldenBeans,proto3" json:"goldenBeans,omitempty"`
	HonorLevel            int64                              `protobuf:"varint,27,opt,name=honorLevel,proto3" json:"honorLevel,omitempty"`
	ItemType              int32                              `protobuf:"varint,28,opt,name=itemType,proto3" json:"itemType,omitempty"`
	SchemeUrl             string                             `protobuf:"bytes,29,opt,name=schemeUrl,proto3" json:"schemeUrl,omitempty"`
	GiftOperation         *GiftPanelOperation                `protobuf:"bytes,30,opt,name=giftOperation,proto3" json:"giftOperation,omitempty"`
	EventName             string                             `protobuf:"bytes,31,opt,name=eventName,proto3" json:"eventName,omitempty"`
	NobleLevel            int64                              `protobuf:"varint,32,opt,name=nobleLevel,proto3" json:"nobleLevel,omitempty"`
	GuideUrl              string                             `protobuf:"bytes,33,opt,name=guideUrl,proto3" json:"guideUrl,omitempty"`
	PunishMedicine        bool                               `protobuf:"varint,34,opt,name=punishMedicine,proto3" json:"punishMedicine,omitempty"`
	ForPortal             bool                               `protobuf:"varint,35,opt,name=forPortal,proto3" json:"forPortal,omitempty"`
	BusinessText          string                             `protobuf:"bytes,36,opt,name=businessText,proto3" json:"businessText,omitempty"`
	CnyGift               bool                               `protobuf:"varint,37,opt,name=cnyGift,proto3" json:"cnyGift,omitempty"`
	AppId                 int64                              `protobuf:"varint,38,opt,name=appId,proto3" json:"appId,omitempty"`
	VipLevel              int64                              `protobuf:"varint,39,opt,name=vipLevel,proto3" json:"vipLevel,omitempty"`
	IsGray                bool                               `protobuf:"varint,40,opt,name=isGray,proto3" json:"isGray,omitempty"`
	GraySchemeUrl         string                             `protobuf:"bytes,41,opt,name=graySchemeUrl,proto3" json:"graySchemeUrl,omitempty"`
	GiftScene             int64                              `protobuf:"varint,42,opt,name=giftScene,proto3" json:"giftScene,omitempty"`
	GiftBanner            *GiftBanner                        `protobuf:"bytes,43,opt,name=giftBanner,proto3" json:"giftBanner,omitempty"`
	TriggerWords          []string                           `protobuf:"bytes,44,rep,name=triggerWords,proto3" json:"triggerWords,omitempty"`
	GiftBuffInfos         []*GiftBuffInfo                    `protobuf:"bytes,45,rep,name=giftBuffInfos,proto3" json:"giftBuffInfos,omitempty"`
	ForFirstRecharge      bool                               `protobuf:"varint,46,opt,name=forFirstRecharge,proto3" json:"forFirstRecharge,omitempty"`
	DynamicImgForSelected *Image                             `protobuf:"bytes,47,opt,name=dynamicImgForSelected,proto3" json:"dynamicImgForSelected,omitempty"`
	AfterSendAction       int32                              `protobuf:"varint,48,opt,name=afterSendAction,proto3" json:"afterSendAction,omitempty"`
	GiftOfflineTime       int64                              `protobuf:"varint,49,opt,name=giftOfflineTime,proto3" json:"giftOfflineTime,omitempty"`
	TopBarText            string                             `protobuf:"bytes,50,opt,name=topBarText,proto3" json:"topBarText,omitempty"`
	TopRightAvatar        *Image                             `protobuf:"bytes,51,opt,name=topRightAvatar,proto3" json:"topRightAvatar,omitempty"`
	BannerSchemeUrl       string                             `protobuf:"bytes,52,opt,name=bannerSchemeUrl,proto3" json:"bannerSchemeUrl,omitempty"`
	IsLocked              bool                               `protobuf:"varint,53,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
	ReqExtraType          int64                              `protobuf:"varint,54,opt,name=reqExtraType,proto3" json:"reqExtraType,omitempty"`
	AssetIds              []int64                            `protobuf:"varint,55,rep,packed,name=assetIds,proto3" json:"assetIds,omitempty"`
	GiftPreviewInfo       *GiftPreviewInfo                   `protobuf:"bytes,56,opt,name=giftPreviewInfo,proto3" json:"giftPreviewInfo,omitempty"`
	GiftTip               *GiftTip                           `protobuf:"bytes,57,opt,name=giftTip,proto3" json:"giftTip,omitempty"`
	NeedSweepLightCount   int32                              `protobuf:"varint,58,opt,name=needSweepLightCount,proto3" json:"needSweepLightCount,omitempty"`
	GroupInfo             []*GiftGroupInfo                   `protobuf:"bytes,59,rep,name=groupInfo,proto3" json:"groupInfo,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                           `json:"-"`
	XXX_unrecognized      []byte                             `json:"-"`
	XXX_sizecache         int32                              `json:"-"`
}

func (m *GiftStruct) Reset()         { *m = GiftStruct{} }
func (m *GiftStruct) String() string { return proto.CompactTextString(m) }
func (*GiftStruct) ProtoMessage()    {}
func (*GiftStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{28}
}
func (m *GiftStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftStruct.Merge(m, src)
}
func (m *GiftStruct) XXX_Size() int {
	return m.Size()
}
func (m *GiftStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftStruct.DiscardUnknown(m)
}

var xxx_messageInfo_GiftStruct proto.InternalMessageInfo

func (m *GiftStruct) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *GiftStruct) GetDescribe() string {
	if m != nil {
		return m.Describe
	}
	return ""
}

func (m *GiftStruct) GetNotify() bool {
	if m != nil {
		return m.Notify
	}
	return false
}

func (m *GiftStruct) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *GiftStruct) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GiftStruct) GetFansclubInfo() *GiftStruct_GiftStructFansClubInfo {
	if m != nil {
		return m.FansclubInfo
	}
	return nil
}

func (m *GiftStruct) GetForLinkmic() bool {
	if m != nil {
		return m.ForLinkmic
	}
	return false
}

func (m *GiftStruct) GetDoodle() bool {
	if m != nil {
		return m.Doodle
	}
	return false
}

func (m *GiftStruct) GetForFansclub() bool {
	if m != nil {
		return m.ForFansclub
	}
	return false
}

func (m *GiftStruct) GetCombo() bool {
	if m != nil {
		return m.Combo
	}
	return false
}

func (m *GiftStruct) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GiftStruct) GetDiamondCount() int32 {
	if m != nil {
		return m.DiamondCount
	}
	return 0
}

func (m *GiftStruct) GetIsDisplayedOnPanel() int32 {
	if m != nil {
		return m.IsDisplayedOnPanel
	}
	return 0
}

func (m *GiftStruct) GetPrimaryEffectId() int64 {
	if m != nil {
		return m.PrimaryEffectId
	}
	return 0
}

func (m *GiftStruct) GetGiftLabelIcon() *Image {
	if m != nil {
		return m.GiftLabelIcon
	}
	return nil
}

func (m *GiftStruct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GiftStruct) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *GiftStruct) GetManual() string {
	if m != nil {
		return m.Manual
	}
	return ""
}

func (m *GiftStruct) GetForCustom() bool {
	if m != nil {
		return m.ForCustom
	}
	return false
}

func (m *GiftStruct) GetSpecialEffects() map[string]int64 {
	if m != nil {
		return m.SpecialEffects
	}
	return nil
}

func (m *GiftStruct) GetIcon() *Image {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (m *GiftStruct) GetActionType() int32 {
	if m != nil {
		return m.ActionType
	}
	return 0
}

func (m *GiftStruct) GetWatermelonSeeds() int32 {
	if m != nil {
		return m.WatermelonSeeds
	}
	return 0
}

func (m *GiftStruct) GetGoldEffect() string {
	if m != nil {
		return m.GoldEffect
	}
	return ""
}

func (m *GiftStruct) GetSubs() []*LuckyMoneyGiftMeta {
	if m != nil {
		return m.Subs
	}
	return nil
}

func (m *GiftStruct) GetGoldenBeans() int64 {
	if m != nil {
		return m.GoldenBeans
	}
	return 0
}

func (m *GiftStruct) GetHonorLevel() int64 {
	if m != nil {
		return m.HonorLevel
	}
	return 0
}

func (m *GiftStruct) GetItemType() int32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

func (m *GiftStruct) GetSchemeUrl() string {
	if m != nil {
		return m.SchemeUrl
	}
	return ""
}

func (m *GiftStruct) GetGiftOperation() *GiftPanelOperation {
	if m != nil {
		return m.GiftOperation
	}
	return nil
}

func (m *GiftStruct) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *GiftStruct) GetNobleLevel() int64 {
	if m != nil {
		return m.NobleLevel
	}
	return 0
}

func (m *GiftStruct) GetGuideUrl() string {
	if m != nil {
		return m.GuideUrl
	}
	return ""
}

func (m *GiftStruct) GetPunishMedicine() bool {
	if m != nil {
		return m.PunishMedicine
	}
	return false
}

func (m *GiftStruct) GetForPortal() bool {
	if m != nil {
		return m.ForPortal
	}
	return false
}

func (m *GiftStruct) GetBusinessText() string {
	if m != nil {
		return m.BusinessText
	}
	return ""
}

func (m *GiftStruct) GetCnyGift() bool {
	if m != nil {
		return m.CnyGift
	}
	return false
}

func (m *GiftStruct) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *GiftStruct) GetVipLevel() int64 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

func (m *GiftStruct) GetIsGray() bool {
	if m != nil {
		return m.IsGray
	}
	return false
}

func (m *GiftStruct) GetGraySchemeUrl() string {
	if m != nil {
		return m.GraySchemeUrl
	}
	return ""
}

func (m *GiftStruct) GetGiftScene() int64 {
	if m != nil {
		return m.GiftScene
	}
	return 0
}

func (m *GiftStruct) GetGiftBanner() *GiftBanner {
	if m != nil {
		return m.GiftBanner
	}
	return nil
}

func (m *GiftStruct) GetTriggerWords() []string {
	if m != nil {
		return m.TriggerWords
	}
	return nil
}

func (m *GiftStruct) GetGiftBuffInfos() []*GiftBuffInfo {
	if m != nil {
		return m.GiftBuffInfos
	}
	return nil
}

func (m *GiftStruct) GetForFirstRecharge() bool {
	if m != nil {
		return m.ForFirstRecharge
	}
	return false
}

func (m *GiftStruct) GetDynamicImgForSelected() *Image {
	if m != nil {
		return m.DynamicImgForSelected
	}
	return nil
}

func (m *GiftStruct) GetAfterSendAction() int32 {
	if m != nil {
		return m.AfterSendAction
	}
	return 0
}

func (m *GiftStruct) GetGiftOfflineTime() int64 {
	if m != nil {
		return m.GiftOfflineTime
	}
	return 0
}

func (m *GiftStruct) GetTopBarText() string {
	if m != nil {
		return m.TopBarText
	}
	return ""
}

func (m *GiftStruct) GetTopRightAvatar() *Image {
	if m != nil {
		return m.TopRightAvatar
	}
	return nil
}

func (m *GiftStruct) GetBannerSchemeUrl() string {
	if m != nil {
		return m.BannerSchemeUrl
	}
	return ""
}

func (m *GiftStruct) GetIsLocked() bool {
	if m != nil {
		return m.IsLocked
	}
	return false
}

func (m *GiftStruct) GetReqExtraType() int64 {
	if m != nil {
		return m.ReqExtraType
	}
	return 0
}

func (m *GiftStruct) GetAssetIds() []int64 {
	if m != nil {
		return m.AssetIds
	}
	return nil
}

func (m *GiftStruct) GetGiftPreviewInfo() *GiftPreviewInfo {
	if m != nil {
		return m.GiftPreviewInfo
	}
	return nil
}

func (m *GiftStruct) GetGiftTip() *GiftTip {
	if m != nil {
		return m.GiftTip
	}
	return nil
}

func (m *GiftStruct) GetNeedSweepLightCount() int32 {
	if m != nil {
		return m.NeedSweepLightCount
	}
	return 0
}

func (m *GiftStruct) GetGroupInfo() []*GiftGroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

type GiftStruct_GiftStructFansClubInfo struct {
	MinLevel             int32    `protobuf:"varint,1,opt,name=minLevel,proto3" json:"minLevel,omitempty"`
	InsertPos            int32    `protobuf:"varint,2,opt,name=insertPos,proto3" json:"insertPos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftStruct_GiftStructFansClubInfo) Reset()         { *m = GiftStruct_GiftStructFansClubInfo{} }
func (m *GiftStruct_GiftStructFansClubInfo) String() string { return proto.CompactTextString(m) }
func (*GiftStruct_GiftStructFansClubInfo) ProtoMessage()    {}
func (*GiftStruct_GiftStructFansClubInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{28, 1}
}
func (m *GiftStruct_GiftStructFansClubInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftStruct_GiftStructFansClubInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftStruct_GiftStructFansClubInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftStruct_GiftStructFansClubInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftStruct_GiftStructFansClubInfo.Merge(m, src)
}
func (m *GiftStruct_GiftStructFansClubInfo) XXX_Size() int {
	return m.Size()
}
func (m *GiftStruct_GiftStructFansClubInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftStruct_GiftStructFansClubInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GiftStruct_GiftStructFansClubInfo proto.InternalMessageInfo

func (m *GiftStruct_GiftStructFansClubInfo) GetMinLevel() int32 {
	if m != nil {
		return m.MinLevel
	}
	return 0
}

func (m *GiftStruct_GiftStructFansClubInfo) GetInsertPos() int32 {
	if m != nil {
		return m.InsertPos
	}
	return 0
}

type AssetEffectMixInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetEffectMixInfo) Reset()         { *m = AssetEffectMixInfo{} }
func (m *AssetEffectMixInfo) String() string { return proto.CompactTextString(m) }
func (*AssetEffectMixInfo) ProtoMessage()    {}
func (*AssetEffectMixInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{29}
}
func (m *AssetEffectMixInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetEffectMixInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetEffectMixInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetEffectMixInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetEffectMixInfo.Merge(m, src)
}
func (m *AssetEffectMixInfo) XXX_Size() int {
	return m.Size()
}
func (m *AssetEffectMixInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetEffectMixInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AssetEffectMixInfo proto.InternalMessageInfo

type LuckyMoneyGiftMeta struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LuckyMoneyGiftMeta) Reset()         { *m = LuckyMoneyGiftMeta{} }
func (m *LuckyMoneyGiftMeta) String() string { return proto.CompactTextString(m) }
func (*LuckyMoneyGiftMeta) ProtoMessage()    {}
func (*LuckyMoneyGiftMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{30}
}
func (m *LuckyMoneyGiftMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LuckyMoneyGiftMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LuckyMoneyGiftMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LuckyMoneyGiftMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LuckyMoneyGiftMeta.Merge(m, src)
}
func (m *LuckyMoneyGiftMeta) XXX_Size() int {
	return m.Size()
}
func (m *LuckyMoneyGiftMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_LuckyMoneyGiftMeta.DiscardUnknown(m)
}

var xxx_messageInfo_LuckyMoneyGiftMeta proto.InternalMessageInfo

type GiftPanelOperation struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftPanelOperation) Reset()         { *m = GiftPanelOperation{} }
func (m *GiftPanelOperation) String() string { return proto.CompactTextString(m) }
func (*GiftPanelOperation) ProtoMessage()    {}
func (*GiftPanelOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{31}
}
func (m *GiftPanelOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftPanelOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftPanelOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftPanelOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftPanelOperation.Merge(m, src)
}
func (m *GiftPanelOperation) XXX_Size() int {
	return m.Size()
}
func (m *GiftPanelOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftPanelOperation.DiscardUnknown(m)
}

var xxx_messageInfo_GiftPanelOperation proto.InternalMessageInfo

type GiftBanner struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftBanner) Reset()         { *m = GiftBanner{} }
func (m *GiftBanner) String() string { return proto.CompactTextString(m) }
func (*GiftBanner) ProtoMessage()    {}
func (*GiftBanner) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{32}
}
func (m *GiftBanner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftBanner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftBanner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftBanner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftBanner.Merge(m, src)
}
func (m *GiftBanner) XXX_Size() int {
	return m.Size()
}
func (m *GiftBanner) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftBanner.DiscardUnknown(m)
}

var xxx_messageInfo_GiftBanner proto.InternalMessageInfo

type GiftBuffInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftBuffInfo) Reset()         { *m = GiftBuffInfo{} }
func (m *GiftBuffInfo) String() string { return proto.CompactTextString(m) }
func (*GiftBuffInfo) ProtoMessage()    {}
func (*GiftBuffInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{33}
}
func (m *GiftBuffInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftBuffInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftBuffInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftBuffInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftBuffInfo.Merge(m, src)
}
func (m *GiftBuffInfo) XXX_Size() int {
	return m.Size()
}
func (m *GiftBuffInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftBuffInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GiftBuffInfo proto.InternalMessageInfo

type GiftPreviewInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftPreviewInfo) Reset()         { *m = GiftPreviewInfo{} }
func (m *GiftPreviewInfo) String() string { return proto.CompactTextString(m) }
func (*GiftPreviewInfo) ProtoMessage()    {}
func (*GiftPreviewInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{34}
}
func (m *GiftPreviewInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftPreviewInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftPreviewInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftPreviewInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftPreviewInfo.Merge(m, src)
}
func (m *GiftPreviewInfo) XXX_Size() int {
	return m.Size()
}
func (m *GiftPreviewInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftPreviewInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GiftPreviewInfo proto.InternalMessageInfo

type GiftTip struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftTip) Reset()         { *m = GiftTip{} }
func (m *GiftTip) String() string { return proto.CompactTextString(m) }
func (*GiftTip) ProtoMessage()    {}
func (*GiftTip) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{35}
}
func (m *GiftTip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftTip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftTip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftTip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftTip.Merge(m, src)
}
func (m *GiftTip) XXX_Size() int {
	return m.Size()
}
func (m *GiftTip) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftTip.DiscardUnknown(m)
}

var xxx_messageInfo_GiftTip proto.InternalMessageInfo

type GiftGroupInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftGroupInfo) Reset()         { *m = GiftGroupInfo{} }
func (m *GiftGroupInfo) String() string { return proto.CompactTextString(m) }
func (*GiftGroupInfo) ProtoMessage()    {}
func (*GiftGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{36}
}
func (m *GiftGroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftGroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftGroupInfo.Merge(m, src)
}
func (m *GiftGroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *GiftGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GiftGroupInfo proto.InternalMessageInfo

type EffectMixImageInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EffectMixImageInfo) Reset()         { *m = EffectMixImageInfo{} }
func (m *EffectMixImageInfo) String() string { return proto.CompactTextString(m) }
func (*EffectMixImageInfo) ProtoMessage()    {}
func (*EffectMixImageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{37}
}
func (m *EffectMixImageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectMixImageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectMixImageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EffectMixImageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectMixImageInfo.Merge(m, src)
}
func (m *EffectMixImageInfo) XXX_Size() int {
	return m.Size()
}
func (m *EffectMixImageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectMixImageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EffectMixImageInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterMapType((map[string]string)(nil), "Response.RouteParamsEntry")
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*RoomUserSeqMessage)(nil), "RoomUserSeqMessage")
	proto.RegisterType((*RoomUserSeqMessage_Contributor)(nil), "RoomUserSeqMessage.Contributor")
	proto.RegisterType((*GiftMessage)(nil), "GiftMessage")
	proto.RegisterType((*GiftMessage_TextEffect)(nil), "GiftMessage.TextEffect")
	proto.RegisterType((*GiftMessage_TextEffect_Detail)(nil), "GiftMessage.TextEffect.Detail")
	proto.RegisterType((*LikeMessage)(nil), "LikeMessage")
	proto.RegisterType((*ChatMessage)(nil), "ChatMessage")
	proto.RegisterType((*SocialMessage)(nil), "SocialMessage")
	proto.RegisterType((*MemberMessage)(nil), "MemberMessage")
	proto.RegisterType((*MemberMessage_EffectConfig)(nil), "MemberMessage.EffectConfig")
	proto.RegisterType((*ControlMessage)(nil), "ControlMessage")
	proto.RegisterType((*FansclubMessage)(nil), "FansclubMessage")
	proto.RegisterType((*Common)(nil), "Common")
	proto.RegisterType((*Text)(nil), "Text")
	proto.RegisterType((*Room)(nil), "Room")
	proto.RegisterMapType((map[int64]string)(nil), "Room.DynamicCoverDictEntry")
	proto.RegisterType((*RoomExtra)(nil), "RoomExtra")
	proto.RegisterType((*RoomStats)(nil), "RoomStats")
	proto.RegisterType((*RoomUserAttr)(nil), "RoomUserAttr")
	proto.RegisterType((*StreamUrl)(nil), "StreamUrl")
	proto.RegisterType((*LinkMic)(nil), "LinkMic")
	proto.RegisterType((*Decoration)(nil), "Decoration")
	proto.RegisterType((*TopFan)(nil), "TopFan")
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*User_UserAttr)(nil), "User.UserAttr")
	proto.RegisterType((*User_OwnRoom)(nil), "User.OwnRoom")
	proto.RegisterType((*User_AnchorInfo)(nil), "User.AnchorInfo")
	proto.RegisterType((*User_FollowInfo)(nil), "User.FollowInfo")
	proto.RegisterType((*User_FansClub)(nil), "User.FansClub")
	proto.RegisterMapType((map[int32]*User_FansClub_FansClubData)(nil), "User.FansClub.PreferDataEntry")
	proto.RegisterType((*User_FansClub_FansClubData)(nil), "User.FansClub.FansClubData")
	proto.RegisterType((*User_FansClub_FansClubData_UserBadge)(nil), "User.FansClub.FansClubData.UserBadge")
	proto.RegisterMapType((map[int32]*Image)(nil), "User.FansClub.FansClubData.UserBadge.IconsEntry")
	proto.RegisterType((*User_Border)(nil), "User.Border")
	proto.RegisterType((*User_GradeBuffInfo)(nil), "User.GradeBuffInfo")
	proto.RegisterMapType((map[int64]int64)(nil), "User.GradeBuffInfo.StatsInfoEntry")
	proto.RegisterType((*User_PayGrade)(nil), "User.PayGrade")
	proto.RegisterType((*User_PayGrade_GradeIcon)(nil), "User.PayGrade.GradeIcon")
	proto.RegisterType((*TextFormat)(nil), "TextFormat")
	proto.RegisterType((*TextPiece)(nil), "TextPiece")
	proto.RegisterType((*Image)(nil), "Image")
	proto.RegisterType((*Image_Content)(nil), "Image.Content")
	proto.RegisterType((*TextPieceUser)(nil), "TextPieceUser")
	proto.RegisterType((*PublicAreaCommon)(nil), "PublicAreaCommon")
	proto.RegisterType((*GiftIMPriority)(nil), "GiftIMPriority")
	proto.RegisterType((*GiftTrayInfo)(nil), "GiftTrayInfo")
	proto.RegisterType((*GiftStruct)(nil), "GiftStruct")
	proto.RegisterMapType((map[string]int64)(nil), "GiftStruct.SpecialEffectsEntry")
	proto.RegisterType((*GiftStruct_GiftStructFansClubInfo)(nil), "GiftStruct.GiftStructFansClubInfo")
	proto.RegisterType((*AssetEffectMixInfo)(nil), "AssetEffectMixInfo")
	proto.RegisterType((*LuckyMoneyGiftMeta)(nil), "LuckyMoneyGiftMeta")
	proto.RegisterType((*GiftPanelOperation)(nil), "GiftPanelOperation")
	proto.RegisterType((*GiftBanner)(nil), "GiftBanner")
	proto.RegisterType((*GiftBuffInfo)(nil), "GiftBuffInfo")
	proto.RegisterType((*GiftPreviewInfo)(nil), "GiftPreviewInfo")
	proto.RegisterType((*GiftTip)(nil), "GiftTip")
	proto.RegisterType((*GiftGroupInfo)(nil), "GiftGroupInfo")
	proto.RegisterType((*EffectMixImageInfo)(nil), "EffectMixImageInfo")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 5530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x7b, 0xcf, 0x6f, 0x23, 0x47,
	0x76, 0x3f, 0x28, 0x8a, 0x12, 0x59, 0xd4, 0xaf, 0xa9, 0xf1, 0x8c, 0xdb, 0xf4, 0xac, 0x3c, 0xe6,
	0xce, 0x7a, 0xb4, 0xf6, 0x7c, 0xe9, 0xf1, 0xd8, 0xfb, 0xcb, 0xeb, 0xef, 0x66, 0x35, 0x92, 0x35,
	0x16, 0xa2, 0xb1, 0xb5, 0x4d, 0xd9, 0x06, 0x72, 0x59, 0x14, 0xbb, 0x8b, 0x64, 0x41, 0xcd, 0x2e,
	0x6e, 0x75, 0x51, 0x12, 0x77, 0x6f, 0xd9, 0x0d, 0x72, 0x48, 0x72, 0x0b, 0x90, 0x1c, 0x02, 0x2c,
	0x90, 0x1c, 0x83, 0x5c, 0x73, 0xcc, 0x39, 0xc7, 0x1c, 0x72, 0xc9, 0x2d, 0xf0, 0x2d, 0x3f, 0x0e,
	0xf9, 0x07, 0x12, 0x04, 0xef, 0xbd, 0xea, 0xee, 0x6a, 0x92, 0xf6, 0x4c, 0x80, 0x3d, 0x89, 0xef,
	0xf3, 0x5e, 0x57, 0x57, 0x57, 0xbd, 0xdf, 0x55, 0x62, 0xdb, 0x13, 0x99, 0x65, 0x62, 0x24, 0x7b,
	0x53, 0xa3, 0xad, 0xee, 0xfe, 0x67, 0x9d, 0x35, 0x43, 0x99, 0x4d, 0x75, 0x9a, 0x49, 0xfe, 0x80,
	0x35, 0x1d, 0x37, 0x0b, 0x6a, 0xf7, 0xeb, 0x07, 0xed, 0x27, 0xcd, 0xde, 0x73, 0x02, 0xc2, 0x82,
	0xc3, 0xef, 0xb2, 0x8d, 0x68, 0x66, 0x32, 0x6d, 0x82, 0xb5, 0xfb, 0xb5, 0x83, 0x56, 0xe8, 0x28,
	0xfe, 0x80, 0x6d, 0x0f, 0xa5, 0x8d, 0xc6, 0xa7, 0xa9, 0x95, 0xe6, 0x4a, 0x24, 0x41, 0xfd, 0x7e,
	0xed, 0xa0, 0x1e, 0x56, 0x41, 0xbe, 0xc7, 0xea, 0xa9, 0xbe, 0x0e, 0xd6, 0x91, 0x07, 0x3f, 0xf9,
	0x7d, 0xd6, 0x56, 0xc0, 0x4d, 0x45, 0xf2, 0xf1, 0x8d, 0x0d, 0x1a, 0x38, 0xa8, 0x0f, 0xf1, 0x7b,
	0xac, 0x85, 0x83, 0x5c, 0xcc, 0xa7, 0x32, 0xd8, 0xb8, 0x5f, 0x3b, 0x68, 0x84, 0x25, 0xc0, 0x3f,
	0x62, 0x6d, 0xa3, 0x67, 0x56, 0x9e, 0x0b, 0x23, 0x26, 0x59, 0xb0, 0x89, 0x13, 0xef, 0xf4, 0xf2,
	0xaf, 0xea, 0x85, 0x25, 0xf3, 0xe3, 0xd4, 0x9a, 0x79, 0xe8, 0x8b, 0xf3, 0x47, 0xec, 0xd6, 0x58,
	0x0a, 0x63, 0x07, 0x52, 0xd8, 0xe3, 0x99, 0x11, 0x56, 0xe9, 0x34, 0x68, 0xe2, 0xec, 0x96, 0x19,
	0x3c, 0x60, 0x9b, 0xa9, 0x94, 0xf1, 0x61, 0x74, 0x19, 0xb4, 0xee, 0xd7, 0x0e, 0x9a, 0x61, 0x4e,
	0xf2, 0x7d, 0xc6, 0xa6, 0xb3, 0x6c, 0xdc, 0x97, 0xe6, 0x4a, 0x9a, 0x80, 0xe1, 0x47, 0x78, 0x08,
	0xf0, 0x13, 0x75, 0x25, 0x8f, 0x68, 0xe5, 0xda, 0xc4, 0x2f, 0x11, 0x58, 0xbd, 0xb1, 0xca, 0xac,
	0x36, 0xf3, 0x4f, 0xf5, 0x73, 0x6d, 0x64, 0xb0, 0x85, 0xe3, 0x57, 0xc1, 0xce, 0x4f, 0xd8, 0xde,
	0xe2, 0xe7, 0xc0, 0x8a, 0x5e, 0xca, 0x79, 0x50, 0xc3, 0x21, 0xe1, 0x27, 0x7f, 0x85, 0x35, 0xae,
	0x44, 0x32, 0x93, 0x6e, 0x83, 0x88, 0xf8, 0x70, 0xed, 0x87, 0xb5, 0xee, 0xaf, 0x6b, 0x6c, 0xd3,
	0xed, 0x28, 0xec, 0xe3, 0x44, 0xda, 0xb1, 0x8e, 0xdd, 0xa3, 0x8e, 0x82, 0x6f, 0x9c, 0x8a, 0x79,
	0xa2, 0x45, 0x8c, 0xcf, 0x6f, 0x85, 0x39, 0x09, 0xe3, 0x4e, 0xb2, 0xd1, 0x69, 0xec, 0x76, 0x96,
	0x08, 0x90, 0x9f, 0x64, 0x23, 0xdc, 0x9b, 0x75, 0xdc, 0x9b, 0x9c, 0x84, 0x37, 0xe8, 0xe1, 0x30,
	0x93, 0xb4, 0xa9, 0xf5, 0xd0, 0x51, 0xdd, 0xdf, 0x34, 0x18, 0x0f, 0xb5, 0x9e, 0x7c, 0x9e, 0x49,
	0xd3, 0x97, 0xbf, 0xc8, 0x27, 0xf4, 0x06, 0xdb, 0x88, 0xf4, 0x64, 0xa2, 0x53, 0x9c, 0x50, 0xfb,
	0xc9, 0x66, 0xef, 0x08, 0xc9, 0xd0, 0xc1, 0xfc, 0x7b, 0xac, 0x61, 0x44, 0x7a, 0x99, 0x05, 0x6b,
	0xb8, 0xc7, 0x6f, 0xf4, 0x96, 0x07, 0xe9, 0x1d, 0xe9, 0xd4, 0x1a, 0x35, 0x98, 0x59, 0x6d, 0x42,
	0x92, 0x86, 0x69, 0x5b, 0x6d, 0x0b, 0x85, 0x24, 0x02, 0x26, 0x37, 0xd5, 0xd3, 0xbe, 0x35, 0x38,
	0xeb, 0x56, 0xe8, 0x28, 0x78, 0x49, 0x26, 0x85, 0xcd, 0x82, 0xc6, 0x4b, 0xbe, 0x04, 0xa5, 0x71,
	0xff, 0xf5, 0x74, 0x96, 0x08, 0xa3, 0xec, 0x1c, 0x95, 0xb4, 0x1e, 0x7a, 0x08, 0xe8, 0x30, 0xbe,
	0x17, 0x46, 0x0a, 0x36, 0x91, 0x5d, 0x02, 0xbc, 0xcb, 0xb6, 0x0a, 0x02, 0xa6, 0xd4, 0xc4, 0x29,
	0x55, 0x30, 0xde, 0x61, 0x4d, 0xa4, 0x81, 0xdf, 0x42, 0x7e, 0x41, 0xf3, 0xc7, 0xec, 0xb6, 0x4e,
	0x13, 0x95, 0x4a, 0x10, 0x3e, 0xd1, 0xe6, 0x30, 0x8d, 0xc6, 0x3a, 0x57, 0xc3, 0x55, 0x2c, 0xfe,
	0x36, 0xdb, 0xc3, 0xa7, 0xcf, 0xaf, 0x4a, 0x71, 0xd2, 0xca, 0x25, 0xbc, 0xf3, 0xcf, 0x35, 0xd6,
	0xf6, 0x3e, 0x19, 0x16, 0x34, 0x8b, 0x40, 0x47, 0x6b, 0xb4, 0xa0, 0x48, 0xf0, 0xd7, 0xd8, 0xfa,
	0x0c, 0x3e, 0x6e, 0x0d, 0x37, 0xaf, 0xd1, 0x83, 0xf7, 0x85, 0x08, 0x71, 0xce, 0xd6, 0x61, 0x2b,
	0xdc, 0x06, 0xe0, 0x6f, 0x18, 0x24, 0x96, 0x89, 0x15, 0xce, 0x15, 0x10, 0x01, 0x1f, 0xa9, 0xb2,
	0x4f, 0x54, 0x1c, 0xcb, 0x14, 0x95, 0xa6, 0x19, 0x16, 0x34, 0x4c, 0x19, 0xdf, 0x74, 0x2c, 0xb3,
	0xc8, 0xa8, 0x29, 0x5a, 0xea, 0x06, 0x4d, 0x79, 0x11, 0x87, 0x05, 0x95, 0x37, 0x22, 0xb2, 0xc9,
	0xbc, 0x8f, 0x33, 0xdd, 0xa4, 0x05, 0xf5, 0xb1, 0xee, 0x5f, 0xb7, 0x59, 0xfb, 0x99, 0x1a, 0xda,
	0x97, 0xd6, 0xbf, 0xbb, 0x6c, 0x63, 0xa4, 0x86, 0xf6, 0x94, 0x0c, 0xa3, 0x1e, 0x3a, 0x8a, 0xbf,
	0xc5, 0x76, 0x86, 0x22, 0xbd, 0x50, 0xd1, 0xa5, 0xb4, 0x47, 0x7a, 0x96, 0x5a, 0xf7, 0xa1, 0x0b,
	0x28, 0xe8, 0xc8, 0xc8, 0xe8, 0xd9, 0x94, 0x64, 0xe8, 0xbb, 0x3d, 0x04, 0x3c, 0xa1, 0x91, 0x53,
	0x29, 0xdc, 0x20, 0x64, 0x34, 0x3e, 0x04, 0x23, 0x44, 0x7a, 0x32, 0xd0, 0x24, 0xe0, 0xb4, 0xac,
	0x44, 0x8a, 0x3d, 0xd8, 0x5c, 0xde, 0x83, 0x6f, 0xb1, 0x0d, 0xab, 0x51, 0xfb, 0x9a, 0x3e, 0xd3,
	0x81, 0xa0, 0x9f, 0xf4, 0xa2, 0x8f, 0xd3, 0x18, 0xd5, 0xab, 0x11, 0x96, 0x00, 0xff, 0x01, 0x63,
	0x56, 0xde, 0xd8, 0x8f, 0x87, 0x43, 0x19, 0x59, 0x54, 0xab, 0xf6, 0x93, 0x57, 0x7b, 0xde, 0xe2,
	0xf5, 0x2e, 0x0a, 0x76, 0xe8, 0x89, 0x82, 0x73, 0xc0, 0x0f, 0x3c, 0x8d, 0x51, 0xbb, 0xea, 0x61,
	0x4e, 0xf2, 0x03, 0xb6, 0xab, 0xd2, 0x48, 0x4f, 0xe4, 0x85, 0xc8, 0x2e, 0x61, 0x21, 0x33, 0x74,
	0x79, 0xf5, 0x70, 0x11, 0xe6, 0x3d, 0xc6, 0x8d, 0xd6, 0x93, 0x93, 0xea, 0x12, 0x6f, 0xa3, 0xf0,
	0x0a, 0x0e, 0x7f, 0x87, 0x35, 0xa7, 0x46, 0x69, 0x34, 0xc4, 0x1d, 0x9c, 0xea, 0x2e, 0x4e, 0xf5,
	0xf4, 0xf9, 0xb9, 0x83, 0xc3, 0x42, 0x80, 0xbf, 0xc1, 0xd6, 0xe1, 0x2d, 0xc1, 0x2e, 0x0a, 0xb6,
	0x51, 0xb0, 0x6f, 0xcd, 0x2c, 0xb2, 0x21, 0x32, 0x40, 0x4f, 0x13, 0x0d, 0x4e, 0x6f, 0x8f, 0x9c,
	0x29, 0x12, 0xa0, 0xa7, 0x99, 0x4c, 0x63, 0xf4, 0x7a, 0xb7, 0x70, 0x26, 0x05, 0xcd, 0xff, 0x3f,
	0xdb, 0x9b, 0xce, 0x06, 0x89, 0x8a, 0x0e, 0x8d, 0x14, 0xa4, 0x42, 0x01, 0xc7, 0xe1, 0x6f, 0xf5,
	0xce, 0x17, 0x18, 0xe1, 0x92, 0x28, 0x7f, 0x97, 0xed, 0x5a, 0x23, 0xe6, 0xc7, 0x2a, 0x9b, 0x26,
	0x62, 0x0e, 0xeb, 0x1a, 0xdc, 0x76, 0x3b, 0x06, 0x44, 0xb8, 0xc8, 0xe5, 0x4f, 0xd8, 0x2b, 0x03,
	0x91, 0xa6, 0x32, 0x76, 0x20, 0x2d, 0x7d, 0x16, 0xbc, 0x82, 0xf3, 0x5a, 0xc9, 0xe3, 0xdf, 0x65,
	0x4d, 0x18, 0xe6, 0x34, 0x1d, 0xea, 0xe0, 0x0e, 0x8e, 0xbe, 0x8d, 0x9f, 0x7e, 0xe1, 0xc0, 0xb0,
	0x60, 0xf3, 0x23, 0xc6, 0x45, 0x96, 0x49, 0xb7, 0xa3, 0xcf, 0xd5, 0x0d, 0x3e, 0x14, 0xe0, 0x43,
	0xb7, 0x7b, 0x87, 0x4b, 0xac, 0x70, 0x85, 0x78, 0xe7, 0xef, 0xd7, 0x19, 0x2b, 0x55, 0x84, 0x7f,
	0xc8, 0x9a, 0x53, 0x6d, 0xac, 0x11, 0xca, 0x3a, 0x63, 0xdb, 0xff, 0x1a, 0x6d, 0xea, 0x1d, 0x4b,
	0x2b, 0x54, 0x12, 0x16, 0xf2, 0xfc, 0x23, 0xd6, 0x4a, 0x44, 0x1a, 0x67, 0x91, 0x98, 0x4a, 0xe7,
	0x6c, 0x5e, 0xf4, 0x70, 0xf9, 0x40, 0xe7, 0xef, 0xea, 0x6c, 0x83, 0x50, 0x30, 0x16, 0xd0, 0x54,
	0x37, 0x01, 0xb7, 0xba, 0x08, 0xa1, 0x3f, 0x96, 0x37, 0xf6, 0x44, 0xa7, 0xb6, 0xaf, 0x7e, 0x49,
	0xaf, 0x69, 0x84, 0x15, 0x8c, 0xbf, 0xc5, 0xd8, 0x40, 0x44, 0x97, 0xa0, 0xcf, 0x29, 0x85, 0xc4,
	0xf6, 0x93, 0x8d, 0xde, 0xe9, 0x04, 0xb2, 0x25, 0x8f, 0x83, 0xde, 0xd2, 0x0a, 0x63, 0x5d, 0x74,
	0x24, 0x02, 0x14, 0x28, 0xce, 0xd3, 0x8d, 0x06, 0x32, 0x0a, 0x9a, 0x6f, 0xb1, 0xda, 0x8d, 0xcb,
	0x73, 0x6a, 0x37, 0x40, 0xcd, 0xd1, 0xa0, 0x1b, 0x61, 0x0d, 0x63, 0xfb, 0xb5, 0x8a, 0xed, 0x18,
	0xad, 0xb8, 0x11, 0x12, 0x01, 0x9e, 0x69, 0x2c, 0xd5, 0x68, 0x6c, 0x9d, 0xe9, 0x3a, 0x0a, 0xd5,
	0x74, 0x2c, 0x62, 0x7d, 0x7d, 0x7c, 0x83, 0x56, 0xdb, 0x08, 0x0b, 0xda, 0xe3, 0xcd, 0xd1, 0x36,
	0x4b, 0xde, 0x1c, 0xbe, 0x9f, 0x7e, 0x87, 0x22, 0x56, 0x33, 0xb2, 0xcc, 0x46, 0x58, 0xc1, 0xc0,
	0x5b, 0x11, 0x7d, 0xa4, 0x13, 0x6d, 0xd0, 0x1e, 0x5b, 0xa1, 0x0f, 0xa1, 0x84, 0x35, 0xfa, 0x52,
	0x92, 0xc4, 0x8e, 0x93, 0x28, 0xa1, 0x52, 0xe2, 0x4b, 0xfc, 0xa6, 0x5d, 0x7c, 0x8d, 0x0f, 0x75,
	0x7f, 0x5b, 0x63, 0xed, 0x33, 0x75, 0x29, 0x5f, 0xda, 0x49, 0xbf, 0xc2, 0x1a, 0x11, 0x3a, 0x08,
	0xf2, 0xd1, 0x44, 0x7c, 0x4d, 0x0e, 0x80, 0xb2, 0x30, 0xb5, 0xf5, 0x5c, 0x16, 0x26, 0x95, 0x3b,
	0xd1, 0xc6, 0xca, 0x40, 0xa6, 0xa2, 0x22, 0xec, 0xe0, 0xef, 0xee, 0x9f, 0xd6, 0x59, 0xfb, 0x68,
	0x2c, 0x5e, 0x3e, 0x8c, 0x7c, 0x43, 0xa0, 0x0c, 0xd8, 0x66, 0xa4, 0x53, 0x2b, 0x5d, 0x08, 0x69,
	0x85, 0x39, 0x09, 0xee, 0xf2, 0x4a, 0x65, 0x6a, 0x90, 0xc8, 0x0b, 0xdd, 0x97, 0x69, 0x2c, 0x69,
	0xd2, 0xcd, 0x70, 0x11, 0xe6, 0x8f, 0xd9, 0x6e, 0xa9, 0x7d, 0xa8, 0x8e, 0xee, 0x4b, 0x72, 0xe5,
	0x5c, 0x64, 0x43, 0xf6, 0x30, 0x9c, 0x25, 0x49, 0x3f, 0x32, 0x52, 0xa6, 0x60, 0x05, 0xb4, 0x5f,
	0xf4, 0x91, 0xab, 0x58, 0xfc, 0x03, 0x76, 0x6b, 0x61, 0x90, 0x2f, 0x9e, 0xb8, 0xa0, 0x93, 0xbf,
	0x65, 0x59, 0x60, 0xa5, 0x63, 0x6c, 0xbd, 0xbc, 0x63, 0x7c, 0xc0, 0x5a, 0x18, 0x70, 0xf1, 0x93,
	0x58, 0xe5, 0x65, 0x25, 0xa3, 0xfb, 0x9b, 0x35, 0xb6, 0xdd, 0xd7, 0x91, 0x12, 0xc9, 0xef, 0x62,
	0x43, 0xee, 0xb1, 0x56, 0x36, 0x16, 0x46, 0xa2, 0xa3, 0x27, 0xdd, 0x29, 0x01, 0x30, 0x3b, 0x11,
	0xa1, 0x09, 0x93, 0x02, 0x39, 0xca, 0x99, 0x86, 0x91, 0x17, 0xc2, 0x8c, 0x64, 0x51, 0xd2, 0x78,
	0x10, 0x48, 0x0c, 0x75, 0x92, 0x80, 0xa5, 0x94, 0x91, 0xdc, 0x87, 0x56, 0x2e, 0xd6, 0xe6, 0x4b,
	0x2f, 0x56, 0xf7, 0x2f, 0x19, 0xdb, 0x7e, 0x2e, 0x27, 0x03, 0x69, 0x7e, 0x17, 0xcb, 0x70, 0x9f,
	0xb5, 0x27, 0x38, 0x98, 0x9f, 0xde, 0xf8, 0x10, 0x7f, 0x93, 0x35, 0xf5, 0x54, 0x1a, 0x61, 0x9d,
	0x35, 0x15, 0x03, 0x14, 0x30, 0x38, 0x15, 0x95, 0xf5, 0xa5, 0xbd, 0xd0, 0x87, 0xf1, 0x44, 0xe5,
	0xf9, 0x5d, 0x05, 0x83, 0xf5, 0x56, 0xd9, 0x85, 0x9e, 0x62, 0xa2, 0xb2, 0x81, 0x02, 0x25, 0x80,
	0x49, 0x8a, 0x48, 0x2f, 0xcb, 0x94, 0xae, 0x1e, 0x96, 0x00, 0xa5, 0xd8, 0x28, 0xf8, 0xa9, 0x76,
	0x25, 0x5c, 0x09, 0x00, 0x57, 0x42, 0x4d, 0x89, 0x3b, 0xd9, 0x22, 0x6e, 0x01, 0x78, 0x3b, 0xc9,
	0x2a, 0x3b, 0xf9, 0x88, 0xdd, 0xa2, 0x5f, 0x7e, 0xd2, 0x49, 0x79, 0xf2, 0x32, 0x03, 0x46, 0x81,
	0xe5, 0x3a, 0x8d, 0x5d, 0x2a, 0xe3, 0x28, 0xfe, 0x7b, 0x6c, 0x4b, 0x62, 0x40, 0x3a, 0xd2, 0xe9,
	0x50, 0x8d, 0xd0, 0x57, 0xb6, 0x9f, 0xbc, 0xde, 0xab, 0x6c, 0x50, 0xef, 0x63, 0x4f, 0x24, 0xac,
	0x3c, 0xe0, 0x15, 0x2b, 0x3b, 0x95, 0x62, 0xe5, 0x94, 0xdd, 0xc2, 0x6f, 0xf0, 0x1f, 0x75, 0xa9,
	0xcc, 0x37, 0x8e, 0xbe, 0xfc, 0xd4, 0x2a, 0xb7, 0xb1, 0xf7, 0xcd, 0x6e, 0x63, 0xa5, 0x13, 0xb8,
	0xf5, 0x22, 0x27, 0xf0, 0x3e, 0xbb, 0x25, 0xb0, 0xac, 0xf0, 0x13, 0x1c, 0xee, 0x87, 0xe0, 0x65,
	0xfe, 0x4a, 0x63, 0xb8, 0xfd, 0xd2, 0xc6, 0xd0, 0xf9, 0x93, 0x75, 0xb6, 0x55, 0xf9, 0x58, 0xce,
	0xd6, 0x2d, 0xe8, 0x01, 0x15, 0x30, 0xf8, 0x9b, 0x77, 0x9c, 0x6f, 0x5f, 0xab, 0x7c, 0x01, 0x62,
	0xa0, 0x3c, 0xe2, 0x4a, 0x58, 0x61, 0xce, 0x75, 0x96, 0xbb, 0x81, 0x02, 0x28, 0x12, 0x89, 0xf5,
	0x55, 0x89, 0x44, 0x13, 0xfe, 0x9e, 0x46, 0x2e, 0xcc, 0x97, 0x03, 0x17, 0x38, 0x06, 0x62, 0x2b,
	0xe6, 0x17, 0x6a, 0x92, 0x77, 0x37, 0x0a, 0x1a, 0x0c, 0x4f, 0xa4, 0x6a, 0x82, 0x59, 0xd6, 0x69,
	0xec, 0x74, 0xde, 0x87, 0xf8, 0x3d, 0xd6, 0x18, 0x88, 0x78, 0x24, 0x5d, 0x5a, 0x9f, 0x0f, 0x4f,
	0x20, 0xd4, 0x4c, 0xc3, 0x44, 0xde, 0xf4, 0xa5, 0xb5, 0x2a, 0x1d, 0x1d, 0x1a, 0x23, 0xe6, 0x41,
	0xeb, 0x7e, 0xfd, 0xa0, 0x1e, 0x2e, 0xe1, 0xa0, 0x01, 0xf9, 0x9c, 0x3e, 0xbb, 0x92, 0x26, 0x11,
	0xf3, 0x05, 0x2f, 0xbb, 0xc8, 0xe6, 0x8f, 0xd8, 0x36, 0x4c, 0x45, 0x58, 0x19, 0x3f, 0xc5, 0x39,
	0xb4, 0x2b, 0xf2, 0x55, 0x26, 0xb6, 0x38, 0x44, 0xd6, 0xbf, 0x96, 0x72, 0x7a, 0x86, 0xb9, 0x4a,
	0xde, 0xe2, 0xf0, 0x41, 0xc8, 0x66, 0x31, 0xcd, 0x5a, 0x9c, 0xf5, 0x36, 0xce, 0x7a, 0x25, 0x0f,
	0xac, 0x34, 0x42, 0x8d, 0x3e, 0xf4, 0xd6, 0x6a, 0x87, 0x9a, 0x38, 0x4b, 0x8c, 0xee, 0x29, 0xdb,
	0xc1, 0x6a, 0x56, 0x27, 0xff, 0x97, 0xca, 0x2f, 0xb3, 0xc2, 0xce, 0x32, 0x97, 0x09, 0x3a, 0xaa,
	0xfb, 0xeb, 0x1a, 0xdb, 0x3d, 0x11, 0x69, 0x16, 0x25, 0xb3, 0x41, 0x3e, 0xd8, 0x43, 0xac, 0xd1,
	0x26, 0x3a, 0xc5, 0x3c, 0x79, 0x61, 0x40, 0x8f, 0x55, 0x28, 0x21, 0x0d, 0x49, 0x4a, 0xf8, 0xf5,
	0x09, 0x40, 0xee, 0x9d, 0xd7, 0x97, 0xbc, 0x73, 0xf7, 0x5f, 0xd6, 0xd9, 0xc6, 0x51, 0x31, 0xd1,
	0x95, 0x4d, 0x9d, 0xa2, 0x75, 0xb3, 0xe6, 0xb7, 0x6e, 0xee, 0xb2, 0x0d, 0xa8, 0x9f, 0x8a, 0x8e,
	0x8e, 0xa3, 0xb0, 0xcc, 0x34, 0x52, 0x58, 0x89, 0x3a, 0xe9, 0x0a, 0xd5, 0x12, 0xc1, 0x96, 0x8f,
	0x4e, 0x15, 0xf8, 0xfa, 0x86, 0x6b, 0xf9, 0x10, 0x49, 0xfe, 0xbb, 0x3f, 0xd6, 0xd7, 0xcf, 0xb3,
	0x51, 0xe9, 0xbf, 0x1d, 0x80, 0x49, 0x2f, 0xba, 0xcb, 0x41, 0x5e, 0x91, 0x17, 0x34, 0x7f, 0xc8,
	0xda, 0xb1, 0xe7, 0x11, 0x9a, 0xbe, 0x2d, 0xf9, 0x1c, 0x18, 0x64, 0xa8, 0x93, 0xd8, 0xf3, 0xe3,
	0x05, 0x0d, 0x95, 0x38, 0x39, 0x8f, 0x93, 0x5c, 0x82, 0xdc, 0xf9, 0x02, 0x0a, 0xaa, 0x98, 0x57,
	0x80, 0x14, 0x4c, 0xa8, 0x38, 0xad, 0x82, 0x65, 0xe9, 0xb7, 0xe5, 0x97, 0x7e, 0x8f, 0xd8, 0xad,
	0x49, 0x36, 0x3a, 0x37, 0x3a, 0x92, 0x59, 0x76, 0xa2, 0x12, 0x2b, 0xcd, 0xef, 0xbb, 0xec, 0x77,
	0x99, 0xb1, 0x4a, 0xfa, 0x0b, 0xe7, 0xc4, 0x97, 0x19, 0xc5, 0x26, 0xef, 0x2e, 0x87, 0xe0, 0xd7,
	0xd8, 0x3a, 0xec, 0x8e, 0x73, 0xca, 0x0d, 0x6c, 0x4b, 0x85, 0x08, 0x81, 0x91, 0x57, 0xbf, 0xcf,
	0xf9, 0xe1, 0x7a, 0xb8, 0x84, 0x43, 0x31, 0x3d, 0xa5, 0x77, 0x1e, 0xda, 0xbe, 0x54, 0xb0, 0x9d,
	0xcf, 0x33, 0xf4, 0xbf, 0xf5, 0x70, 0x05, 0xa7, 0xfb, 0x17, 0x35, 0xb6, 0x8e, 0xcb, 0xbe, 0xdc,
	0x66, 0x7c, 0x8b, 0xed, 0xc4, 0x72, 0x28, 0x66, 0x89, 0x3d, 0x17, 0xd6, 0x4a, 0x93, 0xba, 0x7e,
	0xe3, 0x02, 0xca, 0xdf, 0x63, 0xdb, 0x0e, 0x39, 0xd1, 0x66, 0x22, 0xac, 0xab, 0x95, 0xda, 0xb8,
	0xb7, 0x04, 0x85, 0x55, 0x09, 0xde, 0x65, 0x1b, 0x53, 0x25, 0x23, 0x99, 0x05, 0xeb, 0xd8, 0x85,
	0x63, 0x28, 0x7b, 0x0e, 0x50, 0xe8, 0x38, 0xdd, 0xaf, 0xb6, 0xd9, 0x3a, 0x2c, 0x02, 0xdf, 0x61,
	0x6b, 0x2a, 0x76, 0xae, 0x7c, 0x4d, 0xa1, 0xae, 0xab, 0x18, 0x62, 0xa5, 0x6b, 0x7f, 0x22, 0xe1,
	0x99, 0xb0, 0xd3, 0x75, 0xa2, 0xc0, 0xc3, 0xea, 0xeb, 0x54, 0x9a, 0xcf, 0x29, 0x70, 0x93, 0xb2,
	0xfb, 0x10, 0xd6, 0x0e, 0xca, 0x26, 0xd2, 0xe5, 0x71, 0x44, 0x80, 0xa6, 0xc3, 0xbe, 0xf8, 0xf9,
	0x5b, 0x09, 0x2c, 0x58, 0xd0, 0xe6, 0x92, 0x05, 0x3d, 0x60, 0xdb, 0x89, 0x4a, 0x2f, 0x27, 0x2a,
	0x3a, 0x13, 0x73, 0x3d, 0xb3, 0x2e, 0x5f, 0xa9, 0x82, 0x30, 0xca, 0x50, 0xa5, 0x2a, 0x1b, 0xe3,
	0x28, 0xa4, 0xec, 0x1e, 0xc2, 0xef, 0xb3, 0x86, 0xbc, 0xb1, 0x46, 0x38, 0x3f, 0xcd, 0x50, 0x29,
	0x3e, 0x06, 0x24, 0x24, 0x06, 0x94, 0x0d, 0xf1, 0x3c, 0x15, 0x13, 0x15, 0x1d, 0xe9, 0x2b, 0x69,
	0x3e, 0x37, 0xca, 0x65, 0x2f, 0x8b, 0x30, 0x7f, 0xc6, 0xf6, 0x7c, 0xe8, 0x58, 0x45, 0xe0, 0xa0,
	0xeb, 0x98, 0x49, 0xc0, 0xb0, 0xbd, 0xe3, 0x05, 0x2e, 0x35, 0xd3, 0x97, 0x1e, 0x82, 0x34, 0x2f,
	0x11, 0x99, 0x3d, 0x57, 0xe9, 0x08, 0xa7, 0x4d, 0x8d, 0x9a, 0x0a, 0x06, 0x9b, 0x91, 0xa8, 0x2b,
	0x59, 0x78, 0x69, 0x47, 0x81, 0x4a, 0x65, 0xd6, 0x48, 0x31, 0x39, 0x37, 0xfa, 0x4a, 0xc5, 0xce,
	0x12, 0xea, 0xe1, 0x02, 0x8a, 0x9d, 0xe5, 0x0c, 0xed, 0x7b, 0xcf, 0x75, 0x96, 0xb3, 0xdc, 0xae,
	0xa3, 0x44, 0xc9, 0xd4, 0x7e, 0x21, 0x4d, 0x06, 0xa9, 0x1a, 0x99, 0x41, 0x15, 0x84, 0x2d, 0xbf,
	0x56, 0x76, 0x7c, 0x46, 0x6b, 0x8d, 0xca, 0xdf, 0x0c, 0x7d, 0x88, 0x7f, 0xc0, 0xee, 0xc8, 0x54,
	0x0c, 0x12, 0x09, 0x5f, 0x7e, 0x2e, 0x4d, 0x36, 0x95, 0x91, 0x55, 0x57, 0x12, 0x93, 0x8e, 0x66,
	0xb8, 0x9a, 0x09, 0xa1, 0x38, 0x82, 0x65, 0xc0, 0xce, 0x8b, 0x17, 0x8a, 0x11, 0xe4, 0x6f, 0xb3,
	0x2d, 0x7f, 0xad, 0x5c, 0xdb, 0x25, 0x17, 0xaa, 0xf0, 0x20, 0x14, 0xfb, 0xf4, 0x99, 0xbe, 0x0e,
	0xee, 0x56, 0x43, 0xf1, 0x02, 0xdb, 0x55, 0xf3, 0x46, 0x7e, 0x6e, 0x92, 0xe0, 0x55, 0x72, 0xad,
	0x39, 0x0d, 0x4a, 0x40, 0x7e, 0xa0, 0x8f, 0x15, 0x08, 0xb8, 0xd7, 0x80, 0x94, 0x60, 0x01, 0x86,
	0xf5, 0x03, 0x1d, 0x2e, 0xe5, 0x5e, 0x43, 0xb9, 0x2a, 0x48, 0x09, 0x0b, 0xec, 0xc7, 0x69, 0x1c,
	0x74, 0x5c, 0xf3, 0xcb, 0xd1, 0xae, 0xa2, 0xc7, 0xdf, 0x60, 0x82, 0xaf, 0x17, 0x35, 0x7f, 0x0e,
	0xf1, 0x03, 0xd6, 0x22, 0x12, 0xa6, 0x7a, 0xcf, 0x29, 0x6e, 0x3f, 0x47, 0xc2, 0x92, 0x09, 0x9a,
	0x34, 0xd1, 0x99, 0x50, 0x51, 0x9f, 0x0c, 0xf7, 0x5b, 0xa4, 0x49, 0x3e, 0x06, 0x66, 0x48, 0xf4,
	0x85, 0x9a, 0x06, 0xfb, 0xf8, 0xb6, 0x12, 0x00, 0x6e, 0x24, 0x93, 0xa4, 0x6f, 0xe7, 0x89, 0x0c,
	0xde, 0x20, 0x23, 0x2d, 0x00, 0xde, 0x65, 0x9b, 0x60, 0x6f, 0xcf, 0x55, 0x14, 0xdc, 0xc7, 0x79,
	0x34, 0x7b, 0x67, 0x44, 0x87, 0x39, 0x03, 0x0d, 0x75, 0x16, 0x5d, 0xce, 0x27, 0x3a, 0x95, 0xf3,
	0x4f, 0x67, 0x93, 0xe0, 0x4d, 0x67, 0xa8, 0x3e, 0xc8, 0x1f, 0x42, 0x60, 0x8b, 0xf4, 0x99, 0xca,
	0x6c, 0xd0, 0x45, 0xa3, 0x69, 0xf7, 0x8e, 0x65, 0xa4, 0xa9, 0xa1, 0x13, 0x16, 0x4c, 0xfe, 0x26,
	0xdb, 0xb4, 0x7a, 0x0a, 0x29, 0x43, 0xf0, 0x6d, 0x94, 0xdb, 0xec, 0x5d, 0x20, 0x1d, 0xe6, 0x38,
	0x18, 0x35, 0xb8, 0xa6, 0x2c, 0x78, 0xe0, 0x19, 0x35, 0x7c, 0x6d, 0x16, 0x12, 0x03, 0xea, 0xf5,
	0x6c, 0x96, 0x1e, 0x0b, 0x95, 0xcc, 0x21, 0x1b, 0x3b, 0x72, 0x09, 0xc3, 0x77, 0xa8, 0x5e, 0x5f,
	0xc1, 0xc2, 0xc0, 0xab, 0x32, 0x2b, 0xd2, 0x48, 0x06, 0x6f, 0xb9, 0xc0, 0xeb, 0x68, 0x58, 0xe5,
	0xfc, 0xf7, 0x91, 0xb2, 0xf3, 0xe0, 0x21, 0xb5, 0xca, 0x7d, 0x0c, 0x9e, 0x4f, 0x74, 0x44, 0xdd,
	0xaa, 0x03, 0x7a, 0x3e, 0xa7, 0xe1, 0x79, 0x23, 0x45, 0x72, 0x9c, 0x8f, 0xff, 0x5d, 0x7a, 0xde,
	0xc7, 0x20, 0x51, 0x1c, 0x4a, 0x19, 0xc3, 0x97, 0x9c, 0x89, 0x81, 0x4c, 0x82, 0xb7, 0xab, 0x89,
	0x62, 0x85, 0x09, 0xfa, 0x4a, 0x69, 0x12, 0x92, 0xb8, 0xa8, 0xef, 0x90, 0xbe, 0x2e, 0xc0, 0xfc,
	0x07, 0x6c, 0x37, 0x51, 0x57, 0x2a, 0x1d, 0xc1, 0xc3, 0x87, 0xd6, 0x9a, 0x2c, 0x78, 0xe4, 0xba,
	0x99, 0xf9, 0xb1, 0x0d, 0xa0, 0xe1, 0xa2, 0x14, 0x4c, 0x5a, 0x40, 0xc1, 0x49, 0x2e, 0x3e, 0x0b,
	0xfe, 0x1f, 0x66, 0x97, 0x15, 0x8c, 0xbf, 0xce, 0x1a, 0x18, 0x06, 0x82, 0x9e, 0x1f, 0x8d, 0x09,
	0x03, 0x3d, 0x9f, 0x1a, 0x75, 0x25, 0xac, 0xc4, 0x34, 0xef, 0x5d, 0xd2, 0x73, 0x0f, 0xea, 0x1c,
	0xb1, 0x3b, 0x2b, 0x5d, 0xa6, 0x1f, 0x49, 0xeb, 0x2f, 0x3a, 0xb0, 0x6b, 0xb3, 0x56, 0xe1, 0xd3,
	0x73, 0x02, 0x75, 0xa1, 0xbb, 0xc3, 0xb6, 0xfc, 0x4f, 0x04, 0x66, 0x61, 0x44, 0xdd, 0x16, 0xdb,
	0x74, 0x9a, 0xdc, 0xdd, 0x62, 0xac, 0xd4, 0xc4, 0x6e, 0x93, 0x6d, 0x90, 0xbe, 0x75, 0xff, 0x78,
	0x9f, 0xad, 0x63, 0x51, 0xbd, 0x18, 0x3e, 0x03, 0xb6, 0x99, 0x8d, 0xb5, 0x29, 0x8f, 0x39, 0x72,
	0x12, 0xb4, 0x20, 0x55, 0xd1, 0x65, 0x2a, 0x26, 0xd2, 0x65, 0xa7, 0x05, 0x8d, 0x67, 0x23, 0x65,
	0x5b, 0xaa, 0x11, 0x3a, 0x0a, 0x1b, 0x28, 0x6a, 0x94, 0x0a, 0x3b, 0x33, 0x79, 0x00, 0x2d, 0x01,
	0xcc, 0xb0, 0xe4, 0x95, 0x4c, 0x5c, 0xdd, 0x43, 0x04, 0xbc, 0x67, 0xa0, 0x8c, 0x1d, 0xc7, 0x62,
	0xee, 0x42, 0x67, 0x41, 0x63, 0x91, 0x2f, 0x13, 0x39, 0x1d, 0xeb, 0x54, 0xba, 0x63, 0xb2, 0x12,
	0xe0, 0x07, 0xac, 0x4d, 0x65, 0xd9, 0xc5, 0x78, 0x36, 0x19, 0xb8, 0xe6, 0x52, 0xae, 0x65, 0x3e,
	0x0b, 0xbc, 0x31, 0x91, 0xcf, 0x65, 0xac, 0x66, 0x93, 0x85, 0x4a, 0xa7, 0xc2, 0x2b, 0x47, 0x3d,
	0x13, 0x66, 0xa9, 0xc8, 0xf1, 0x59, 0x30, 0xf3, 0x2b, 0x69, 0xd4, 0x50, 0xc9, 0xd8, 0x55, 0x37,
	0x05, 0x0d, 0xc1, 0x5c, 0xde, 0x4c, 0xa5, 0x51, 0x12, 0xac, 0x64, 0x1b, 0x3f, 0xd8, 0x43, 0xa0,
	0x1c, 0x88, 0xf2, 0x23, 0x8b, 0x56, 0x88, 0xbf, 0xbd, 0xa4, 0x65, 0xd7, 0xaf, 0x3b, 0x16, 0xd2,
	0x8b, 0xbd, 0xa5, 0xf4, 0x62, 0x9f, 0xb1, 0x89, 0x8e, 0xd5, 0x90, 0x8a, 0x4a, 0x0a, 0x82, 0x1e,
	0x82, 0xe3, 0xca, 0xc8, 0x48, 0xaa, 0xbc, 0x61, 0x5c, 0xa4, 0x30, 0xfe, 0x82, 0x9b, 0xff, 0x99,
	0x89, 0x74, 0x2c, 0x21, 0x5b, 0xb8, 0x4d, 0x29, 0x5d, 0x15, 0x85, 0x2c, 0x92, 0x4e, 0x69, 0x30,
	0x28, 0x9c, 0x4b, 0x03, 0x55, 0x16, 0x86, 0xbd, 0x46, 0xb8, 0x82, 0xc3, 0x7b, 0x6c, 0x07, 0xeb,
	0x51, 0x5c, 0x32, 0x34, 0xe8, 0x6a, 0xf4, 0x5b, 0xe0, 0xf2, 0xc7, 0x8c, 0x51, 0x2f, 0x0c, 0x8d,
	0x8b, 0x42, 0xdf, 0x1e, 0xda, 0x5f, 0xef, 0xa4, 0xc0, 0x43, 0x4f, 0x86, 0xbf, 0xcd, 0x9a, 0x53,
	0x31, 0x7f, 0x66, 0x44, 0x2c, 0x31, 0xfe, 0xb5, 0x9f, 0xec, 0x90, 0xfc, 0xb9, 0x43, 0xc3, 0x82,
	0x0f, 0xb2, 0x43, 0x91, 0x66, 0x47, 0xc9, 0x6c, 0xe0, 0xce, 0x31, 0x9c, 0xec, 0x89, 0x43, 0xc3,
	0x82, 0xcf, 0x1f, 0xb0, 0x8d, 0x81, 0x36, 0xa0, 0xd7, 0xaf, 0xa1, 0xe4, 0x16, 0x49, 0x3e, 0x45,
	0x2c, 0x74, 0x3c, 0xd4, 0xf2, 0xa9, 0x8c, 0x94, 0x48, 0x5c, 0x48, 0x04, 0x2d, 0xcf, 0x81, 0x52,
	0xd7, 0xe8, 0x29, 0x0c, 0x8a, 0x4b, 0xba, 0xf6, 0x34, 0x1f, 0xa9, 0x31, 0x91, 0xb1, 0xc8, 0x23,
	0x63, 0x91, 0x43, 0x20, 0x08, 0x7e, 0x14, 0xfc, 0x2a, 0xec, 0x21, 0xb8, 0x77, 0x08, 0x89, 0x75,
	0xdf, 0x8f, 0x56, 0x98, 0xfc, 0x09, 0xdb, 0x4b, 0xe5, 0x75, 0x58, 0x79, 0x60, 0xbf, 0xf2, 0xc0,
	0x12, 0x9f, 0x4e, 0x99, 0xa7, 0x5f, 0xa8, 0xe9, 0xa7, 0xda, 0x05, 0xcc, 0x82, 0x86, 0x75, 0x9b,
	0x39, 0x77, 0xe3, 0x02, 0xa6, 0x5b, 0xb7, 0xc2, 0xcf, 0x16, 0x7c, 0xfe, 0x90, 0x6d, 0xea, 0xeb,
	0x14, 0x3c, 0x14, 0x46, 0x4c, 0xf0, 0xc8, 0x28, 0xfa, 0x19, 0x81, 0x61, 0xce, 0x85, 0x17, 0x4e,
	0x85, 0xab, 0xc2, 0xba, 0xf4, 0xc2, 0x9c, 0x06, 0x27, 0x6b, 0xbd, 0x23, 0xbf, 0x6f, 0x53, 0x6e,
	0xee, 0x41, 0xa0, 0x28, 0x94, 0xc3, 0xa0, 0xa2, 0x3c, 0xf0, 0x15, 0xe5, 0xb0, 0xc0, 0x43, 0x4f,
	0x06, 0xd3, 0x53, 0x72, 0x8d, 0xe8, 0x47, 0x31, 0x6a, 0x36, 0xc2, 0x0a, 0x06, 0xdb, 0xe9, 0x2a,
	0xce, 0xd3, 0xd8, 0xc5, 0xcb, 0x12, 0xe0, 0xaf, 0xb2, 0xcd, 0x4c, 0x46, 0x3f, 0x9f, 0xa9, 0x18,
	0x23, 0x43, 0x0b, 0xad, 0xe7, 0x73, 0x15, 0xf3, 0xd7, 0xa9, 0x24, 0xf8, 0xb9, 0xd1, 0x89, 0xc4,
	0x88, 0xd0, 0xa0, 0x05, 0x09, 0x75, 0x22, 0x3b, 0x8c, 0x35, 0xf3, 0x65, 0xea, 0xb4, 0xd8, 0xa6,
	0x5b, 0x87, 0xce, 0x16, 0x63, 0xe5, 0x44, 0x3b, 0xff, 0x50, 0x63, 0xac, 0x54, 0x70, 0x3c, 0x58,
	0x46, 0x4a, 0xa5, 0x23, 0x5a, 0x82, 0x9a, 0x3b, 0x58, 0xae, 0xa0, 0x78, 0xf5, 0x06, 0x91, 0xbc,
	0x1e, 0x59, 0x73, 0x57, 0x6f, 0x7c, 0x10, 0xbe, 0x9c, 0x80, 0xbe, 0x5f, 0x07, 0x55, 0xb0, 0xe2,
	0x1a, 0x0b, 0x49, 0xb8, 0xca, 0xbf, 0x44, 0x80, 0x6f, 0xe4, 0x44, 0x98, 0xcb, 0x4f, 0x21, 0x08,
	0x90, 0x3f, 0xf7, 0x90, 0xce, 0x7f, 0xaf, 0xb3, 0x66, 0x6e, 0x45, 0xfc, 0x5d, 0xb6, 0x1e, 0x0b,
	0x2b, 0x5c, 0x0f, 0xe4, 0xf5, 0xaa, 0x8d, 0x15, 0x3f, 0x8e, 0x85, 0x15, 0x21, 0x0a, 0xf2, 0x9f,
	0x30, 0x36, 0x35, 0x72, 0x28, 0x0d, 0x60, 0xee, 0x96, 0xc7, 0xfe, 0xc2, 0x63, 0xe7, 0x85, 0x00,
	0x15, 0x20, 0xde, 0x13, 0x9d, 0x3f, 0x60, 0xbb, 0x0b, 0x6c, 0x3f, 0xd8, 0x36, 0x28, 0xd8, 0xbe,
	0xe7, 0x07, 0xdb, 0x17, 0x4c, 0xab, 0x8c, 0xc4, 0x9d, 0xbf, 0xa9, 0xb3, 0x2d, 0x9f, 0x07, 0x8a,
	0x1b, 0x25, 0xb3, 0x01, 0x2e, 0x04, 0x55, 0xc5, 0x05, 0x5d, 0xc6, 0xb5, 0x35, 0x3f, 0xae, 0xf5,
	0x18, 0x07, 0x75, 0xc8, 0x47, 0xf1, 0xb6, 0xa1, 0x11, 0xae, 0xe0, 0xf0, 0x1f, 0xe7, 0xad, 0x3d,
	0xea, 0xf9, 0x7c, 0xe7, 0x1b, 0x66, 0x8a, 0x2c, 0x6c, 0xb3, 0x79, 0x9d, 0x3f, 0x71, 0x25, 0x54,
	0x02, 0x85, 0x0a, 0x9e, 0x7e, 0xc7, 0x74, 0xa5, 0xa5, 0x1e, 0x2e, 0xe1, 0xf0, 0x29, 0xce, 0x42,
	0x62, 0x57, 0xca, 0x16, 0x74, 0xe7, 0x6f, 0x6b, 0xac, 0x55, 0x0c, 0xce, 0x4f, 0x58, 0x43, 0xa1,
	0x1f, 0xa1, 0xfb, 0x61, 0x8f, 0x5f, 0x6a, 0x4a, 0x3d, 0x74, 0x2d, 0xb4, 0x5d, 0xf4, 0x78, 0x59,
	0x53, 0xaf, 0x79, 0x35, 0x75, 0xe7, 0xa7, 0x8c, 0x95, 0xa2, 0x2b, 0xb6, 0xee, 0x5e, 0x75, 0xeb,
	0x0a, 0xe7, 0x58, 0xee, 0x52, 0x93, 0x6d, 0x90, 0x23, 0xed, 0xfc, 0xd1, 0x1a, 0xdb, 0x46, 0x77,
	0xff, 0x74, 0x36, 0x1c, 0xa2, 0x35, 0xdd, 0x63, 0xad, 0xc1, 0x6c, 0x38, 0x3c, 0xc3, 0x8d, 0x21,
	0x43, 0x2a, 0x81, 0xaf, 0x6b, 0xf1, 0x41, 0x3a, 0x24, 0xd3, 0x18, 0xe3, 0x28, 0x19, 0x4c, 0x4e,
	0xf2, 0x9f, 0x42, 0x21, 0x23, 0x6c, 0x86, 0xae, 0x87, 0xfa, 0x14, 0x5d, 0x5a, 0x8f, 0xca, 0x7b,
	0x7b, 0xfd, 0x5c, 0x88, 0x56, 0xa0, 0x7c, 0x88, 0x3f, 0xa0, 0x19, 0x51, 0xef, 0xb4, 0xda, 0x1e,
	0x2e, 0x19, 0x9d, 0x8f, 0xd8, 0x4e, 0x75, 0x88, 0x17, 0x65, 0x90, 0x75, 0x7f, 0x45, 0x7e, 0xcb,
	0x58, 0x33, 0x8f, 0x81, 0xfc, 0x11, 0xbb, 0x85, 0x27, 0x9f, 0xc7, 0x4a, 0x4c, 0x74, 0x1a, 0xfb,
	0x3e, 0x65, 0x99, 0x01, 0x79, 0x4f, 0x4c, 0xf4, 0xe9, 0x72, 0x63, 0xdc, 0x67, 0x41, 0xee, 0xe2,
	0x65, 0x85, 0xf8, 0xbb, 0xe8, 0xa7, 0xaf, 0xaf, 0xe8, 0xa7, 0x43, 0x26, 0x29, 0x6f, 0xac, 0xe7,
	0x44, 0x0a, 0xba, 0x9a, 0x13, 0xd6, 0x73, 0xdb, 0xe9, 0xd2, 0x13, 0x38, 0x91, 0xea, 0x41, 0x63,
	0x81, 0x43, 0xb8, 0x80, 0xdf, 0xee, 0x1b, 0x5c, 0x4b, 0xc5, 0x87, 0xc0, 0x7d, 0xa5, 0xfa, 0x3a,
	0x17, 0x70, 0x0d, 0x95, 0x12, 0x81, 0xca, 0xca, 0x8e, 0x55, 0x86, 0x8b, 0xf5, 0x5c, 0xa5, 0xb9,
	0x20, 0x35, 0x11, 0x57, 0xb1, 0xaa, 0x4f, 0x88, 0x9b, 0xfc, 0x89, 0xf6, 0xe2, 0x13, 0x05, 0x0b,
	0x7b, 0x8f, 0x62, 0xee, 0xa8, 0xa7, 0xe2, 0xd2, 0x9d, 0x15, 0x55, 0x41, 0x90, 0x1a, 0xc1, 0x83,
	0xc7, 0x79, 0xbf, 0x94, 0x3a, 0x8c, 0x55, 0x90, 0xff, 0xc4, 0x49, 0xc1, 0xe7, 0x63, 0x5a, 0xb5,
	0x83, 0x6a, 0x18, 0x54, 0x53, 0x1f, 0xd2, 0x47, 0x90, 0x09, 0xab, 0xe2, 0x98, 0xef, 0xe1, 0xd1,
	0xee, 0xd1, 0x58, 0x58, 0xec, 0xa7, 0xe4, 0xfd, 0x96, 0x0a, 0xca, 0xf7, 0xd9, 0x86, 0x9a, 0xe0,
	0xda, 0x57, 0xcf, 0x84, 0x1c, 0xca, 0x1f, 0xb3, 0x5d, 0xfa, 0xf5, 0xa5, 0xb2, 0x63, 0x32, 0xb0,
	0xea, 0x41, 0xd0, 0x22, 0x1b, 0xf6, 0x13, 0x7b, 0x3e, 0x51, 0x71, 0x39, 0xa6, 0xd8, 0xcf, 0x1c,
	0xe7, 0xdf, 0x67, 0x3c, 0x95, 0xd7, 0xa7, 0x0b, 0x03, 0xdf, 0xae, 0x48, 0xaf, 0x90, 0x00, 0xbd,
	0x4d, 0xe5, 0xf5, 0x59, 0x3e, 0x7c, 0xb5, 0x1b, 0xe3, 0xb3, 0xd0, 0x23, 0x4f, 0x71, 0x49, 0x3e,
	0x95, 0x32, 0x3e, 0xd2, 0x69, 0x36, 0x9b, 0x48, 0xcc, 0x4d, 0xeb, 0xe1, 0x0a, 0x0e, 0xac, 0x17,
	0xa8, 0xd3, 0xb9, 0x51, 0x57, 0x2a, 0x91, 0x23, 0x99, 0x61, 0x6e, 0xda, 0x0a, 0x17, 0xd0, 0x85,
	0xbb, 0x21, 0xaf, 0x7e, 0xed, 0xdd, 0x10, 0xcc, 0x8b, 0x73, 0xea, 0xa9, 0x88, 0x2e, 0x5d, 0x3e,
	0xea, 0xe5, 0xc5, 0x3e, 0xb7, 0xbc, 0x79, 0xf7, 0x9a, 0x7f, 0xf3, 0xee, 0x5d, 0xd6, 0x1c, 0x38,
	0x67, 0x83, 0xc9, 0x67, 0xfb, 0xc9, 0xed, 0x15, 0x7e, 0x28, 0x2c, 0x84, 0xf8, 0x9b, 0xac, 0x8d,
	0x9f, 0xf6, 0x54, 0xa4, 0x50, 0xdf, 0xfe, 0x1b, 0xf5, 0xe2, 0x7d, 0x8c, 0xbf, 0xc7, 0x76, 0xa7,
	0x46, 0x0f, 0x55, 0x22, 0x8f, 0x95, 0x48, 0xf4, 0xe8, 0xe9, 0x28, 0xf8, 0xf7, 0xaa, 0xdd, 0x2d,
	0xf2, 0xf9, 0x8f, 0xd8, 0xed, 0x05, 0x08, 0xbf, 0xe8, 0x3f, 0xaa, 0x8f, 0xad, 0x92, 0xe9, 0xfc,
	0x8a, 0xb5, 0x0a, 0x1d, 0x2d, 0x1c, 0x47, 0x6d, 0x85, 0xe3, 0xb8, 0xcf, 0xda, 0xf0, 0x37, 0x37,
	0x33, 0xf2, 0x76, 0x3e, 0x54, 0xba, 0x8f, 0xba, 0xef, 0x3e, 0x3a, 0xac, 0x89, 0x3f, 0xca, 0xfb,
	0x9e, 0x05, 0xdd, 0xfd, 0x9f, 0x1a, 0xdd, 0x4d, 0x72, 0xbd, 0xe7, 0xe2, 0x52, 0x08, 0x05, 0x75,
	0x77, 0x29, 0x84, 0xb3, 0xf5, 0x81, 0x4e, 0xe8, 0x8d, 0xcd, 0x10, 0x7f, 0x43, 0xc8, 0x50, 0x56,
	0x24, 0x2a, 0xc2, 0x77, 0x35, 0x43, 0x47, 0x01, 0x7e, 0x4d, 0xb7, 0x71, 0x5c, 0x2d, 0x4c, 0x14,
	0x4e, 0x1e, 0x25, 0x0e, 0xd3, 0x91, 0x6b, 0x27, 0x37, 0x42, 0x1f, 0xa2, 0xb3, 0x0d, 0x77, 0xe7,
	0xc8, 0x1d, 0x05, 0xe6, 0x34, 0x7f, 0xc2, 0x5e, 0x81, 0x1c, 0xe1, 0x13, 0x1c, 0x0b, 0xcf, 0xca,
	0xe8, 0x9a, 0xc6, 0x26, 0xbe, 0x7b, 0x25, 0xcf, 0xf5, 0xf3, 0x42, 0x39, 0xd1, 0x56, 0x1e, 0x81,
	0x70, 0x93, 0x8e, 0xdc, 0x2a, 0x60, 0xf7, 0xcf, 0x6b, 0xac, 0x55, 0xf4, 0xd7, 0x2b, 0x67, 0xa3,
	0xf9, 0xb1, 0xd4, 0xb7, 0xd9, 0xc6, 0x90, 0x7a, 0xf7, 0x6b, 0xcb, 0xbd, 0x7b, 0xc7, 0x72, 0xad,
	0x3f, 0x95, 0x8e, 0xbe, 0xc0, 0x48, 0xd4, 0x2e, 0x5a, 0x7f, 0x39, 0xc4, 0x1f, 0x51, 0x82, 0x4c,
	0xfc, 0x3b, 0xae, 0x82, 0x28, 0xde, 0x8c, 0xed, 0x95, 0x52, 0xa0, 0xfb, 0x87, 0x75, 0xd6, 0xa0,
	0x93, 0xe6, 0x80, 0x6d, 0xce, 0x0c, 0x35, 0x82, 0x20, 0xef, 0x68, 0x85, 0x39, 0x09, 0x91, 0x70,
	0x66, 0x94, 0xcb, 0x22, 0xe0, 0xa7, 0x77, 0x15, 0xca, 0xf5, 0xf9, 0xdd, 0x55, 0xa8, 0xe2, 0xe2,
	0x94, 0xbb, 0xeb, 0x43, 0x17, 0xa7, 0x20, 0xf3, 0xb9, 0x1a, 0xd1, 0x42, 0xba, 0x40, 0x94, 0xd3,
	0x78, 0x96, 0x05, 0xaf, 0xf7, 0xaf, 0x9d, 0x17, 0x00, 0x84, 0x12, 0x3d, 0x95, 0xe9, 0x97, 0x72,
	0xf0, 0xb9, 0x49, 0xdc, 0x69, 0x96, 0x87, 0xf0, 0x83, 0xf2, 0x24, 0xaf, 0xe9, 0xbe, 0x14, 0x3f,
	0xa6, 0xe7, 0x7a, 0x72, 0xe5, 0xc9, 0xde, 0x3e, 0x63, 0x2a, 0x3b, 0x74, 0x47, 0xa5, 0xee, 0x5e,
	0xb9, 0x87, 0x74, 0x7e, 0xc5, 0x36, 0xf3, 0x3e, 0x5e, 0x1e, 0x67, 0x6b, 0x5e, 0x9c, 0xbd, 0xc7,
	0x5a, 0xa0, 0x23, 0xf4, 0x0d, 0xb4, 0x10, 0x25, 0xf0, 0x35, 0xe6, 0x70, 0xc0, 0x76, 0x45, 0x82,
	0x17, 0xec, 0xad, 0xba, 0xa2, 0x4e, 0xef, 0xba, 0xeb, 0x08, 0x57, 0xe1, 0xee, 0x27, 0x6c, 0xbb,
	0xb2, 0x41, 0xc5, 0x11, 0x55, 0x6d, 0xe5, 0x65, 0x99, 0x6b, 0x65, 0xc7, 0xf0, 0xe2, 0xd4, 0x19,
	0x4a, 0x09, 0x74, 0xff, 0xaa, 0xc6, 0xf6, 0xce, 0x57, 0xdc, 0xe9, 0x81, 0x47, 0xa9, 0x29, 0x58,
	0x35, 0xf8, 0x92, 0x01, 0x69, 0x0b, 0x1d, 0xad, 0xa0, 0x17, 0x3e, 0xa5, 0xb2, 0x92, 0x6c, 0x7f,
	0x99, 0xc1, 0x3f, 0x60, 0x77, 0xb0, 0x5f, 0x2d, 0xd3, 0x18, 0x12, 0xdc, 0xa3, 0xd4, 0xba, 0x27,
	0x68, 0x09, 0x56, 0x33, 0xbb, 0xbf, 0x64, 0x3b, 0xd5, 0x4b, 0xa2, 0xb0, 0x2f, 0xbf, 0x98, 0xc9,
	0x99, 0x04, 0xeb, 0xa3, 0x84, 0xb7, 0x1e, 0x7a, 0x08, 0xcc, 0x2a, 0x93, 0xc9, 0xf0, 0x67, 0x80,
	0xe4, 0x0f, 0xe5, 0xb3, 0x5a, 0x62, 0x60, 0x9d, 0x9b, 0x0b, 0xd5, 0x5d, 0x9d, 0xeb, 0xe8, 0xee,
	0x9f, 0xad, 0xb1, 0x2d, 0xff, 0xf6, 0xe5, 0xaa, 0x3b, 0xa0, 0xb5, 0x6f, 0xbc, 0x03, 0x7a, 0xc0,
	0xda, 0x00, 0x3d, 0x15, 0x99, 0x3c, 0x9d, 0x8c, 0x16, 0x53, 0x35, 0x8f, 0x95, 0x4b, 0x7e, 0x22,
	0x45, 0x0c, 0x92, 0xf5, 0x65, 0x49, 0xc7, 0xe2, 0x6f, 0xb3, 0x2d, 0x20, 0x43, 0x30, 0x1f, 0x10,
	0xad, 0x26, 0x72, 0x15, 0x1e, 0xb6, 0xe5, 0x8c, 0x98, 0x53, 0x84, 0x6e, 0xb8, 0xbb, 0x37, 0x39,
	0x00, 0x61, 0x0e, 0x27, 0x4c, 0xed, 0x50, 0x18, 0x6b, 0xa3, 0x1a, 0xe6, 0xaa, 0xdc, 0xee, 0x7f,
	0xdd, 0x62, 0xac, 0xbc, 0x88, 0x0b, 0x69, 0x3f, 0xda, 0xdd, 0x82, 0x82, 0x10, 0x58, 0x39, 0x54,
	0x5e, 0x5b, 0x38, 0x54, 0xbe, 0xcb, 0x36, 0x52, 0x6d, 0xd5, 0x70, 0x9e, 0x7b, 0x68, 0xa2, 0x2a,
	0xb7, 0x2f, 0xc9, 0x1f, 0x94, 0xb7, 0x2f, 0xa9, 0x1f, 0xda, 0x28, 0xfa, 0xa1, 0x27, 0x6c, 0x6b,
	0xe8, 0x8e, 0xf8, 0x31, 0xc2, 0xd2, 0xd4, 0xbb, 0xde, 0x4d, 0x61, 0xef, 0x67, 0x5e, 0x00, 0x61,
	0xc0, 0xad, 0x3c, 0x87, 0x87, 0x79, 0xda, 0xe4, 0x87, 0x4e, 0xe4, 0xb5, 0x3d, 0x04, 0xe6, 0x1a,
	0x6b, 0x1d, 0x27, 0xd2, 0x39, 0x69, 0x47, 0xd1, 0x55, 0x31, 0x93, 0xdf, 0x32, 0x70, 0xfe, 0xc1,
	0x87, 0x28, 0x62, 0x4d, 0x06, 0x1a, 0xf3, 0xd4, 0x66, 0x48, 0x44, 0xe1, 0xc7, 0xdb, 0x9e, 0x1f,
	0xc7, 0x5e, 0xbf, 0x97, 0xfa, 0xbb, 0x7b, 0x9d, 0x3e, 0x86, 0xbd, 0xbd, 0xcc, 0xe9, 0x96, 0x8c,
	0x3f, 0x4b, 0xcf, 0x45, 0x2a, 0x13, 0xd7, 0xaf, 0x5c, 0xc1, 0x01, 0x5f, 0x32, 0x35, 0x6a, 0x22,
	0x8c, 0xbb, 0x5c, 0x5c, 0x1c, 0xea, 0x2d, 0xc2, 0xfc, 0x11, 0xdb, 0x1e, 0xa9, 0xa1, 0x45, 0x9b,
	0xc6, 0xcc, 0x6c, 0xb7, 0x7a, 0x0a, 0x50, 0x61, 0x16, 0xbe, 0x6e, 0xcf, 0xf3, 0x75, 0x77, 0xd9,
	0x86, 0x91, 0xa3, 0xfc, 0x60, 0xaf, 0x15, 0x3a, 0x0a, 0xaf, 0x3d, 0x88, 0x74, 0x26, 0x12, 0xcc,
	0x25, 0x5b, 0xa1, 0xa3, 0xc8, 0x37, 0x9a, 0xa3, 0x59, 0x66, 0xf5, 0xc4, 0x9d, 0xdd, 0x95, 0x00,
	0x7f, 0xc6, 0x76, 0x5c, 0x93, 0xae, 0xbc, 0x32, 0x4d, 0xff, 0xf3, 0xe1, 0xed, 0x6d, 0xbf, 0x22,
	0x41, 0x25, 0xdc, 0xc2, 0x63, 0x45, 0xc6, 0x72, 0x67, 0x45, 0xc6, 0xb2, 0xcf, 0x18, 0x5d, 0x14,
	0xc3, 0x30, 0x72, 0x97, 0xda, 0xbe, 0x25, 0x02, 0xcb, 0x77, 0x2d, 0xac, 0x34, 0x13, 0x99, 0xe8,
	0xb4, 0x2f, 0x65, 0x9c, 0x61, 0xbe, 0xd8, 0x08, 0x17, 0x61, 0xfc, 0xf7, 0x01, 0x9d, 0xc4, 0xee,
	0x12, 0x3e, 0x9d, 0xe0, 0x79, 0x08, 0x7f, 0xc8, 0xd6, 0xb3, 0xd9, 0x20, 0x0b, 0x5e, 0xc3, 0x8f,
	0xb8, 0xdd, 0x3b, 0x9b, 0x45, 0x97, 0xf3, 0xe7, 0x3a, 0x95, 0x73, 0xba, 0x1d, 0x6d, 0x45, 0x88,
	0x02, 0xa0, 0x51, 0xf0, 0x98, 0x4c, 0x9f, 0x4a, 0x91, 0x66, 0xee, 0x08, 0xcf, 0x87, 0xe0, 0x55,
	0x63, 0x9d, 0x6a, 0x43, 0xf6, 0xfc, 0x3a, 0xd5, 0x49, 0x25, 0x82, 0xff, 0xa6, 0x61, 0xe5, 0x04,
	0x3f, 0xe9, 0x1e, 0xe5, 0x29, 0x39, 0x8d, 0xbd, 0xd0, 0x68, 0x2c, 0x27, 0x78, 0x14, 0xf9, 0x2d,
	0xd7, 0x0b, 0xcd, 0x01, 0xfe, 0x23, 0xd2, 0x81, 0xcf, 0xf0, 0x52, 0x20, 0x6c, 0xe4, 0xbe, 0x4b,
	0x58, 0x61, 0x8e, 0xa8, 0x50, 0x05, 0x2b, 0xac, 0x4a, 0xe2, 0x0d, 0xbe, 0x2b, 0x99, 0x52, 0xd5,
	0xf8, 0x06, 0x0d, 0x5c, 0x00, 0x54, 0xda, 0x0d, 0x12, 0x49, 0x53, 0xbe, 0x9f, 0x97, 0x76, 0x39,
	0x02, 0x53, 0x1e, 0xcd, 0x54, 0x8c, 0xb3, 0x7a, 0x93, 0xdc, 0x44, 0x4e, 0x43, 0x5a, 0x3f, 0x9d,
	0xa5, 0x2a, 0x1b, 0x3f, 0x97, 0xb1, 0x8a, 0x54, 0x4a, 0x9d, 0xc8, 0x66, 0xb8, 0x80, 0x3a, 0x75,
	0x3a, 0xd7, 0xc6, 0x8a, 0x04, 0xbb, 0x91, 0xa4, 0x4e, 0x04, 0x80, 0x71, 0x0d, 0x66, 0x99, 0x4a,
	0x65, 0x96, 0xa1, 0xc7, 0x7e, 0x40, 0x07, 0x61, 0x3e, 0x86, 0xf7, 0x7b, 0x52, 0xdc, 0x0f, 0x6c,
	0x3c, 0x36, 0xc3, 0x9c, 0x04, 0x23, 0x16, 0xd3, 0xa9, 0xeb, 0x37, 0xd6, 0x43, 0x22, 0xf0, 0x40,
	0x41, 0x4d, 0xe9, 0x9b, 0x1e, 0x92, 0xa3, 0xca, 0x69, 0x4c, 0x3f, 0xa1, 0xba, 0x9c, 0xe3, 0x91,
	0x1c, 0xa4, 0x9f, 0x48, 0xb9, 0xd2, 0x71, 0xde, 0x2f, 0x36, 0xe1, 0xbb, 0x45, 0xe9, 0x58, 0x82,
	0xf0, 0x2d, 0xb0, 0xbc, 0xfd, 0x48, 0xa6, 0x12, 0x8f, 0xe3, 0xea, 0x61, 0x09, 0xf0, 0x77, 0x18,
	0x03, 0xc2, 0x15, 0x08, 0xef, 0x78, 0xff, 0x1c, 0x41, 0x50, 0xe8, 0xb1, 0xf1, 0xb6, 0xbc, 0x51,
	0xa3, 0x91, 0x34, 0x5f, 0x6a, 0x13, 0x67, 0xc1, 0x23, 0xcc, 0xd1, 0x2a, 0x18, 0x7f, 0x9f, 0xf6,
	0x3d, 0x2f, 0x46, 0xe8, 0xc4, 0x2d, 0xff, 0xaf, 0x83, 0xa2, 0x44, 0xa9, 0xca, 0xe0, 0xed, 0x35,
	0x6d, 0x4e, 0x94, 0xc9, 0x6c, 0x28, 0xa3, 0x31, 0x9e, 0xbe, 0xf4, 0xf0, 0x5b, 0x97, 0x70, 0xfe,
	0x11, 0xbb, 0x13, 0x17, 0x11, 0xe4, 0x44, 0x9b, 0xbe, 0x4c, 0x64, 0x04, 0x09, 0xd5, 0xbb, 0x15,
	0xa3, 0x5c, 0x2d, 0x84, 0x09, 0xd1, 0xd0, 0x52, 0x5e, 0x70, 0x48, 0x17, 0x41, 0x1f, 0x93, 0x15,
	0x2e, 0xc0, 0x20, 0x89, 0x6a, 0x39, 0x1c, 0x26, 0x2a, 0xa5, 0xf3, 0x97, 0xf7, 0xc8, 0xdd, 0x2d,
	0xc0, 0xa0, 0x91, 0x56, 0x4f, 0x9f, 0x0a, 0x83, 0xda, 0xf0, 0x84, 0xec, 0xb5, 0x44, 0x30, 0x2a,
	0xea, 0x29, 0x86, 0xd0, 0x43, 0x3c, 0x02, 0x08, 0xde, 0x5f, 0x88, 0x8a, 0x15, 0x2e, 0xbc, 0x19,
	0xff, 0x97, 0xc3, 0x94, 0x3b, 0xfb, 0x01, 0x25, 0x6d, 0x0b, 0x30, 0xfd, 0x17, 0xd5, 0x99, 0x8e,
	0x2e, 0x65, 0x1c, 0x7c, 0x2f, 0xff, 0x2f, 0x2a, 0xa2, 0xe9, 0xb8, 0xf6, 0x17, 0x78, 0xa0, 0x88,
	0xe6, 0xfb, 0x7d, 0xea, 0x02, 0xfb, 0x18, 0x66, 0xc5, 0x74, 0x59, 0x2e, 0x0b, 0x7e, 0x80, 0x79,
	0x4f, 0x41, 0xf3, 0x0f, 0xe9, 0xfb, 0xcf, 0x8d, 0xbc, 0x52, 0x92, 0xce, 0x67, 0x7e, 0xe8, 0xda,
	0xee, 0xcf, 0xaa, 0x78, 0xb8, 0x28, 0xc8, 0xbb, 0x6c, 0x13, 0xa0, 0x0b, 0x35, 0x0d, 0x7e, 0xe4,
	0x0e, 0xdc, 0x9f, 0x11, 0x1d, 0xe6, 0x0c, 0xfe, 0x98, 0xdd, 0x4e, 0xa5, 0x8c, 0xcb, 0x1b, 0x81,
	0x14, 0xa9, 0x3e, 0xc4, 0xdd, 0x58, 0xc5, 0x82, 0xaa, 0x82, 0xfe, 0xa9, 0x08, 0xe6, 0xf2, 0x63,
	0x54, 0xab, 0x1d, 0x1c, 0xf7, 0x59, 0x8e, 0x86, 0xa5, 0x40, 0xe7, 0x90, 0xdd, 0x5e, 0xe1, 0xd2,
	0x5f, 0xf4, 0x5f, 0x94, 0x95, 0x96, 0x5a, 0xc8, 0xee, 0xae, 0x8e, 0xf8, 0xb0, 0x70, 0x13, 0x95,
	0x96, 0x1d, 0xc6, 0x46, 0x58, 0xd0, 0x58, 0x4e, 0xa4, 0x99, 0x34, 0xf6, 0x5c, 0xe7, 0x3d, 0xc6,
	0x12, 0xe8, 0xbe, 0xc2, 0xf8, 0xf2, 0xbf, 0xd2, 0x00, 0xba, 0xec, 0xc5, 0x01, 0x5d, 0xf6, 0x96,
	0xdd, 0x2d, 0xca, 0x99, 0xc8, 0x26, 0xbb, 0x3b, 0x94, 0x51, 0xe6, 0xb6, 0xd4, 0xbd, 0xc5, 0x76,
	0x17, 0xb6, 0xa7, 0xdb, 0x62, 0x9b, 0x6e, 0xf5, 0xbb, 0xbb, 0x6c, 0xbb, 0xb2, 0x60, 0xf0, 0x8a,
	0x72, 0x26, 0xa0, 0x8d, 0x80, 0x3e, 0xdd, 0xfa, 0xc7, 0xaf, 0xf6, 0x6b, 0xff, 0xf4, 0xd5, 0x7e,
	0xed, 0x5f, 0xbf, 0xda, 0xaf, 0x0d, 0x36, 0xf0, 0x5f, 0x88, 0xdf, 0xff, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x15, 0x44, 0x00, 0xa6, 0x53, 0x3c, 0x00, 0x00,
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HistoryNoMore {
		i--
		if m.HistoryNoMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.LiveCursor) > 0 {
		i -= len(m.LiveCursor)
		copy(dAtA[i:], m.LiveCursor)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LiveCursor)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PushServer) > 0 {
		i -= len(m.PushServer)
		copy(dAtA[i:], m.PushServer)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.PushServer)))
		i--
		dAtA[i] = 0x52
	}
	if m.NeedAck {
		i--
		if m.NeedAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.HeartbeatDuration != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HeartbeatDuration))
		i--
		dAtA[i] = 0x40
	}
	if len(m.RouteParams) > 0 {
		for k := range m.RouteParams {
			v := m.RouteParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMessage(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.FetchType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FetchType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.InternalExt) > 0 {
		i -= len(m.InternalExt)
		copy(dAtA[i:], m.InternalExt)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.InternalExt)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Now != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Now))
		i--
		dAtA[i] = 0x20
	}
	if m.FetchInterval != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FetchInterval))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Cursor) > 0 {
		i -= len(m.Cursor)
		copy(dAtA[i:], m.Cursor)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Cursor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x28
	}
	if m.MsgType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x20
	}
	if m.MsgId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomUserSeqMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomUserSeqMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomUserSeqMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TotalPvForAnchor) > 0 {
		i -= len(m.TotalPvForAnchor)
		copy(dAtA[i:], m.TotalPvForAnchor)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TotalPvForAnchor)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.OnlineUserForAnchor) > 0 {
		i -= len(m.OnlineUserForAnchor)
		copy(dAtA[i:], m.OnlineUserForAnchor)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.OnlineUserForAnchor)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TotalStr) > 0 {
		i -= len(m.TotalStr)
		copy(dAtA[i:], m.TotalStr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TotalStr)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TotalUserStr) > 0 {
		i -= len(m.TotalUserStr)
		copy(dAtA[i:], m.TotalUserStr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TotalUserStr)))
		i--
		dAtA[i] = 0x42
	}
	if m.TotalUser != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TotalUser))
		i--
		dAtA[i] = 0x38
	}
	if m.Popularity != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Popularity))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Seats) > 0 {
		for iNdEx := len(m.Seats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PopStr) > 0 {
		i -= len(m.PopStr)
		copy(dAtA[i:], m.PopStr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.PopStr)))
		i--
		dAtA[i] = 0x22
	}
	if m.Total != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Ranks) > 0 {
		for iNdEx := len(m.Ranks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ranks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Common != nil {
		{
			size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomUserSeqMessage_Contributor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomUserSeqMessage_Contributor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomUserSeqMessage_Contributor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExactlyScore) > 0 {
		i -= len(m.ExactlyScore)
		copy(dAtA[i:], m.ExactlyScore)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ExactlyScore)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ScoreDescription) > 0 {
		i -= len(m.ScoreDescription)
		copy(dAtA[i:], m.ScoreDescription)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ScoreDescription)))
		i--
		dAtA[i] = 0x32
	}
	if m.IsHidden {
		i--
		if m.IsHidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Delta != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Delta))
		i--
		dAtA[i] = 0x20
	}
	if m.Rank != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x18
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Score != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GiftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AssetEffectMixInfo != nil {
		{
			size, err := m.AssetEffectMixInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.TrayInfo != nil {
		{
			size, err := m.TrayInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.BannedDisplayEffects != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.BannedDisplayEffects))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.TrayDisplayText != nil {
		{
			size, err := m.TrayDisplayText.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.PublicAreaCommon != nil {
		{
			size, err := m.PublicAreaCommon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.SendType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SendType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.LogId) > 0 {
		i -= len(m.LogId)
		copy(dAtA[i:], m.LogId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LogId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Gift != nil {
		{
			size, err := m.Gift.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Priority != nil {
		{
			size, err := m.Priority.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.RoomFanTicketCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RoomFanTicketCount))
		i--
		dAtA[i] = 0x68
	}
	if m.IncomeTaskgifts != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.IncomeTaskgifts))
		i--
		dAtA[i] = 0x60
	}
	if m.GroupId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x58
	}
	if m.TextEffect != nil {
		{
			size, err := m.TextEffect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RepeatEnd != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RepeatEnd))
		i--
		dAtA[i] = 0x48
	}
	if m.ToUser != nil {
		{
			size, err := m.ToUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ComboCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ComboCount))
		i--
		dAtA[i] = 0x30
	}
	if m.RepeatCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RepeatCount))
		i--
		dAtA[i] = 0x28
	}
	if m.GroupCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.GroupCount))
		i--
		dAtA[i] = 0x20
	}
	if m.FanTicketCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FanTicketCount))
		i--
		dAtA[i] = 0x18
	}
	if m.GiftId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.GiftId))
		i--
		dAtA[i] = 0x10
	}
	if m.Common != nil {
		{
			size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GiftMessage_TextEffect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftMessage_TextEffect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftMessage_TextEffect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Landscape != nil {
		{
			size, err := m.Landscape.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Portrait != nil {
		{
			size, err := m.Portrait.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GiftMessage_TextEffect_Detail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftMessage_TextEffect_Detail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftMessage_TextEffect_Detail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StrokeWidth != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StrokeWidth))
		i--
		dAtA[i] = 0x78
	}
	if len(m.StrokeColor) > 0 {
		i -= len(m.StrokeColor)
		copy(dAtA[i:], m.StrokeColor)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StrokeColor)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ShadowColor) > 0 {
		i -= len(m.ShadowColor)
		copy(dAtA[i:], m.ShadowColor)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ShadowColor)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ShadowRadius != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ShadowRadius))
		i--
		dAtA[i] = 0x60
	}
	if m.ShadowDy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ShadowDy))
		i--
		dAtA[i] = 0x58
	}
	if m.ShadowDx != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ShadowDx))
		i--
		dAtA[i] = 0x50
	}
	if m.Height != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x48
	}
	if m.Width != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x40
	}
	if m.Y != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x38
	}
	if m.X != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x30
	}
	if m.Duration != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if m.Start != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x20
	}
	if m.Background != nil {
		{
			size, err := m.Background.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TextFontSize != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TextFontSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LikeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x32
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Color != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Color))
		i--
		dAtA[i] = 0x20
	}
	if m.Total != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Common != nil {
		{
			size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GiftImage != nil {
		{
			size, err := m.GiftImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.PublicAreaCommon != nil {
		{
			size, err := m.PublicAreaCommon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.BackgroundImageV2 != nil {
		{
			size, err := m.BackgroundImageV2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FullScreenTextColor) > 0 {
		i -= len(m.FullScreenTextColor)
		copy(dAtA[i:], m.FullScreenTextColor)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FullScreenTextColor)))
		i--
		dAtA[i] = 0x32
	}
	if m.BackgroundImage != nil {
		{
			size, err := m.BackgroundImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.VisibleToSender {
		i--
		if m.VisibleToSender {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Common != nil {
		{
			size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SocialMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocialMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocialMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PublicAreaCommon != nil {
		{
			size, err := m.PublicAreaCommon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.FollowCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FollowCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ShareTarget) > 0 {
		i -= len(m.ShareTarget)
		copy(dAtA[i:], m.ShareTarget)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ShareTarget)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Action != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x20
	}
	if m.ShareType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ShareType))
		i--
		dAtA[i] = 0x18
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Common != nil {
		{
			size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemberMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PublicAreaCommon != nil {
		{
			size, err := m.PublicAreaCommon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.AnchorDisplayText != nil {
		{
			size, err := m.AnchorDisplayText.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.BackgroundImageV2 != nil {
		{
			size, err := m.BackgroundImageV2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.BackgroundImage != nil {
		{
			size, err := m.BackgroundImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.EnterEffectConfig != nil {
		{
			size, err := m.EnterEffectConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PopStr) > 0 {
		i -= len(m.PopStr)
		copy(dAtA[i:], m.PopStr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.PopStr)))
		i--
		dAtA[i] = 0x72
	}
	if m.EffectConfig != nil {
		{
			size, err := m.EffectConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.UserId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ActionDescription) > 0 {
		i -= len(m.ActionDescription)
		copy(dAtA[i:], m.ActionDescription)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActionDescription)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Action != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x50
	}
	if m.EnterType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EnterType))
		i--
		dAtA[i] = 0x48
	}
	if m.TopUserNo != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TopUserNo))
		i--
		dAtA[i] = 0x40
	}
	if m.RankScore != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RankScore))
		i--
		dAtA[i] = 0x38
	}
	if m.IsTopUser {
		i--
		if m.IsTopUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsSetToAdmin {
		i--
		if m.IsSetToAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Operator != nil {
		{
			size, err := m.Operator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MemberCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MemberCount))
		i--
		dAtA[i] = 0x18
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Common != nil {
		{
			size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemberMessage_EffectConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberMessage_EffectConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberMessage_EffectConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CenterAnimAssetId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CenterAnimAssetId))
		i--
		dAtA[i] = 0x70
	}
	if len(m.TextFlexSettingArray) > 0 {
		dAtA38 := make([]byte, len(m.TextFlexSettingArray)*10)
		var j37 int
		for _, num1 := range m.TextFlexSettingArray {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA38[j37] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j37++
			}
			dAtA38[j37] = uint8(num)
			j37++
		}
		i -= j37
		copy(dAtA[i:], dAtA38[:j37])
		i = encodeVarintMessage(dAtA, i, uint64(j37))
		i--
		dAtA[i] = 0x6a
	}
	if m.HasSweepLight {
		i--
		if m.HasSweepLight {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.AnimatedBadge != nil {
		{
			size, err := m.AnimatedBadge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.TextIconOverlay != nil {
		{
			size, err := m.TextIconOverlay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.FlexSettingArray) > 0 {
		dAtA42 := make([]byte, len(m.FlexSettingArray)*10)
		var j41 int
		for _, num1 := range m.FlexSettingArray {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA42[j41] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j41++
			}
			dAtA42[j41] = uint8(num)
			j41++
		}
		i -= j41
		copy(dAtA[i:], dAtA42[:j41])
		i = encodeVarintMessage(dAtA, i, uint64(j41))
		i--
		dAtA[i] = 0x4a
	}
	if m.Badge != nil {
		{
			size, err := m.Badge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.AnimAssetId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AnimAssetId))
		i--
		dAtA[i] = 0x38
	}
	if m.StayTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StayTime))
		i--
		dAtA[i] = 0x30
	}
	if m.TextIcon != nil {
		{
			size, err := m.TextIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AvatarPos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AvatarPos))
		i--
		dAtA[i] = 0x18
	}
	if m.Icon != nil {
		{
			size, err := m.Icon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ControlMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Common != nil {
		{
			size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FansclubMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FansclubMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FansclubMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.CommonInfo != nil {
		{
			size, err := m.CommonInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Common) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Common) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Common) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProcessAtSeiTimeMs != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ProcessAtSeiTimeMs))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.AnchorFoldTypeV2 != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AnchorFoldTypeV2))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.MsgProcessFilterV) > 0 {
		i -= len(m.MsgProcessFilterV)
		copy(dAtA[i:], m.MsgProcessFilterV)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MsgProcessFilterV)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.MsgProcessFilterK) > 0 {
		i -= len(m.MsgProcessFilterK)
		copy(dAtA[i:], m.MsgProcessFilterK)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MsgProcessFilterK)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.LogId) > 0 {
		i -= len(m.LogId)
		copy(dAtA[i:], m.LogId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LogId)))
		i--
		dAtA[i] = 0x62
	}
	if m.PriorityScore != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.PriorityScore))
		i--
		dAtA[i] = 0x58
	}
	if m.AnchorFoldType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AnchorFoldType))
		i--
		dAtA[i] = 0x50
	}
	if m.FoldType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FoldType))
		i--
		dAtA[i] = 0x48
	}
	if m.DisplayText != nil {
		{
			size, err := m.DisplayText.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Describe) > 0 {
		i -= len(m.Describe)
		copy(dAtA[i:], m.Describe)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Describe)))
		i--
		dAtA[i] = 0x3a
	}
	if m.IsShowMsg {
		i--
		if m.IsShowMsg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Monitor != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Monitor))
		i--
		dAtA[i] = 0x28
	}
	if m.CreateTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x20
	}
	if m.RoomId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x18
	}
	if m.MsgId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Text) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pieces) > 0 {
		for iNdEx := len(m.Pieces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pieces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.DefaultFormat != nil {
		{
			size, err := m.DefaultFormat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DefaultPattern) > 0 {
		i -= len(m.DefaultPattern)
		copy(dAtA[i:], m.DefaultPattern)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.DefaultPattern)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Room) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Room) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Room) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrivateInfo) > 0 {
		i -= len(m.PrivateInfo)
		copy(dAtA[i:], m.PrivateInfo)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.PrivateInfo)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if len(m.AdminUserIds) > 0 {
		dAtA56 := make([]byte, len(m.AdminUserIds)*10)
		var j55 int
		for _, num1 := range m.AdminUserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA56[j55] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j55++
			}
			dAtA56[j55] = uint8(num)
			j55++
		}
		i -= j55
		copy(dAtA[i:], dAtA56[:j55])
		i = encodeVarintMessage(dAtA, i, uint64(j55))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.LivingRoomAttrs != nil {
		{
			size, err := m.LivingRoomAttrs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if len(m.CommonLabelList) > 0 {
		i -= len(m.CommonLabelList)
		copy(dAtA[i:], m.CommonLabelList)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CommonLabelList)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.FeedRoomLabel != nil {
		{
			size, err := m.FeedRoomLabel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if len(m.RealDistance) > 0 {
		i -= len(m.RealDistance)
		copy(dAtA[i:], m.RealDistance)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RealDistance)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if len(m.DistanceCity) > 0 {
		i -= len(m.DistanceCity)
		copy(dAtA[i:], m.DistanceCity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.DistanceCity)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.Distance) > 0 {
		i -= len(m.Distance)
		copy(dAtA[i:], m.Distance)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Distance)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.SunDailyIconContent) > 0 {
		i -= len(m.SunDailyIconContent)
		copy(dAtA[i:], m.SunDailyIconContent)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SunDailyIconContent)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.TopFans) > 0 {
		for iNdEx := len(m.TopFans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopFans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.DecoList) > 0 {
		for iNdEx := len(m.DecoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DecoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if m.LuckymoneyNum != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LuckymoneyNum))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.LinkMic != nil {
		{
			size, err := m.LinkMic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.CellStyle != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CellStyle))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if len(m.MosaicTip) > 0 {
		i -= len(m.MosaicTip)
		copy(dAtA[i:], m.MosaicTip)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MosaicTip)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.MosaicStatus != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MosaicStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.StreamUrl != nil {
		{
			size, err := m.StreamUrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.StreamIdStr) > 0 {
		i -= len(m.StreamIdStr)
		copy(dAtA[i:], m.StreamIdStr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StreamIdStr)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.StreamId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.UserShareText) > 0 {
		i -= len(m.UserShareText)
		copy(dAtA[i:], m.UserShareText)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.UserShareText)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.AnchorShareText) > 0 {
		i -= len(m.AnchorShareText)
		copy(dAtA[i:], m.AnchorShareText)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AnchorShareText)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.ShareUrl) > 0 {
		i -= len(m.ShareUrl)
		copy(dAtA[i:], m.ShareUrl)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ShareUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.DynamicCoverLow != nil {
		{
			size, err := m.DynamicCoverLow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.DynamicCover != nil {
		{
			size, err := m.DynamicCover.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Cover != nil {
		{
			size, err := m.Cover.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.EnableRoomPerspective {
		i--
		if m.EnableRoomPerspective {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.WithLinkmic {
		i--
		if m.WithLinkmic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ClientVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ClientVersion))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.OsType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.OsType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.StreamProvider != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StreamProvider))
		i--
		dAtA[i] = 0x78
	}
	if m.LiveId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LiveId))
		i--
		dAtA[i] = 0x70
	}
	if m.LastPingTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastPingTime))
		i--
		dAtA[i] = 0x68
	}
	if len(m.DynamicCoverDict) > 0 {
		for k := range m.DynamicCoverDict {
			v := m.DynamicCoverDict[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMessage(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.DynamicCoverUri) > 0 {
		i -= len(m.DynamicCoverUri)
		copy(dAtA[i:], m.DynamicCoverUri)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.DynamicCoverUri)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Extra != nil {
		{
			size, err := m.Extra.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.FinishTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FinishTime))
		i--
		dAtA[i] = 0x48
	}
	if m.LinkmicLayout != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LinkmicLayout))
		i--
		dAtA[i] = 0x40
	}
	if m.CreateTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.UserCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UserCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OwnerUserId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.OwnerUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.IdStr) > 0 {
		i -= len(m.IdStr)
		copy(dAtA[i:], m.IdStr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.IdStr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoomExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RoomStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RoomUserAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomUserAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomUserAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *StreamUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *LinkMic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkMic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkMic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Decoration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Decoration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decoration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *TopFan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopFan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopFan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserRole != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UserRole))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if len(m.SecUid) > 0 {
		i -= len(m.SecUid)
		copy(dAtA[i:], m.SecUid)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SecUid)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if len(m.DisplayId) > 0 {
		i -= len(m.DisplayId)
		copy(dAtA[i:], m.DisplayId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.DisplayId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if m.LinkMicStats != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LinkMicStats))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.AnchorInfo != nil {
		{
			size, err := m.AnchorInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.TicketCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TicketCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.PayScore != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.PayScore))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.OwnRoom != nil {
		{
			size, err := m.OwnRoom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.UserAttr != nil {
		{
			size, err := m.UserAttr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.TopVipNo != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TopVipNo))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if len(m.NewRealTimeIcons) > 0 {
		for iNdEx := len(m.NewRealTimeIcons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewRealTimeIcons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.RealTimeIcons) > 0 {
		for iNdEx := len(m.RealTimeIcons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RealTimeIcons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if m.Medal != nil {
		{
			size, err := m.Medal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.AvatarBorder != nil {
		{
			size, err := m.AvatarBorder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.SpecialId) > 0 {
		i -= len(m.SpecialId)
		copy(dAtA[i:], m.SpecialId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SpecialId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.Border != nil {
		{
			size, err := m.Border.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.FansClub != nil {
		{
			size, err := m.FansClub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.PayGrade != nil {
		{
			size, err := m.PayGrade.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.FollowInfo != nil {
		{
			size, err := m.FollowInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.BadgeImageList != nil {
		{
			size, err := m.BadgeImageList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.IncomeSharePercent != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.IncomeSharePercent))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ShareQrcodeUri) > 0 {
		i -= len(m.ShareQrcodeUri)
		copy(dAtA[i:], m.ShareQrcodeUri)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ShareQrcodeUri)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Secret != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Secret))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ModifyTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ModifyTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CreateTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x78
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x72
	}
	if m.Experience != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Experience))
		i--
		dAtA[i] = 0x68
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.AvatarLarge != nil {
		{
			size, err := m.AvatarLarge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.AvatarMedium != nil {
		{
			size, err := m.AvatarMedium.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.AvatarThumb != nil {
		{
			size, err := m.AvatarThumb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Telephone) > 0 {
		i -= len(m.Telephone)
		copy(dAtA[i:], m.Telephone)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Telephone)))
		i--
		dAtA[i] = 0x42
	}
	if m.Birthday != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Birthday))
		i--
		dAtA[i] = 0x38
	}
	if m.Level != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Gender != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ShortId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ShortId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_UserAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UserAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UserAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *User_OwnRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_OwnRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_OwnRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *User_AnchorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AnchorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AnchorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *User_FollowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_FollowInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_FollowInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RemarkName) > 0 {
		i -= len(m.RemarkName)
		copy(dAtA[i:], m.RemarkName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RemarkName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PushStatus != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.PushStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.FollowStatus != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FollowStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.FollowerCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FollowerCount))
		i--
		dAtA[i] = 0x10
	}
	if m.FollowingCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FollowingCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_FansClub) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_FansClub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_FansClub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PreferData) > 0 {
		for k := range m.PreferData {
			v := m.PreferData[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_FansClub_FansClubData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_FansClub_FansClubData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_FansClub_FansClubData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AnchorId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AnchorId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AvailableGiftIds) > 0 {
		dAtA82 := make([]byte, len(m.AvailableGiftIds)*10)
		var j81 int
		for _, num1 := range m.AvailableGiftIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA82[j81] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j81++
			}
			dAtA82[j81] = uint8(num)
			j81++
		}
		i -= j81
		copy(dAtA[i:], dAtA82[:j81])
		i = encodeVarintMessage(dAtA, i, uint64(j81))
		i--
		dAtA[i] = 0x2a
	}
	if m.Badge != nil {
		{
			size, err := m.Badge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserFansClubStatus != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UserFansClubStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClubName) > 0 {
		i -= len(m.ClubName)
		copy(dAtA[i:], m.ClubName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ClubName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_FansClub_FansClubData_UserBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_FansClub_FansClubData_UserBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_FansClub_FansClubData_UserBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Icons) > 0 {
		for k := range m.Icons {
			v := m.Icons[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_Border) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_Border) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_Border) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *User_GradeBuffInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GradeBuffInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GradeBuffInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BuffBadge != nil {
		{
			size, err := m.BuffBadge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StatsInfo) > 0 {
		for k := range m.StatsInfo {
			v := m.StatsInfo[k]
			baseI := i
			i = encodeVarintMessage(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.EndTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.BuffLevel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.BuffLevel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_PayGrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_PayGrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_PayGrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProfileDialogBgBack != nil {
		{
			size, err := m.ProfileDialogBgBack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xda
	}
	if m.ProfileDialogBg != nil {
		{
			size, err := m.ProfileDialogBg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd2
	}
	if len(m.GradeBanner) > 0 {
		i -= len(m.GradeBanner)
		copy(dAtA[i:], m.GradeBanner)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GradeBanner)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.BuffInfo != nil {
		{
			size, err := m.BuffInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.Score != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.BackgroundBack != nil {
		{
			size, err := m.BackgroundBack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Background != nil {
		{
			size, err := m.Background.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.NextPrivileges) > 0 {
		i -= len(m.NextPrivileges)
		copy(dAtA[i:], m.NextPrivileges)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NextPrivileges)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.UpgradeNeedConsume != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UpgradeNeedConsume))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.NewLiveIcon != nil {
		{
			size, err := m.NewLiveIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.NewImIconWithLevel != nil {
		{
			size, err := m.NewImIconWithLevel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.LiveIcon != nil {
		{
			size, err := m.LiveIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ImIconWithLevel != nil {
		{
			size, err := m.ImIconWithLevel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ImIcon != nil {
		{
			size, err := m.ImIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ScreenChatType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScreenChatType))
		i--
		dAtA[i] = 0x78
	}
	if len(m.GradeIconList) > 0 {
		for iNdEx := len(m.GradeIconList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GradeIconList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.GradeDescribe) > 0 {
		i -= len(m.GradeDescribe)
		copy(dAtA[i:], m.GradeDescribe)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GradeDescribe)))
		i--
		dAtA[i] = 0x6a
	}
	if m.PayDiamondBak != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.PayDiamondBak))
		i--
		dAtA[i] = 0x60
	}
	if m.ThisGradeMaxDiamond != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ThisGradeMaxDiamond))
		i--
		dAtA[i] = 0x58
	}
	if m.ThisGradeMinDiamond != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ThisGradeMinDiamond))
		i--
		dAtA[i] = 0x50
	}
	if m.NowDiamond != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NowDiamond))
		i--
		dAtA[i] = 0x48
	}
	if m.NextDiamond != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NextDiamond))
		i--
		dAtA[i] = 0x40
	}
	if m.NextIcon != nil {
		{
			size, err := m.NextIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Level != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x30
	}
	if len(m.NextName) > 0 {
		i -= len(m.NextName)
		copy(dAtA[i:], m.NextName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NextName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Icon != nil {
		{
			size, err := m.Icon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DiamondIcon != nil {
		{
			size, err := m.DiamondIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TotalDiamondCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TotalDiamondCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_PayGrade_GradeIcon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_PayGrade_GradeIcon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_PayGrade_GradeIcon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LevelStr) > 0 {
		i -= len(m.LevelStr)
		copy(dAtA[i:], m.LevelStr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LevelStr)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.IconDiamond != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.IconDiamond))
		i--
		dAtA[i] = 0x10
	}
	if m.Icon != nil {
		{
			size, err := m.Icon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextFormat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextFormat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextFormat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseRemoteClor {
		i--
		if m.UseRemoteClor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.UserHeightLightColor {
		i--
		if m.UserHeightLightColor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.FontSize != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FontSize))
		i--
		dAtA[i] = 0x30
	}
	if m.ItalicAngle != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ItalicAngle))
		i--
		dAtA[i] = 0x28
	}
	if m.Weight != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x20
	}
	if m.Italic {
		i--
		if m.Italic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Bold {
		i--
		if m.Bold {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextPiece) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextPiece) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextPiece) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserValue != nil {
		{
			size, err := m.UserValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.StringValue) > 0 {
		i -= len(m.StringValue)
		copy(dAtA[i:], m.StringValue)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StringValue)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Format != nil {
		{
			size, err := m.Format.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAnimated {
		i--
		if m.IsAnimated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.OpenWebUrl) > 0 {
		i -= len(m.OpenWebUrl)
		copy(dAtA[i:], m.OpenWebUrl)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.OpenWebUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ImageType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ImageType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AvgColor) > 0 {
		i -= len(m.AvgColor)
		copy(dAtA[i:], m.AvgColor)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AvgColor)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Width != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x20
	}
	if m.Height != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UrlList) > 0 {
		for iNdEx := len(m.UrlList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UrlList[iNdEx])
			copy(dAtA[i:], m.UrlList[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.UrlList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Image_Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Image_Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Image_Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AlternativeText) > 0 {
		i -= len(m.AlternativeText)
		copy(dAtA[i:], m.AlternativeText)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AlternativeText)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FontColor) > 0 {
		i -= len(m.FontColor)
		copy(dAtA[i:], m.FontColor)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FontColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextPieceUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextPieceUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextPieceUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WithColon {
		i--
		if m.WithColon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublicAreaCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicAreaCommon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicAreaCommon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserSendGiftCntInRoom != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UserSendGiftCntInRoom))
		i--
		dAtA[i] = 0x18
	}
	if m.UserConsumeInRoom != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UserConsumeInRoom))
		i--
		dAtA[i] = 0x10
	}
	if m.UserLabel != nil {
		{
			size, err := m.UserLabel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GiftIMPriority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftIMPriority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftIMPriority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Priority != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x18
	}
	if m.SelfQueuePriority != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SelfQueuePriority))
		i--
		dAtA[i] = 0x10
	}
	if len(m.QueueSizes) > 0 {
		dAtA106 := make([]byte, len(m.QueueSizes)*10)
		var j105 int
		for _, num1 := range m.QueueSizes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA106[j105] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j105++
			}
			dAtA106[j105] = uint8(num)
			j105++
		}
		i -= j105
		copy(dAtA[i:], dAtA106[:j105])
		i = encodeVarintMessage(dAtA, i, uint64(j105))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GiftTrayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftTrayInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftTrayInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TrayDynamicImg != nil {
		{
			size, err := m.TrayDynamicImg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TrayLevel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TrayLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.TrayRightImg != nil {
		{
			size, err := m.TrayRightImg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TrayHeadImg != nil {
		{
			size, err := m.TrayHeadImg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TrayBaseImg != nil {
		{
			size, err := m.TrayBaseImg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TrayDisplayText != nil {
		{
			size, err := m.TrayDisplayText.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GiftStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupInfo) > 0 {
		for iNdEx := len(m.GroupInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xda
		}
	}
	if m.NeedSweepLightCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NeedSweepLightCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.GiftTip != nil {
		{
			size, err := m.GiftTip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.GiftPreviewInfo != nil {
		{
			size, err := m.GiftPreviewInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if len(m.AssetIds) > 0 {
		dAtA115 := make([]byte, len(m.AssetIds)*10)
		var j114 int
		for _, num1 := range m.AssetIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA115[j114] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j114++
			}
			dAtA115[j114] = uint8(num)
			j114++
		}
		i -= j114
		copy(dAtA[i:], dAtA115[:j114])
		i = encodeVarintMessage(dAtA, i, uint64(j114))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.ReqExtraType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ReqExtraType))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.IsLocked {
		i--
		if m.IsLocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if len(m.BannerSchemeUrl) > 0 {
		i -= len(m.BannerSchemeUrl)
		copy(dAtA[i:], m.BannerSchemeUrl)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BannerSchemeUrl)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.TopRightAvatar != nil {
		{
			size, err := m.TopRightAvatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if len(m.TopBarText) > 0 {
		i -= len(m.TopBarText)
		copy(dAtA[i:], m.TopBarText)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TopBarText)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if m.GiftOfflineTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.GiftOfflineTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x88
	}
	if m.AfterSendAction != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AfterSendAction))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x80
	}
	if m.DynamicImgForSelected != nil {
		{
			size, err := m.DynamicImgForSelected.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.ForFirstRecharge {
		i--
		if m.ForFirstRecharge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if len(m.GiftBuffInfos) > 0 {
		for iNdEx := len(m.GiftBuffInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GiftBuffInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.TriggerWords) > 0 {
		for iNdEx := len(m.TriggerWords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TriggerWords[iNdEx])
			copy(dAtA[i:], m.TriggerWords[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.TriggerWords[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.GiftBanner != nil {
		{
			size, err := m.GiftBanner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.GiftScene != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.GiftScene))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if len(m.GraySchemeUrl) > 0 {
		i -= len(m.GraySchemeUrl)
		copy(dAtA[i:], m.GraySchemeUrl)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GraySchemeUrl)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.IsGray {
		i--
		if m.IsGray {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.VipLevel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.VipLevel))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.AppId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.CnyGift {
		i--
		if m.CnyGift {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if len(m.BusinessText) > 0 {
		i -= len(m.BusinessText)
		copy(dAtA[i:], m.BusinessText)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BusinessText)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.ForPortal {
		i--
		if m.ForPortal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.PunishMedicine {
		i--
		if m.PunishMedicine {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if len(m.GuideUrl) > 0 {
		i -= len(m.GuideUrl)
		copy(dAtA[i:], m.GuideUrl)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GuideUrl)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.NobleLevel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NobleLevel))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.EventName) > 0 {
		i -= len(m.EventName)
		copy(dAtA[i:], m.EventName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.EventName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.GiftOperation != nil {
		{
			size, err := m.GiftOperation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.SchemeUrl) > 0 {
		i -= len(m.SchemeUrl)
		copy(dAtA[i:], m.SchemeUrl)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SchemeUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.ItemType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ItemType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.HonorLevel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HonorLevel))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.GoldenBeans != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.GoldenBeans))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.Subs) > 0 {
		for iNdEx := len(m.Subs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.GoldEffect) > 0 {
		i -= len(m.GoldEffect)
		copy(dAtA[i:], m.GoldEffect)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GoldEffect)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.WatermelonSeeds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WatermelonSeeds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.ActionType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Icon != nil {
		{
			size, err := m.Icon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.SpecialEffects) > 0 {
		for k := range m.SpecialEffects {
			v := m.SpecialEffects[k]
			baseI := i
			i = encodeVarintMessage(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.ForCustom {
		i--
		if m.ForCustom {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Manual) > 0 {
		i -= len(m.Manual)
		copy(dAtA[i:], m.Manual)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Manual)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.GiftLabelIcon != nil {
		{
			size, err := m.GiftLabelIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.PrimaryEffectId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.PrimaryEffectId))
		i--
		dAtA[i] = 0x70
	}
	if m.IsDisplayedOnPanel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.IsDisplayedOnPanel))
		i--
		dAtA[i] = 0x68
	}
	if m.DiamondCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DiamondCount))
		i--
		dAtA[i] = 0x60
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x58
	}
	if m.Combo {
		i--
		if m.Combo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ForFansclub {
		i--
		if m.ForFansclub {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Doodle {
		i--
		if m.Doodle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ForLinkmic {
		i--
		if m.ForLinkmic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.FansclubInfo != nil {
		{
			size, err := m.FansclubInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Id != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if m.Duration != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.Notify {
		i--
		if m.Notify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Describe) > 0 {
		i -= len(m.Describe)
		copy(dAtA[i:], m.Describe)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Describe)))
		i--
		dAtA[i] = 0x12
	}
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GiftStruct_GiftStructFansClubInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftStruct_GiftStructFansClubInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftStruct_GiftStructFansClubInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InsertPos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InsertPos))
		i--
		dAtA[i] = 0x10
	}
	if m.MinLevel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MinLevel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetEffectMixInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetEffectMixInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetEffectMixInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *LuckyMoneyGiftMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LuckyMoneyGiftMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LuckyMoneyGiftMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GiftPanelOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftPanelOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftPanelOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GiftBanner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftBanner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftBanner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GiftBuffInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftBuffInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftBuffInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GiftPreviewInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftPreviewInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftPreviewInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GiftTip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftTip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftTip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GiftGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftGroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *EffectMixImageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectMixImageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EffectMixImageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = len(m.Cursor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FetchInterval != 0 {
		n += 1 + sovMessage(uint64(m.FetchInterval))
	}
	if m.Now != 0 {
		n += 1 + sovMessage(uint64(m.Now))
	}
	l = len(m.InternalExt)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FetchType != 0 {
		n += 1 + sovMessage(uint64(m.FetchType))
	}
	if len(m.RouteParams) > 0 {
		for k, v := range m.RouteParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + len(v) + sovMessage(uint64(len(v)))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if m.HeartbeatDuration != 0 {
		n += 1 + sovMessage(uint64(m.HeartbeatDuration))
	}
	if m.NeedAck {
		n += 2
	}
	l = len(m.PushServer)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.LiveCursor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.HistoryNoMore {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessage(uint64(m.MsgId))
	}
	if m.MsgType != 0 {
		n += 1 + sovMessage(uint64(m.MsgType))
	}
	if m.Offset != 0 {
		n += 1 + sovMessage(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomUserSeqMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Common != nil {
		l = m.Common.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Ranks) > 0 {
		for _, e := range m.Ranks {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovMessage(uint64(m.Total))
	}
	l = len(m.PopStr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Seats) > 0 {
		for _, e := range m.Seats {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.Popularity != 0 {
		n += 1 + sovMessage(uint64(m.Popularity))
	}
	if m.TotalUser != 0 {
		n += 1 + sovMessage(uint64(m.TotalUser))
	}
	l = len(m.TotalUserStr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TotalStr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.OnlineUserForAnchor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TotalPvForAnchor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomUserSeqMessage_Contributor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovMessage(uint64(m.Score))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovMessage(uint64(m.Rank))
	}
	if m.Delta != 0 {
		n += 1 + sovMessage(uint64(m.Delta))
	}
	if m.IsHidden {
		n += 2
	}
	l = len(m.ScoreDescription)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ExactlyScore)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Common != nil {
		l = m.Common.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.GiftId != 0 {
		n += 1 + sovMessage(uint64(m.GiftId))
	}
	if m.FanTicketCount != 0 {
		n += 1 + sovMessage(uint64(m.FanTicketCount))
	}
	if m.GroupCount != 0 {
		n += 1 + sovMessage(uint64(m.GroupCount))
	}
	if m.RepeatCount != 0 {
		n += 1 + sovMessage(uint64(m.RepeatCount))
	}
	if m.ComboCount != 0 {
		n += 1 + sovMessage(uint64(m.ComboCount))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ToUser != nil {
		l = m.ToUser.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.RepeatEnd != 0 {
		n += 1 + sovMessage(uint64(m.RepeatEnd))
	}
	if m.TextEffect != nil {
		l = m.TextEffect.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovMessage(uint64(m.GroupId))
	}
	if m.IncomeTaskgifts != 0 {
		n += 1 + sovMessage(uint64(m.IncomeTaskgifts))
	}
	if m.RoomFanTicketCount != 0 {
		n += 1 + sovMessage(uint64(m.RoomFanTicketCount))
	}
	if m.Priority != nil {
		l = m.Priority.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Gift != nil {
		l = m.Gift.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.LogId)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.SendType != 0 {
		n += 2 + sovMessage(uint64(m.SendType))
	}
	if m.PublicAreaCommon != nil {
		l = m.PublicAreaCommon.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.TrayDisplayText != nil {
		l = m.TrayDisplayText.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.BannedDisplayEffects != 0 {
		n += 2 + sovMessage(uint64(m.BannedDisplayEffects))
	}
	if m.TrayInfo != nil {
		l = m.TrayInfo.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.AssetEffectMixInfo != nil {
		l = m.AssetEffectMixInfo.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftMessage_TextEffect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Portrait != nil {
		l = m.Portrait.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Landscape != nil {
		l = m.Landscape.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftMessage_TextEffect_Detail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TextFontSize != 0 {
		n += 1 + sovMessage(uint64(m.TextFontSize))
	}
	if m.Background != nil {
		l = m.Background.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovMessage(uint64(m.Start))
	}
	if m.Duration != 0 {
		n += 1 + sovMessage(uint64(m.Duration))
	}
	if m.X != 0 {
		n += 1 + sovMessage(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovMessage(uint64(m.Y))
	}
	if m.Width != 0 {
		n += 1 + sovMessage(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.ShadowDx != 0 {
		n += 1 + sovMessage(uint64(m.ShadowDx))
	}
	if m.ShadowDy != 0 {
		n += 1 + sovMessage(uint64(m.ShadowDy))
	}
	if m.ShadowRadius != 0 {
		n += 1 + sovMessage(uint64(m.ShadowRadius))
	}
	l = len(m.ShadowColor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.StrokeColor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StrokeWidth != 0 {
		n += 1 + sovMessage(uint64(m.StrokeWidth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Common != nil {
		l = m.Common.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovMessage(uint64(m.Count))
	}
	if m.Total != 0 {
		n += 1 + sovMessage(uint64(m.Total))
	}
	if m.Color != 0 {
		n += 1 + sovMessage(uint64(m.Color))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Common != nil {
		l = m.Common.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.VisibleToSender {
		n += 2
	}
	if m.BackgroundImage != nil {
		l = m.BackgroundImage.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.FullScreenTextColor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.BackgroundImageV2 != nil {
		l = m.BackgroundImageV2.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.PublicAreaCommon != nil {
		l = m.PublicAreaCommon.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.GiftImage != nil {
		l = m.GiftImage.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SocialMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Common != nil {
		l = m.Common.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ShareType != 0 {
		n += 1 + sovMessage(uint64(m.ShareType))
	}
	if m.Action != 0 {
		n += 1 + sovMessage(uint64(m.Action))
	}
	l = len(m.ShareTarget)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FollowCount != 0 {
		n += 1 + sovMessage(uint64(m.FollowCount))
	}
	if m.PublicAreaCommon != nil {
		l = m.PublicAreaCommon.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Common != nil {
		l = m.Common.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MemberCount != 0 {
		n += 1 + sovMessage(uint64(m.MemberCount))
	}
	if m.Operator != nil {
		l = m.Operator.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.IsSetToAdmin {
		n += 2
	}
	if m.IsTopUser {
		n += 2
	}
	if m.RankScore != 0 {
		n += 1 + sovMessage(uint64(m.RankScore))
	}
	if m.TopUserNo != 0 {
		n += 1 + sovMessage(uint64(m.TopUserNo))
	}
	if m.EnterType != 0 {
		n += 1 + sovMessage(uint64(m.EnterType))
	}
	if m.Action != 0 {
		n += 1 + sovMessage(uint64(m.Action))
	}
	l = len(m.ActionDescription)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovMessage(uint64(m.UserId))
	}
	if m.EffectConfig != nil {
		l = m.EffectConfig.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.PopStr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.EnterEffectConfig != nil {
		l = m.EnterEffectConfig.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.BackgroundImage != nil {
		l = m.BackgroundImage.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.BackgroundImageV2 != nil {
		l = m.BackgroundImageV2.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.AnchorDisplayText != nil {
		l = m.AnchorDisplayText.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.PublicAreaCommon != nil {
		l = m.PublicAreaCommon.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberMessage_EffectConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.Icon != nil {
		l = m.Icon.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.AvatarPos != 0 {
		n += 1 + sovMessage(uint64(m.AvatarPos))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TextIcon != nil {
		l = m.TextIcon.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StayTime != 0 {
		n += 1 + sovMessage(uint64(m.StayTime))
	}
	if m.AnimAssetId != 0 {
		n += 1 + sovMessage(uint64(m.AnimAssetId))
	}
	if m.Badge != nil {
		l = m.Badge.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.FlexSettingArray) > 0 {
		l = 0
		for _, e := range m.FlexSettingArray {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if m.TextIconOverlay != nil {
		l = m.TextIconOverlay.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.AnimatedBadge != nil {
		l = m.AnimatedBadge.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.HasSweepLight {
		n += 2
	}
	if len(m.TextFlexSettingArray) > 0 {
		l = 0
		for _, e := range m.TextFlexSettingArray {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if m.CenterAnimAssetId != 0 {
		n += 1 + sovMessage(uint64(m.CenterAnimAssetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Common != nil {
		l = m.Common.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FansclubMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonInfo != nil {
		l = m.CommonInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Common) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessage(uint64(m.MsgId))
	}
	if m.RoomId != 0 {
		n += 1 + sovMessage(uint64(m.RoomId))
	}
	if m.CreateTime != 0 {
		n += 1 + sovMessage(uint64(m.CreateTime))
	}
	if m.Monitor != 0 {
		n += 1 + sovMessage(uint64(m.Monitor))
	}
	if m.IsShowMsg {
		n += 2
	}
	l = len(m.Describe)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DisplayText != nil {
		l = m.DisplayText.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FoldType != 0 {
		n += 1 + sovMessage(uint64(m.FoldType))
	}
	if m.AnchorFoldType != 0 {
		n += 1 + sovMessage(uint64(m.AnchorFoldType))
	}
	if m.PriorityScore != 0 {
		n += 1 + sovMessage(uint64(m.PriorityScore))
	}
	l = len(m.LogId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.MsgProcessFilterK)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.MsgProcessFilterV)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Room != nil {
		l = m.Room.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.AnchorFoldTypeV2 != 0 {
		n += 2 + sovMessage(uint64(m.AnchorFoldTypeV2))
	}
	if m.ProcessAtSeiTimeMs != 0 {
		n += 2 + sovMessage(uint64(m.ProcessAtSeiTimeMs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.DefaultPattern)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DefaultFormat != nil {
		l = m.DefaultFormat.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Pieces) > 0 {
		for _, e := range m.Pieces {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Room) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessage(uint64(m.Id))
	}
	l = len(m.IdStr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	if m.OwnerUserId != 0 {
		n += 1 + sovMessage(uint64(m.OwnerUserId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.UserCount != 0 {
		n += 1 + sovMessage(uint64(m.UserCount))
	}
	if m.CreateTime != 0 {
		n += 1 + sovMessage(uint64(m.CreateTime))
	}
	if m.LinkmicLayout != 0 {
		n += 1 + sovMessage(uint64(m.LinkmicLayout))
	}
	if m.FinishTime != 0 {
		n += 1 + sovMessage(uint64(m.FinishTime))
	}
	if m.Extra != nil {
		l = m.Extra.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.DynamicCoverUri)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.DynamicCoverDict) > 0 {
		for k, v := range m.DynamicCoverDict {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMessage(uint64(k)) + 1 + len(v) + sovMessage(uint64(len(v)))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if m.LastPingTime != 0 {
		n += 1 + sovMessage(uint64(m.LastPingTime))
	}
	if m.LiveId != 0 {
		n += 1 + sovMessage(uint64(m.LiveId))
	}
	if m.StreamProvider != 0 {
		n += 1 + sovMessage(uint64(m.StreamProvider))
	}
	if m.OsType != 0 {
		n += 2 + sovMessage(uint64(m.OsType))
	}
	if m.ClientVersion != 0 {
		n += 2 + sovMessage(uint64(m.ClientVersion))
	}
	if m.WithLinkmic {
		n += 3
	}
	if m.EnableRoomPerspective {
		n += 3
	}
	if m.Cover != nil {
		l = m.Cover.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.DynamicCover != nil {
		l = m.DynamicCover.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.DynamicCoverLow != nil {
		l = m.DynamicCoverLow.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.ShareUrl)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.AnchorShareText)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.UserShareText)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.StreamId != 0 {
		n += 2 + sovMessage(uint64(m.StreamId))
	}
	l = len(m.StreamIdStr)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.StreamUrl != nil {
		l = m.StreamUrl.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.MosaicStatus != 0 {
		n += 2 + sovMessage(uint64(m.MosaicStatus))
	}
	l = len(m.MosaicTip)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.CellStyle != 0 {
		n += 2 + sovMessage(uint64(m.CellStyle))
	}
	if m.LinkMic != nil {
		l = m.LinkMic.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.LuckymoneyNum != 0 {
		n += 2 + sovMessage(uint64(m.LuckymoneyNum))
	}
	if len(m.DecoList) > 0 {
		for _, e := range m.DecoList {
			l = e.Size()
			n += 2 + l + sovMessage(uint64(l))
		}
	}
	if len(m.TopFans) > 0 {
		for _, e := range m.TopFans {
			l = e.Size()
			n += 2 + l + sovMessage(uint64(l))
		}
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.SunDailyIconContent)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.Distance)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.DistanceCity)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.RealDistance)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.FeedRoomLabel != nil {
		l = m.FeedRoomLabel.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.CommonLabelList)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.LivingRoomAttrs != nil {
		l = m.LivingRoomAttrs.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if len(m.AdminUserIds) > 0 {
		l = 0
		for _, e := range m.AdminUserIds {
			l += sovMessage(uint64(e))
		}
		n += 2 + sovMessage(uint64(l)) + l
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.PrivateInfo)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomUserAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LinkMic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Decoration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopFan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessage(uint64(m.Id))
	}
	if m.ShortId != 0 {
		n += 1 + sovMessage(uint64(m.ShortId))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovMessage(uint64(m.Gender))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovMessage(uint64(m.Level))
	}
	if m.Birthday != 0 {
		n += 1 + sovMessage(uint64(m.Birthday))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.AvatarThumb != nil {
		l = m.AvatarThumb.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.AvatarMedium != nil {
		l = m.AvatarMedium.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.AvatarLarge != nil {
		l = m.AvatarLarge.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Verified {
		n += 2
	}
	if m.Experience != 0 {
		n += 1 + sovMessage(uint64(m.Experience))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	if m.CreateTime != 0 {
		n += 2 + sovMessage(uint64(m.CreateTime))
	}
	if m.ModifyTime != 0 {
		n += 2 + sovMessage(uint64(m.ModifyTime))
	}
	if m.Secret != 0 {
		n += 2 + sovMessage(uint64(m.Secret))
	}
	l = len(m.ShareQrcodeUri)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.IncomeSharePercent != 0 {
		n += 2 + sovMessage(uint64(m.IncomeSharePercent))
	}
	if m.BadgeImageList != nil {
		l = m.BadgeImageList.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.FollowInfo != nil {
		l = m.FollowInfo.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.PayGrade != nil {
		l = m.PayGrade.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.FansClub != nil {
		l = m.FansClub.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.Border != nil {
		l = m.Border.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.SpecialId)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.AvatarBorder != nil {
		l = m.AvatarBorder.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.Medal != nil {
		l = m.Medal.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if len(m.RealTimeIcons) > 0 {
		for _, e := range m.RealTimeIcons {
			l = e.Size()
			n += 2 + l + sovMessage(uint64(l))
		}
	}
	if len(m.NewRealTimeIcons) > 0 {
		for _, e := range m.NewRealTimeIcons {
			l = e.Size()
			n += 2 + l + sovMessage(uint64(l))
		}
	}
	if m.TopVipNo != 0 {
		n += 2 + sovMessage(uint64(m.TopVipNo))
	}
	if m.UserAttr != nil {
		l = m.UserAttr.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.OwnRoom != nil {
		l = m.OwnRoom.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.PayScore != 0 {
		n += 2 + sovMessage(uint64(m.PayScore))
	}
	if m.TicketCount != 0 {
		n += 2 + sovMessage(uint64(m.TicketCount))
	}
	if m.AnchorInfo != nil {
		l = m.AnchorInfo.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.LinkMicStats != 0 {
		n += 2 + sovMessage(uint64(m.LinkMicStats))
	}
	l = len(m.DisplayId)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.SecUid)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.UserRole != 0 {
		n += 2 + sovMessage(uint64(m.UserRole))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User_UserAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User_OwnRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User_AnchorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User_FollowInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FollowingCount != 0 {
		n += 1 + sovMessage(uint64(m.FollowingCount))
	}
	if m.FollowerCount != 0 {
		n += 1 + sovMessage(uint64(m.FollowerCount))
	}
	if m.FollowStatus != 0 {
		n += 1 + sovMessage(uint64(m.FollowStatus))
	}
	if m.PushStatus != 0 {
		n += 1 + sovMessage(uint64(m.PushStatus))
	}
	l = len(m.RemarkName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User_FansClub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.PreferData) > 0 {
		for k, v := range m.PreferData {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + sovMessage(uint64(k)) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User_FansClub_FansClubData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClubName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovMessage(uint64(m.Level))
	}
	if m.UserFansClubStatus != 0 {
		n += 1 + sovMessage(uint64(m.UserFansClubStatus))
	}
	if m.Badge != nil {
		l = m.Badge.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.AvailableGiftIds) > 0 {
		l = 0
		for _, e := range m.AvailableGiftIds {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if m.AnchorId != 0 {
		n += 1 + sovMessage(uint64(m.AnchorId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User_FansClub_FansClubData_UserBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Icons) > 0 {
		for k, v := range m.Icons {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + sovMessage(uint64(k)) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User_Border) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User_GradeBuffInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuffLevel != 0 {
		n += 1 + sovMessage(uint64(m.BuffLevel))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	if m.EndTime != 0 {
		n += 1 + sovMessage(uint64(m.EndTime))
	}
	if len(m.StatsInfo) > 0 {
		for k, v := range m.StatsInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMessage(uint64(k)) + 1 + sovMessage(uint64(v))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if m.BuffBadge != nil {
		l = m.BuffBadge.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User_PayGrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDiamondCount != 0 {
		n += 1 + sovMessage(uint64(m.TotalDiamondCount))
	}
	if m.DiamondIcon != nil {
		l = m.DiamondIcon.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Icon != nil {
		l = m.Icon.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.NextName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovMessage(uint64(m.Level))
	}
	if m.NextIcon != nil {
		l = m.NextIcon.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.NextDiamond != 0 {
		n += 1 + sovMessage(uint64(m.NextDiamond))
	}
	if m.NowDiamond != 0 {
		n += 1 + sovMessage(uint64(m.NowDiamond))
	}
	if m.ThisGradeMinDiamond != 0 {
		n += 1 + sovMessage(uint64(m.ThisGradeMinDiamond))
	}
	if m.ThisGradeMaxDiamond != 0 {
		n += 1 + sovMessage(uint64(m.ThisGradeMaxDiamond))
	}
	if m.PayDiamondBak != 0 {
		n += 1 + sovMessage(uint64(m.PayDiamondBak))
	}
	l = len(m.GradeDescribe)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.GradeIconList) > 0 {
		for _, e := range m.GradeIconList {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.ScreenChatType != 0 {
		n += 1 + sovMessage(uint64(m.ScreenChatType))
	}
	if m.ImIcon != nil {
		l = m.ImIcon.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.ImIconWithLevel != nil {
		l = m.ImIconWithLevel.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.LiveIcon != nil {
		l = m.LiveIcon.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.NewImIconWithLevel != nil {
		l = m.NewImIconWithLevel.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.NewLiveIcon != nil {
		l = m.NewLiveIcon.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.UpgradeNeedConsume != 0 {
		n += 2 + sovMessage(uint64(m.UpgradeNeedConsume))
	}
	l = len(m.NextPrivileges)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.Background != nil {
		l = m.Background.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.BackgroundBack != nil {
		l = m.BackgroundBack.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.Score != 0 {
		n += 2 + sovMessage(uint64(m.Score))
	}
	if m.BuffInfo != nil {
		l = m.BuffInfo.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.GradeBanner)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.ProfileDialogBg != nil {
		l = m.ProfileDialogBg.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.ProfileDialogBgBack != nil {
		l = m.ProfileDialogBgBack.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User_PayGrade_GradeIcon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Icon != nil {
		l = m.Icon.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.IconDiamond != 0 {
		n += 1 + sovMessage(uint64(m.IconDiamond))
	}
	if m.Level != 0 {
		n += 1 + sovMessage(uint64(m.Level))
	}
	l = len(m.LevelStr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TextFormat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Bold {
		n += 2
	}
	if m.Italic {
		n += 2
	}
	if m.Weight != 0 {
		n += 1 + sovMessage(uint64(m.Weight))
	}
	if m.ItalicAngle != 0 {
		n += 1 + sovMessage(uint64(m.ItalicAngle))
	}
	if m.FontSize != 0 {
		n += 1 + sovMessage(uint64(m.FontSize))
	}
	if m.UserHeightLightColor {
		n += 2
	}
	if m.UseRemoteClor {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TextPiece) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.Format != nil {
		l = m.Format.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.StringValue)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.UserValue != nil {
		l = m.UserValue.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UrlList) > 0 {
		for _, s := range m.UrlList {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.Width != 0 {
		n += 1 + sovMessage(uint64(m.Width))
	}
	l = len(m.AvgColor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ImageType != 0 {
		n += 1 + sovMessage(uint64(m.ImageType))
	}
	l = len(m.OpenWebUrl)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.IsAnimated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Image_Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.FontColor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovMessage(uint64(m.Level))
	}
	l = len(m.AlternativeText)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TextPieceUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WithColon {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublicAreaCommon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserLabel != nil {
		l = m.UserLabel.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.UserConsumeInRoom != 0 {
		n += 1 + sovMessage(uint64(m.UserConsumeInRoom))
	}
	if m.UserSendGiftCntInRoom != 0 {
		n += 1 + sovMessage(uint64(m.UserSendGiftCntInRoom))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftIMPriority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QueueSizes) > 0 {
		l = 0
		for _, e := range m.QueueSizes {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if m.SelfQueuePriority != 0 {
		n += 1 + sovMessage(uint64(m.SelfQueuePriority))
	}
	if m.Priority != 0 {
		n += 1 + sovMessage(uint64(m.Priority))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftTrayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrayDisplayText != nil {
		l = m.TrayDisplayText.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TrayBaseImg != nil {
		l = m.TrayBaseImg.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TrayHeadImg != nil {
		l = m.TrayHeadImg.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TrayRightImg != nil {
		l = m.TrayRightImg.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TrayLevel != 0 {
		n += 1 + sovMessage(uint64(m.TrayLevel))
	}
	if m.TrayDynamicImg != nil {
		l = m.TrayDynamicImg.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Describe)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Notify {
		n += 2
	}
	if m.Duration != 0 {
		n += 1 + sovMessage(uint64(m.Duration))
	}
	if m.Id != 0 {
		n += 1 + sovMessage(uint64(m.Id))
	}
	if m.FansclubInfo != nil {
		l = m.FansclubInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ForLinkmic {
		n += 2
	}
	if m.Doodle {
		n += 2
	}
	if m.ForFansclub {
		n += 2
	}
	if m.Combo {
		n += 2
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.DiamondCount != 0 {
		n += 1 + sovMessage(uint64(m.DiamondCount))
	}
	if m.IsDisplayedOnPanel != 0 {
		n += 1 + sovMessage(uint64(m.IsDisplayedOnPanel))
	}
	if m.PrimaryEffectId != 0 {
		n += 1 + sovMessage(uint64(m.PrimaryEffectId))
	}
	if m.GiftLabelIcon != nil {
		l = m.GiftLabelIcon.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.Manual)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.ForCustom {
		n += 3
	}
	if len(m.SpecialEffects) > 0 {
		for k, v := range m.SpecialEffects {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + sovMessage(uint64(v))
			n += mapEntrySize + 2 + sovMessage(uint64(mapEntrySize))
		}
	}
	if m.Icon != nil {
		l = m.Icon.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.ActionType != 0 {
		n += 2 + sovMessage(uint64(m.ActionType))
	}
	if m.WatermelonSeeds != 0 {
		n += 2 + sovMessage(uint64(m.WatermelonSeeds))
	}
	l = len(m.GoldEffect)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if len(m.Subs) > 0 {
		for _, e := range m.Subs {
			l = e.Size()
			n += 2 + l + sovMessage(uint64(l))
		}
	}
	if m.GoldenBeans != 0 {
		n += 2 + sovMessage(uint64(m.GoldenBeans))
	}
	if m.HonorLevel != 0 {
		n += 2 + sovMessage(uint64(m.HonorLevel))
	}
	if m.ItemType != 0 {
		n += 2 + sovMessage(uint64(m.ItemType))
	}
	l = len(m.SchemeUrl)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.GiftOperation != nil {
		l = m.GiftOperation.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.EventName)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.NobleLevel != 0 {
		n += 2 + sovMessage(uint64(m.NobleLevel))
	}
	l = len(m.GuideUrl)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.PunishMedicine {
		n += 3
	}
	if m.ForPortal {
		n += 3
	}
	l = len(m.BusinessText)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.CnyGift {
		n += 3
	}
	if m.AppId != 0 {
		n += 2 + sovMessage(uint64(m.AppId))
	}
	if m.VipLevel != 0 {
		n += 2 + sovMessage(uint64(m.VipLevel))
	}
	if m.IsGray {
		n += 3
	}
	l = len(m.GraySchemeUrl)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.GiftScene != 0 {
		n += 2 + sovMessage(uint64(m.GiftScene))
	}
	if m.GiftBanner != nil {
		l = m.GiftBanner.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if len(m.TriggerWords) > 0 {
		for _, s := range m.TriggerWords {
			l = len(s)
			n += 2 + l + sovMessage(uint64(l))
		}
	}
	if len(m.GiftBuffInfos) > 0 {
		for _, e := range m.GiftBuffInfos {
			l = e.Size()
			n += 2 + l + sovMessage(uint64(l))
		}
	}
	if m.ForFirstRecharge {
		n += 3
	}
	if m.DynamicImgForSelected != nil {
		l = m.DynamicImgForSelected.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.AfterSendAction != 0 {
		n += 2 + sovMessage(uint64(m.AfterSendAction))
	}
	if m.GiftOfflineTime != 0 {
		n += 2 + sovMessage(uint64(m.GiftOfflineTime))
	}
	l = len(m.TopBarText)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.TopRightAvatar != nil {
		l = m.TopRightAvatar.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.BannerSchemeUrl)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.IsLocked {
		n += 3
	}
	if m.ReqExtraType != 0 {
		n += 2 + sovMessage(uint64(m.ReqExtraType))
	}
	if len(m.AssetIds) > 0 {
		l = 0
		for _, e := range m.AssetIds {
			l += sovMessage(uint64(e))
		}
		n += 2 + sovMessage(uint64(l)) + l
	}
	if m.GiftPreviewInfo != nil {
		l = m.GiftPreviewInfo.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.GiftTip != nil {
		l = m.GiftTip.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.NeedSweepLightCount != 0 {
		n += 2 + sovMessage(uint64(m.NeedSweepLightCount))
	}
	if len(m.GroupInfo) > 0 {
		for _, e := range m.GroupInfo {
			l = e.Size()
			n += 2 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftStruct_GiftStructFansClubInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinLevel != 0 {
		n += 1 + sovMessage(uint64(m.MinLevel))
	}
	if m.InsertPos != 0 {
		n += 1 + sovMessage(uint64(m.InsertPos))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AssetEffectMixInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LuckyMoneyGiftMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftPanelOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftBanner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftBuffInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftPreviewInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftTip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftGroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EffectMixImageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &Message{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchInterval", wireType)
			}
			m.FetchInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FetchInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalExt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalExt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchType", wireType)
			}
			m.FetchType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FetchType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteParams == nil {
				m.RouteParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RouteParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatDuration", wireType)
			}
			m.HeartbeatDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedAck = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushServer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveCursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveCursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryNoMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HistoryNoMore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomUserSeqMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomUserSeqMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomUserSeqMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &Common{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranks = append(m.Ranks, &RoomUserSeqMessage_Contributor{})
			if err := m.Ranks[len(m.Ranks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PopStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seats = append(m.Seats, &RoomUserSeqMessage_Contributor{})
			if err := m.Seats[len(m.Seats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Popularity", wireType)
			}
			m.Popularity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Popularity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUser", wireType)
			}
			m.TotalUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalUser |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUserStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalUserStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineUserForAnchor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlineUserForAnchor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPvForAnchor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalPvForAnchor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomUserSeqMessage_Contributor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contributor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contributor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			m.Delta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delta |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHidden = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScoreDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactlyScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExactlyScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &Common{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftId", wireType)
			}
			m.GiftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FanTicketCount", wireType)
			}
			m.FanTicketCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FanTicketCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCount", wireType)
			}
			m.GroupCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatCount", wireType)
			}
			m.RepeatCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepeatCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComboCount", wireType)
			}
			m.ComboCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComboCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToUser == nil {
				m.ToUser = &User{}
			}
			if err := m.ToUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatEnd", wireType)
			}
			m.RepeatEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepeatEnd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextEffect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TextEffect == nil {
				m.TextEffect = &GiftMessage_TextEffect{}
			}
			if err := m.TextEffect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomeTaskgifts", wireType)
			}
			m.IncomeTaskgifts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncomeTaskgifts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomFanTicketCount", wireType)
			}
			m.RoomFanTicketCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomFanTicketCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Priority == nil {
				m.Priority = &GiftIMPriority{}
			}
			if err := m.Priority.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gift == nil {
				m.Gift = &GiftStruct{}
			}
			if err := m.Gift.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendType", wireType)
			}
			m.SendType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAreaCommon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAreaCommon == nil {
				m.PublicAreaCommon = &PublicAreaCommon{}
			}
			if err := m.PublicAreaCommon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrayDisplayText", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrayDisplayText == nil {
				m.TrayDisplayText = &Text{}
			}
			if err := m.TrayDisplayText.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedDisplayEffects", wireType)
			}
			m.BannedDisplayEffects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedDisplayEffects |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrayInfo == nil {
				m.TrayInfo = &GiftTrayInfo{}
			}
			if err := m.TrayInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetEffectMixInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetEffectMixInfo == nil {
				m.AssetEffectMixInfo = &AssetEffectMixInfo{}
			}
			if err := m.AssetEffectMixInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftMessage_TextEffect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextEffect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextEffect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portrait", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Portrait == nil {
				m.Portrait = &GiftMessage_TextEffect_Detail{}
			}
			if err := m.Portrait.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Landscape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Landscape == nil {
				m.Landscape = &GiftMessage_TextEffect_Detail{}
			}
			if err := m.Landscape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftMessage_TextEffect_Detail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Detail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Detail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &Text{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextFontSize", wireType)
			}
			m.TextFontSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextFontSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Background == nil {
				m.Background = &Image{}
			}
			if err := m.Background.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShadowDx", wireType)
			}
			m.ShadowDx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShadowDx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShadowDy", wireType)
			}
			m.ShadowDy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShadowDy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShadowRadius", wireType)
			}
			m.ShadowRadius = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShadowRadius |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShadowColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShadowColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrokeColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrokeColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrokeWidth", wireType)
			}
			m.StrokeWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrokeWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &Common{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &Common{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibleToSender", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VisibleToSender = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackgroundImage == nil {
				m.BackgroundImage = &Image{}
			}
			if err := m.BackgroundImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullScreenTextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullScreenTextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundImageV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackgroundImageV2 == nil {
				m.BackgroundImageV2 = &Image{}
			}
			if err := m.BackgroundImageV2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAreaCommon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAreaCommon == nil {
				m.PublicAreaCommon = &PublicAreaCommon{}
			}
			if err := m.PublicAreaCommon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GiftImage == nil {
				m.GiftImage = &Image{}
			}
			if err := m.GiftImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocialMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocialMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocialMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &Common{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareType", wireType)
			}
			m.ShareType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowCount", wireType)
			}
			m.FollowCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAreaCommon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAreaCommon == nil {
				m.PublicAreaCommon = &PublicAreaCommon{}
			}
			if err := m.PublicAreaCommon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &Common{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberCount", wireType)
			}
			m.MemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operator == nil {
				m.Operator = &User{}
			}
			if err := m.Operator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSetToAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSetToAdmin = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTopUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTopUser = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankScore", wireType)
			}
			m.RankScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopUserNo", wireType)
			}
			m.TopUserNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopUserNo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterType", wireType)
			}
			m.EnterType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnterType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectConfig == nil {
				m.EffectConfig = &MemberMessage_EffectConfig{}
			}
			if err := m.EffectConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PopStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterEffectConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnterEffectConfig == nil {
				m.EnterEffectConfig = &MemberMessage_EffectConfig{}
			}
			if err := m.EnterEffectConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackgroundImage == nil {
				m.BackgroundImage = &Image{}
			}
			if err := m.BackgroundImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundImageV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackgroundImageV2 == nil {
				m.BackgroundImageV2 = &Image{}
			}
			if err := m.BackgroundImageV2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorDisplayText", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnchorDisplayText == nil {
				m.AnchorDisplayText = &Text{}
			}
			if err := m.AnchorDisplayText.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAreaCommon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAreaCommon == nil {
				m.PublicAreaCommon = &PublicAreaCommon{}
			}
			if err := m.PublicAreaCommon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberMessage_EffectConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Icon == nil {
				m.Icon = &Image{}
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarPos", wireType)
			}
			m.AvatarPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarPos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &Text{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TextIcon == nil {
				m.TextIcon = &Image{}
			}
			if err := m.TextIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StayTime", wireType)
			}
			m.StayTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StayTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimAssetId", wireType)
			}
			m.AnimAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnimAssetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Badge == nil {
				m.Badge = &Image{}
			}
			if err := m.Badge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FlexSettingArray = append(m.FlexSettingArray, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FlexSettingArray) == 0 {
					m.FlexSettingArray = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FlexSettingArray = append(m.FlexSettingArray, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FlexSettingArray", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextIconOverlay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TextIconOverlay == nil {
				m.TextIconOverlay = &Image{}
			}
			if err := m.TextIconOverlay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimatedBadge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnimatedBadge == nil {
				m.AnimatedBadge = &Image{}
			}
			if err := m.AnimatedBadge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasSweepLight", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasSweepLight = bool(v != 0)
		case 13:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TextFlexSettingArray = append(m.TextFlexSettingArray, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TextFlexSettingArray) == 0 {
					m.TextFlexSettingArray = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TextFlexSettingArray = append(m.TextFlexSettingArray, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TextFlexSettingArray", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CenterAnimAssetId", wireType)
			}
			m.CenterAnimAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CenterAnimAssetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &Common{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FansclubMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FansclubMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FansclubMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonInfo == nil {
				m.CommonInfo = &Common{}
			}
			if err := m.CommonInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Common) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Common: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Common: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitor", wireType)
			}
			m.Monitor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Monitor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShowMsg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShowMsg = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Describe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Describe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayText", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayText == nil {
				m.DisplayText = &Text{}
			}
			if err := m.DisplayText.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoldType", wireType)
			}
			m.FoldType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FoldType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorFoldType", wireType)
			}
			m.AnchorFoldType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnchorFoldType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityScore", wireType)
			}
			m.PriorityScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriorityScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgProcessFilterK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgProcessFilterK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgProcessFilterV", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgProcessFilterV = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorFoldTypeV2", wireType)
			}
			m.AnchorFoldTypeV2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnchorFoldTypeV2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessAtSeiTimeMs", wireType)
			}
			m.ProcessAtSeiTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessAtSeiTimeMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Text) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Text: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Text: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultPattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFormat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultFormat == nil {
				m.DefaultFormat = &TextFormat{}
			}
			if err := m.DefaultFormat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pieces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pieces = append(m.Pieces, &TextPiece{})
			if err := m.Pieces[len(m.Pieces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Room) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerUserId", wireType)
			}
			m.OwnerUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCount", wireType)
			}
			m.UserCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkmicLayout", wireType)
			}
			m.LinkmicLayout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinkmicLayout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = &RoomExtra{}
			}
			if err := m.Extra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicCoverUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicCoverUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicCoverDict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicCoverDict == nil {
				m.DynamicCoverDict = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DynamicCoverDict[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPingTime", wireType)
			}
			m.LastPingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPingTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveId", wireType)
			}
			m.LiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamProvider", wireType)
			}
			m.StreamProvider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamProvider |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsType", wireType)
			}
			m.OsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			m.ClientVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithLinkmic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithLinkmic = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableRoomPerspective", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableRoomPerspective = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cover == nil {
				m.Cover = &Image{}
			}
			if err := m.Cover.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicCover", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicCover == nil {
				m.DynamicCover = &Image{}
			}
			if err := m.DynamicCover.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicCoverLow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicCoverLow == nil {
				m.DynamicCoverLow = &Image{}
			}
			if err := m.DynamicCoverLow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorShareText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnchorShareText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserShareText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserShareText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamIdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamIdStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamUrl == nil {
				m.StreamUrl = &StreamUrl{}
			}
			if err := m.StreamUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MosaicStatus", wireType)
			}
			m.MosaicStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MosaicStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MosaicTip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MosaicTip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellStyle", wireType)
			}
			m.CellStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellStyle |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkMic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LinkMic == nil {
				m.LinkMic = &LinkMic{}
			}
			if err := m.LinkMic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckymoneyNum", wireType)
			}
			m.LuckymoneyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LuckymoneyNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecoList = append(m.DecoList, &Decoration{})
			if err := m.DecoList[len(m.DecoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopFans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopFans = append(m.TopFans, &TopFan{})
			if err := m.TopFans[len(m.TopFans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &RoomStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SunDailyIconContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SunDailyIconContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistanceCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistanceCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealDistance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealDistance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedRoomLabel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedRoomLabel == nil {
				m.FeedRoomLabel = &Image{}
			}
			if err := m.FeedRoomLabel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonLabelList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonLabelList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivingRoomAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LivingRoomAttrs == nil {
				m.LivingRoomAttrs = &RoomUserAttr{}
			}
			if err := m.LivingRoomAttrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AdminUserIds = append(m.AdminUserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AdminUserIds) == 0 {
					m.AdminUserIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AdminUserIds = append(m.AdminUserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUserIds", wireType)
			}
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &User{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomUserAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomUserAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomUserAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkMic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkMic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkMic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Decoration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decoration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decoration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopFan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopFan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopFan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortId", wireType)
			}
			m.ShortId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShortId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarThumb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvatarThumb == nil {
				m.AvatarThumb = &Image{}
			}
			if err := m.AvatarThumb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarMedium", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvatarMedium == nil {
				m.AvatarMedium = &Image{}
			}
			if err := m.AvatarMedium.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarLarge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvatarLarge == nil {
				m.AvatarLarge = &Image{}
			}
			if err := m.AvatarLarge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experience", wireType)
			}
			m.Experience = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Experience |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifyTime", wireType)
			}
			m.ModifyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifyTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			m.Secret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Secret |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareQrcodeUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareQrcodeUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomeSharePercent", wireType)
			}
			m.IncomeSharePercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncomeSharePercent |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeImageList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BadgeImageList == nil {
				m.BadgeImageList = &Image{}
			}
			if err := m.BadgeImageList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FollowInfo == nil {
				m.FollowInfo = &User_FollowInfo{}
			}
			if err := m.FollowInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayGrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PayGrade == nil {
				m.PayGrade = &User_PayGrade{}
			}
			if err := m.PayGrade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansClub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FansClub == nil {
				m.FansClub = &User_FansClub{}
			}
			if err := m.FansClub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Border", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Border == nil {
				m.Border = &User_Border{}
			}
			if err := m.Border.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarBorder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvatarBorder == nil {
				m.AvatarBorder = &Image{}
			}
			if err := m.AvatarBorder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Medal == nil {
				m.Medal = &Image{}
			}
			if err := m.Medal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealTimeIcons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealTimeIcons = append(m.RealTimeIcons, &Image{})
			if err := m.RealTimeIcons[len(m.RealTimeIcons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRealTimeIcons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewRealTimeIcons = append(m.NewRealTimeIcons, &Image{})
			if err := m.NewRealTimeIcons[len(m.NewRealTimeIcons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopVipNo", wireType)
			}
			m.TopVipNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopVipNo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserAttr == nil {
				m.UserAttr = &User_UserAttr{}
			}
			if err := m.UserAttr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnRoom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnRoom == nil {
				m.OwnRoom = &User_OwnRoom{}
			}
			if err := m.OwnRoom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayScore", wireType)
			}
			m.PayScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketCount", wireType)
			}
			m.TicketCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TicketCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnchorInfo == nil {
				m.AnchorInfo = &User_AnchorInfo{}
			}
			if err := m.AnchorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkMicStats", wireType)
			}
			m.LinkMicStats = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinkMicStats |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRole", wireType)
			}
			m.UserRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserRole |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UserAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_OwnRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AnchorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_FollowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingCount", wireType)
			}
			m.FollowingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowerCount", wireType)
			}
			m.FollowerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowerCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowStatus", wireType)
			}
			m.FollowStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushStatus", wireType)
			}
			m.PushStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemarkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemarkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_FansClub) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FansClub: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FansClub: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &User_FansClub_FansClubData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreferData == nil {
				m.PreferData = make(map[int32]*User_FansClub_FansClubData)
			}
			var mapkey int32
			var mapvalue *User_FansClub_FansClubData
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &User_FansClub_FansClubData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PreferData[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_FansClub_FansClubData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FansClubData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FansClubData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClubName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClubName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserFansClubStatus", wireType)
			}
			m.UserFansClubStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserFansClubStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Badge == nil {
				m.Badge = &User_FansClub_FansClubData_UserBadge{}
			}
			if err := m.Badge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AvailableGiftIds = append(m.AvailableGiftIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AvailableGiftIds) == 0 {
					m.AvailableGiftIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AvailableGiftIds = append(m.AvailableGiftIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableGiftIds", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorId", wireType)
			}
			m.AnchorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnchorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_FansClub_FansClubData_UserBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Icons == nil {
				m.Icons = make(map[int32]*Image)
			}
			var mapkey int32
			var mapvalue *Image
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Image{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Icons[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_Border) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Border: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Border: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GradeBuffInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GradeBuffInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GradeBuffInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffLevel", wireType)
			}
			m.BuffLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatsInfo == nil {
				m.StatsInfo = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StatsInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffBadge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuffBadge == nil {
				m.BuffBadge = &Image{}
			}
			if err := m.BuffBadge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_PayGrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayGrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayGrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDiamondCount", wireType)
			}
			m.TotalDiamondCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDiamondCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiamondIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiamondIcon == nil {
				m.DiamondIcon = &Image{}
			}
			if err := m.DiamondIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Icon == nil {
				m.Icon = &Image{}
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextIcon == nil {
				m.NextIcon = &Image{}
			}
			if err := m.NextIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDiamond", wireType)
			}
			m.NextDiamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextDiamond |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowDiamond", wireType)
			}
			m.NowDiamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowDiamond |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisGradeMinDiamond", wireType)
			}
			m.ThisGradeMinDiamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThisGradeMinDiamond |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisGradeMaxDiamond", wireType)
			}
			m.ThisGradeMaxDiamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThisGradeMaxDiamond |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayDiamondBak", wireType)
			}
			m.PayDiamondBak = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayDiamondBak |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradeDescribe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GradeDescribe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradeIconList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GradeIconList = append(m.GradeIconList, &User_PayGrade_GradeIcon{})
			if err := m.GradeIconList[len(m.GradeIconList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenChatType", wireType)
			}
			m.ScreenChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreenChatType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImIcon == nil {
				m.ImIcon = &Image{}
			}
			if err := m.ImIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImIconWithLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImIconWithLevel == nil {
				m.ImIconWithLevel = &Image{}
			}
			if err := m.ImIconWithLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiveIcon == nil {
				m.LiveIcon = &Image{}
			}
			if err := m.LiveIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewImIconWithLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewImIconWithLevel == nil {
				m.NewImIconWithLevel = &Image{}
			}
			if err := m.NewImIconWithLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLiveIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewLiveIcon == nil {
				m.NewLiveIcon = &Image{}
			}
			if err := m.NewLiveIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeNeedConsume", wireType)
			}
			m.UpgradeNeedConsume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeNeedConsume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPrivileges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPrivileges = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Background == nil {
				m.Background = &Image{}
			}
			if err := m.Background.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundBack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackgroundBack == nil {
				m.BackgroundBack = &Image{}
			}
			if err := m.BackgroundBack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuffInfo == nil {
				m.BuffInfo = &User_GradeBuffInfo{}
			}
			if err := m.BuffInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradeBanner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GradeBanner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileDialogBg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProfileDialogBg == nil {
				m.ProfileDialogBg = &Image{}
			}
			if err := m.ProfileDialogBg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileDialogBgBack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProfileDialogBgBack == nil {
				m.ProfileDialogBgBack = &Image{}
			}
			if err := m.ProfileDialogBgBack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_PayGrade_GradeIcon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GradeIcon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GradeIcon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Icon == nil {
				m.Icon = &Image{}
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconDiamond", wireType)
			}
			m.IconDiamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IconDiamond |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextFormat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextFormat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextFormat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bold", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bold = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Italic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Italic = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItalicAngle", wireType)
			}
			m.ItalicAngle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItalicAngle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontSize", wireType)
			}
			m.FontSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FontSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserHeightLightColor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserHeightLightColor = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseRemoteClor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseRemoteClor = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextPiece) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextPiece: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextPiece: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Format == nil {
				m.Format = &TextFormat{}
			}
			if err := m.Format.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserValue == nil {
				m.UserValue = &TextPieceUser{}
			}
			if err := m.UserValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlList = append(m.UrlList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageType", wireType)
			}
			m.ImageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenWebUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenWebUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Image_Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAnimated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAnimated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Image_Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlternativeText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlternativeText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextPieceUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextPieceUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextPieceUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithColon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithColon = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicAreaCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicAreaCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicAreaCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLabel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserLabel == nil {
				m.UserLabel = &Image{}
			}
			if err := m.UserLabel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserConsumeInRoom", wireType)
			}
			m.UserConsumeInRoom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserConsumeInRoom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserSendGiftCntInRoom", wireType)
			}
			m.UserSendGiftCntInRoom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserSendGiftCntInRoom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftIMPriority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftIMPriority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftIMPriority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.QueueSizes = append(m.QueueSizes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.QueueSizes) == 0 {
					m.QueueSizes = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.QueueSizes = append(m.QueueSizes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueSizes", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfQueuePriority", wireType)
			}
			m.SelfQueuePriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfQueuePriority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftTrayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftTrayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftTrayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrayDisplayText", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrayDisplayText == nil {
				m.TrayDisplayText = &Text{}
			}
			if err := m.TrayDisplayText.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrayBaseImg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrayBaseImg == nil {
				m.TrayBaseImg = &Image{}
			}
			if err := m.TrayBaseImg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrayHeadImg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrayHeadImg == nil {
				m.TrayHeadImg = &Image{}
			}
			if err := m.TrayHeadImg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrayRightImg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrayRightImg == nil {
				m.TrayRightImg = &Image{}
			}
			if err := m.TrayRightImg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrayLevel", wireType)
			}
			m.TrayLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrayLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrayDynamicImg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrayDynamicImg == nil {
				m.TrayDynamicImg = &Image{}
			}
			if err := m.TrayDynamicImg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &Image{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Describe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Describe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Notify = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansclubInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FansclubInfo == nil {
				m.FansclubInfo = &GiftStruct_GiftStructFansClubInfo{}
			}
			if err := m.FansclubInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForLinkmic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForLinkmic = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doodle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Doodle = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForFansclub", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForFansclub = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Combo = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiamondCount", wireType)
			}
			m.DiamondCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiamondCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDisplayedOnPanel", wireType)
			}
			m.IsDisplayedOnPanel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDisplayedOnPanel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEffectId", wireType)
			}
			m.PrimaryEffectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryEffectId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftLabelIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GiftLabelIcon == nil {
				m.GiftLabelIcon = &Image{}
			}
			if err := m.GiftLabelIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manual", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manual = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForCustom", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForCustom = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialEffects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpecialEffects == nil {
				m.SpecialEffects = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SpecialEffects[mapkey] = mapvalue
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Icon == nil {
				m.Icon = &Image{}
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatermelonSeeds", wireType)
			}
			m.WatermelonSeeds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatermelonSeeds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldEffect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldEffect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subs = append(m.Subs, &LuckyMoneyGiftMeta{})
			if err := m.Subs[len(m.Subs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldenBeans", wireType)
			}
			m.GoldenBeans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldenBeans |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HonorLevel", wireType)
			}
			m.HonorLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HonorLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			m.ItemType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftOperation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GiftOperation == nil {
				m.GiftOperation = &GiftPanelOperation{}
			}
			if err := m.GiftOperation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NobleLevel", wireType)
			}
			m.NobleLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NobleLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuideUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuideUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PunishMedicine", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PunishMedicine = bool(v != 0)
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForPortal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForPortal = bool(v != 0)
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CnyGift", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CnyGift = bool(v != 0)
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGray", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGray = bool(v != 0)
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraySchemeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraySchemeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftScene", wireType)
			}
			m.GiftScene = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftScene |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftBanner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GiftBanner == nil {
				m.GiftBanner = &GiftBanner{}
			}
			if err := m.GiftBanner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggerWords = append(m.TriggerWords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftBuffInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftBuffInfos = append(m.GiftBuffInfos, &GiftBuffInfo{})
			if err := m.GiftBuffInfos[len(m.GiftBuffInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForFirstRecharge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForFirstRecharge = bool(v != 0)
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicImgForSelected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicImgForSelected == nil {
				m.DynamicImgForSelected = &Image{}
			}
			if err := m.DynamicImgForSelected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterSendAction", wireType)
			}
			m.AfterSendAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfterSendAction |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftOfflineTime", wireType)
			}
			m.GiftOfflineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftOfflineTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopBarText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopBarText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRightAvatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopRightAvatar == nil {
				m.TopRightAvatar = &Image{}
			}
			if err := m.TopRightAvatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannerSchemeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BannerSchemeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocked = bool(v != 0)
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqExtraType", wireType)
			}
			m.ReqExtraType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqExtraType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AssetIds = append(m.AssetIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AssetIds) == 0 {
					m.AssetIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AssetIds = append(m.AssetIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIds", wireType)
			}
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftPreviewInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GiftPreviewInfo == nil {
				m.GiftPreviewInfo = &GiftPreviewInfo{}
			}
			if err := m.GiftPreviewInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftTip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GiftTip == nil {
				m.GiftTip = &GiftTip{}
			}
			if err := m.GiftTip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedSweepLightCount", wireType)
			}
			m.NeedSweepLightCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedSweepLightCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupInfo = append(m.GroupInfo, &GiftGroupInfo{})
			if err := m.GroupInfo[len(m.GroupInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftStruct_GiftStructFansClubInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftStructFansClubInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftStructFansClubInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLevel", wireType)
			}
			m.MinLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertPos", wireType)
			}
			m.InsertPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertPos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetEffectMixInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetEffectMixInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetEffectMixInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LuckyMoneyGiftMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LuckyMoneyGiftMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LuckyMoneyGiftMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftPanelOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftPanelOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftPanelOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftBanner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftBanner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftBanner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftBuffInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftBuffInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftBuffInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftPreviewInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftPreviewInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftPreviewInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftTip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftTip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftTip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EffectMixImageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectMixImageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectMixImageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
